linux f90 code written by tim mitchell readme file 24204 i have written fairly substantial volume of f90 code in the past few years mostly to cope with all the datasets i have been handling i have done almost all my data manipulation in f90 and almost all my data plotting in idl the code in this directory was mostly originally written in compaq f90 on crua6 and was mostly subsequently ported to work under the portland group f90 compiler on the uea beowulf cluster beo1ueaacuk this code has been ftpd back to here to be within reach of crua6 users where i have had the opportunity i have ported the code back to crua6 this equivalent crua6 code may be found in alpha the compilation statements in the headers of the main programs will use the pgf90 command if the program has been ported across to the beowulf cluster if i never got around to porting the statements will use the f90 command if you want to use an unported f90 program on the beowulf cluster find pgf90 program and copy the syntax it should mostly work exceptions may include hard addressing of dump files in the main program search for f709762 b reading the number of lines in file via shell call wc l as i10 instead of i8 c passing pointer array to subroutine subsequently allocated in the subroutine and returned to the main program for some unknown reason this works fine on crua6 but not or erratically on beo1 if you get segmentation fault suspect this easy solution because i use this construct extensively you may need to rewrite the code to allow two calls call the subroutine once to find the dimensions of the arrays then allocate the arrays in the main program then call the subroutine again to fill the arrays good luck d calling subroutine that has been subsequently modified since i last compiled the main program check that the variables passed tofrom the subroutine are the same in the main program and in the subroutine changes are usually noted in the subroutine headers if anyone wanted to run this software on the beowulf cluster it should be quite simple 1 copy this directory across to your user area on the cluster 2 ensure that there is suitable dump directory into which log files can be written 3 locate the main program that you want to use 4 ensure that the main program writes to log file in the dump directory 5 go to the mod subdirectory 6 from the mod subdirectory use the compilation statement in the headers of the main program in which you are interested these have optional optimisation 7 execute the compiled program bear in mind that the software is designed to run on datasets in the formats that i use so you will need to have access to those files on the beowulf cluster for this software to be useful on the beowulf cluster the reason that the compilation statements in the headers are designed to be executed from the mod subdirectory is that most main programs use large number of modules designed to be used with variety of programs the compilation statements are lot shorter when executed from the mod subdirectory that is the only reason