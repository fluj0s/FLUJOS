lexra inc confidentiallexra6stageproductsusersguide february12002 revision50 thisdocumentisproprietaryandconfidentialtolexrainc copyright 1998199920002002lexrainc lexrainc 2universitypark51sawyerroad walthamma02154 tel7818995799 fax7818995769lexra 6stage products users guide revision 50 ii lexra incconfidentiallexra inc confidential iiilx4x80 userguide revision 50 table of contents lexradevelopment environment1 11 overview 1 12 rtl design database overview 3 13 requirements for the rtl design database 3 14 installing the rtldesigndatabase 4 15 configuringforperl 6 16 running lconfig 6 17 installing the lsdk 7 18 running rundvt forthe firsttime 8 19 understandingthe rtldesign databasefileorganization10 110 customerconfigurations 11 using lconfig 13 21 overview 13 22 when to execute lconfig 14 23 running lconfig 14 24 lconfig forms 15 25 formssupplied by lexra 17 26 files producedby lconfig 17 261 lxr_symbolsvh 18 262 chipsram_type_data_type_depthxwidthv 19 263 regressioninpfiles 19 264 synsyntrolmakefile 20 27 diagnosticmessages 20 271 notice messages 20 272 warning messages 22 273 errormessages 23 274 abortmessages 24 275 internalmessages 25 rtl organization27 31 building blocks 27 32 using the lx0lx0clx1lx2 design hierarchies 28 321 moduledefinitions 29lx4x80 userguide revision 50 iv lexra incconfidentiallocal memory31 41 memory architecture and configurability 32 411 available options 32 412 imem and dmemcontrollers 35 413 configuring thememoryarchitecture 36 42 memory requirements 37 421 ramfunction38 422 ramtiming3 8 423 criticalpathsinvolving rams 40 43 using lexras genericram models 40 44 usinglibrary vendorsram models 41 45 direct memory access to internal rams 43 451 usingrequestgrant 43 452 usingdualported memories 44 46 invalidatingacache 44 461 invalidatinga cache completely 44 462 invalidatinga cache linewith an aliased approach 45 463 invalidatinga cache linebyuncached reference 45 464 invalidatinga cache by using dma 45 465 invalidatinga cache using multiportmemories 46 466 conclusion 46 47 icache locking 47 48 rammanufacturingorbisttesting 47 49 lx4280memory specifics 47 410 lx5280memory specifics 48 411 lx8000memory specifics 48 usingthe lbc interface49 51 configuringthelbcwith lconfig 49 511 configuring synchronousasynchronous interface 49 512 configuring cache policies 50 513 configuring read and write buffersizes 51 52 lbusdevicedesign rules 52 521 lbus arbiters5 2 53 deviceinterconnections 53 531 connectingthe protocolsignalsusingorgates 54 532 connectingthe addressdataand command busses 55 54 usingcbus 56lexra inc confidential vlx4x80 userguide revision 50 adding instructionsusing the custom engine interface cei 57 61 introduction 5 7 62 operation 57 621 instancing custom engines 58 622 interface signals 59 623 available opcodes 60 63 implementationdetails 62 631 pipeline issuesand stalls 62 632 exceptions and invalidation 63 633 dualissue considerations 65 634 temporaryregisters and mips1 hilo 65 635 timing considerations 66 64 waveforms 67 usingthe coprocessor interfaceci 87 71 coprocessor overview 87 72 coprocessor design considerations 88 73 coprocessor waveforms 90 ejtag105 81 architectural overview how it works 106 811 hierarchyand blockdiagram 106 812 pinoutrequirements 107 813 lexra jtag tap controller1 08 814 cop0supportdebug exception instructions registers 108 815 hardwarebreakpoints 110 816 singlestep mode 110 817 dma capability 110 818 pc trace 110 82 designing with ejtag 113 821 single processor debugging 113 822 multiprocessordebugging 114 823 clocking 116 824 usingthe lexraejtag tapcontroller 117 825 reset issues 118 8251 cold reset119 8252 warmreset119 8253 software reset11 9lx4x80 userguide revision 50 vi lexra incconfidential826 gate countper breakpoint 120 827 memoryaddressing 120 828 ejtag customerprobe model 121 83 implementation issues 121 831 specialrequirements 121 832 unimplementedfeaturesfrom ejtag specification 121 833 implemented optional featuresfrom ejtag specification122 testability123 91 internal scan 124 911 scan methodology overview 124 912 internalscan options 125 913 lconfig options 126 914 internalscan interface1 27 915 scan enable distribution 129 92 memory scan collar 130 921 scan collaroverview 130 922 lconfig option 130 923 scan collarinterface 131 93 ram testing 131 931 ramtest131 932 lconfig option 132 933 ramtestinterface132 94 atpgvectors 133 941 atpg overview1 33 942 atpg generation process 135 95 testability statistics 138 951 overview 138 952 example 138 953 interpretingatpg results 140 96 tapcontroller 141 97 additional considerations forresetand clock distribution142 971 clockdistribution 142 972 sleepand clock distribution 145 973 reset distribution 145 usingthe rundvt regression environment151 101 rundvtsimulators 152 102 setup 152 103 usingthecommandlineoptions 152lexra inc confidential viilx4x80 userguide revision 50 1031 standard commandline options 153 1032 advanced options 155 1033 passing teststo rundvtthrough thecommand line 165 104 workingwith testlists 167 1041 testlistfile format 168 1042 running testsat the rundvt commandline 169 105 simulationflow 170 106 generating ascii tracesin thesimulation output 170 1061 tracing throughhierarchicalreferences 177 1062 sparse memory tracing 178 synthesizing the lexra cpu181 111 overview 181 112 settingup thesynthesis environment 181 1121 synopsys_dcsetup 182 1122 dont_usescr 183 1123 techvarsscr1 84 1124 usingpredefined technologies 188 1125 synthesiswire load models 188 113 running synthesis 189 114 synthesis output files 189 115 considerations 190 1151 synthesizing clock trees 190 1152 backend and ipo considerations 190 1153 reordering scanchains 191 1154 libraryrecommendations 191 116 structure of the synthesis environment 192 simulation guidelines195 121 verilog 195 1211 verilogmacro definition on simulatorcommand line 195 1212 verilogsystemfunction testplusargs 196 1213 verilogsimulator specificoptions 196 122 rammodels 196 123 reset 197 124 testbedmodels 197 125 libraries 198 126 gate level simulation 198 1261 backannotation1 99lx4x80 userguide revision 50 viii lexra incconfidential127 asynchronousmode lbc 201 128 runtime limitations 201lexra inc confidential 1lexra 6stage products users guide revision 50 chapter1 lexradevelopmentenvironment 11 overview to assist in the development of hardware and software using lexra processors thefollowingtoolsareavailablewithinthertlregistertransferlangu agedesign databaseincluding databaseconfigurationtool verilogrtl verificationenvironment synthesisscripts lexrasoftwaredevelopmentkit lexrabustransactionmodels instructionset simulator hwswdevelopmentboardalterafpgabased the rtl design database contains all the files you need to configure simul ate synthesizeandtestyourlexraprocessorstartingwithatextbasedc onfiguration form known as the lconfig form users are able to easily configure and adapt the rtl database to accommodate their asic methodology as well as their system design requirements from reset and clock methodology to memorychapter 1lexra 6stage products users guide revision 50 2 lexra incconfidentialfootprint and system bus interface the lconfig tool reads the lconfig form andproperlyadjuststhertldatabasetoconformtothesystemrequiremen tsin doing this an rtl database is created that reflects your customized processo r hand modifications need to be made other than the editing of the lconfig form the lconfig tool verifies the validity of your selections creates customized regression suite and generates synthesis scripts specific to your methodologyandprocessorconfigurationoptions to assist in the validation of your customized configuration lexra supplies verificationenvironmentcalled rundvtsupportingindustrystandardsimulators rundvtacts as an easy to use command line interface allowing you to run your own customized software tests or the lexra supplied regression suite on our configuredprocessorverilogrtlorgatelevelnetlist needed for the running of verification tests lexra ships with their database gnu based software developers kit called the lsdk this collection of files compilesassembles and links the c and assemblyfiles thatmake up parto fthe testbed environment from boot vectors exception routines targeted c and assembly tests to customer written software routines the lsdk is used in conjunction with rundvtto process high level code so that it can be run on the verilogrtlorgatelevelnetlist lexra provides bus transaction models that support their pcilike system bus called lbus the models can be used to help users understand the system b us topography and to act as task driven replacement for the entire verilog processorinthecustomersownsimulationenvironment the instruction set simulator comes in both instruction accurate and cycl accurate version this cmodel of the processor is intended to enable software development prior to first silicon the issaccurately models the pipeline and memorysubsystemoftheprocessorwhichcanbeinterfacedwithaneasytouse command line interface clue or with the green hills multiintegrated developmentenvironmentfinetuningcriticalcodeloopsandoptimizingsof tware performance can efficiently be done utilizing this type of tool the issalso supports coverificationcosimulation environment to allow asic desig n and software teams to work together in the validation of system requirement s and functionality prior to tapeout the isshas additional support for the creation of custominstructionsandthe useofcoprocessors the altera fpga based development board is usable by both the hardware and software teams to get head start in the development of their system on chiplexra inc confidential 3lexra 6stage products users guide revision 50 socabletobootthirdpartyrtoslikevxworksthreadxnucleusandlinux the development board gives software teams hardware to work with prior to tapeout improving their efficiency in creating application code as hardw are development platform the development board supports dedicated fpga for the sole purpose of hardware integration this fpga is able to communicate to the lexra processor held in an additional fpga on the board this functionality allows hardware engineers the ability to prototype system peripherals custom instructions and even coprocessors software debug on the development board canbeachievedthroughtheuseofanejtagprobe 12 rtldesigndatabaseoverview the lexra processor is packaged in standalone development directory do not integrate this directory directly into your design environment instead u it to configure and simulate the lexra processor as well as to generate the desig n objectsyouwillneedinyourdesignenvironmentspecifically simulationrtl synthesizedgatelevelnetlists 13 requirementsforthertldesigndatabase the rtl design databaseruns on sun solaris platform version 26 and higheri t workswiththefollowingdesigntools synopsys vcs or cadence verilogxl ncverilog for verilog simulation synopsysdesigncompilerforlogicsynthesisandoptimization synopsystetramaxatpgfortestvectorgeneration thedesignenvironmentalsorequiresthefollowingunix environment cshellbincsh usrccslibcppsolariscpreprocessorforvppscript thelsdktools specifically lxgcc forcompiling new tests perl50xxlexra 6stage products users guide revision 50 4 lexra incconfidentialcheck the readme file referred to in section14 installing the rtl design database to see the version numbers of the tools used in testing the curren t versionofthelexraprocessorifyouareusingatoolwithaversiondifferentt hen theonelistedinthereadme file pleasecontactalexraapplication engineerto checkforcompatibility 14 installingthertldesigndatabase the rtl database distribution contains multiple compressed tar files thatcan be found on the lexra ftp site at ftplexracom see your local lexra applicationengineerforyourloginaccountinformation once logged into the ftp server proceed to the releasesrtl rtl_version directory to find the files associated with the release to be installed below are examples of what you might find in the rtl_version directory before downloading the compressed tar files download open and read boththereadmeandtheerratafile the readme file containsthemost up todateinformationregardingthereleaseforexample lsdk versionrequirements verilogsimulatorversionnumbersused inreleasetesting designcompilerversion numbersusedinreleasetesting unixdecryptioninstructions descriptionofdatabaseand rtlchangesfrom previousreleasereadme releasenotes doc documentationdirectoryerratadatasheet lx4189rtl110tarzcrypt rtlsourcefilesincludes lconfigrundvt synthesisscripts lx4189ejtag110tarzcrypt ejtagsourcefileslicenseoption lx4189mac110tarzcrypt macsourcefileslicenseoption lx4189devboard110tarzcrypt developmentboardsourcefileslexra inc confidential 5lexra 6stage products users guide revision 50 the errata file is used to track issues regarding the various releases of the processordesignthismightinclude documentationdiscrepancies synthesisissues incompatibilities configurationdependentissuespossibleworkarounds make sure that you understand the contents of the errata this one document can save you valuable time in debugging issues that may already be known also feel free to ask you lexra application engineer for an uptodate rrata showingallofthecurrentlyknownissueseffectingthisversionofthertl after reading both the readme and errata file continue the download process download only the files pertaining to your license agreement since some files may be quite large and time consuming to download only those who has purchased the lexra development board and plan to perform hardware prototypingwiththe boardneedtodownloadthedevboardcompressedtarfile oncethedownloadprocedure isdonedecryptthetarfilesasfollows crypt tarfiletarzcrypt tarfiletarz when prompted enter the crypt key the crypt key can be obtained from your lexraapplicationengineer determinethelocationtoinstallthertldesigndatabase mydir cdmydir you must have read and write permissions to properly configure the database in this directory when you untar the database top level directory will be cre ated with the product name of the processor ie mydirlx4189 for the rest of thisdocumentwewillrefertothisdirectoryas lx_home zcatarchivepathtarfiletarztarxvf start with the compressed rtl file and follow with subsequent files ie ejtag macafteruntarringallofthefiles lconfig mustberunwith eitheroneofthelexra 6stage products users guide revision 50 6 lexra incconfidentialdefaultlconfig forms or your own lconfig form to properly setup the database however before running lconfig make sure that perl is installed properlyseechapter2usinglconfigandsection15configuringforperl 15 configuringforperl duetoitsscriptingabilitymanyofthelexrasuppliedtoolsrequireth einstallation of perl to check if you have perl installed enter the following at the unix command prompt whichperl if perl is not found ask your system administrator whether or not it is insta lled and make the changes so that it can be found in your path perl can be downloadedfromtheinternetat wwwperlcom many of the lexra provided scripts hardcode the location of perl to usr localbinperl if your perl location is different please run the following utilitytomodifythehardcodedlocation cdlx_home binsetup_scripts specify the installation path you want to use this will traverse the rt l design database and change the hardcoded paths for perl to point to the path you have specified once perl is successfully installed run lconfig to verify the setupseesection16runninglconfig 16 running lconfig lconfig is the configuration utility that is used to properly configure the rt l design database for given processor configuration if this is the firsttime to run lconfig for new installation it is good measure to use one of the lconfig formsprovided with the release toconfigure and testthe designdatabase fort he first time the provided lconfig forms can be found at lx_homeuser t runlconfig performthe followingstepslexra inc confidential 7lexra 6stage products users guide revision 50 cdlx_homeregression binlconfighelp this will show the available lconfig commands more on this will discussed in chapter2usinglconfig to runlconfig with customerspecific form orwithone ofthe provided forms runthefollowing binlconfigusermyformform aslconfig processes the lconfig form and configures the database it will print various messages on the screen as long as error messages occurred the lconfig process was success after configuring the design database use rundvtto run one of the provided tests to verify database integritysee chapter10usingtherundvtregression environment 17 installingthelsdk inordertorunsimulationsonthertldesigndatabaseusing rundvtthe lexra software developers kit lsdk must be installed this software kit provides the necessary tools to compile assemble and link software tests for runn ing on the verilog rtl to check what lsdk version is required for the given version of th rtl design database see the readme file described in section14 insta lling thertldesigndatabase togetthelsdkcompressedtarfilelogontothelexraftpserverandpro ceed to the directory releaseslsdklsdk_version below are examples of what youmightfindinthe lsdk_version directory readmetxt releasenotes lsdki586linux233tarbz2 linuxversionof lsdk bzipformat lsdki586linux233tarz linuxversionoflsdk lsdksparcsolaris2233tarbz2 solarisversionof lsdkbzipformat lsdksparcsolaris2233tarz solarisversionoflsdklexra 6stage products users guide revision 50 8 lexra incconfidentialread the contents of the readme file to find out any special requirements f or this version of the lsdk then download the appropriate file decide where you want thelsdkinstalled mydirandrunthefollowingcommand zcatarchivelsdkplatformxxxtarz tarxvf substitute the operating system that you are using with platform and change xxx to reflect the real version number ie sparcsolaris2 this will c reate directory called lsdkplatformxxx after untarring the compressed file dd the following toyourcshell cshrcfile setenvlsdkdirmydirlsdkplatformxxx setenvlsdkhostsparcsolaris2 setenvmanpathlsdkdirmanmanpath setpath lsdkdirlsdkhostbin path afteraddingtheabovetoyour cshrcfilesourceitandverifythatthesetupwas correctbyrunningthefollowingcommands whichmake you should see that the make utility found is the one in the lsdk release lsdkdirlsdkhostbin if themakefound in your path is not the one in the lsdk installation directory rundvtwill fail when it tries to compile code correct the path so that everything looks good then go to the section101 rundvtsimulatorstocheckthatalltoolsareabletoworkwitheachother 18 running rundvtforthefirsttime for final verification that the database is correctly installed run the pro gram helloc ontheverilogrtloftheprocessorasanote helloc isoneofthec teststhatcanbefoundinthe lx_hometests directory cdlx_homeregression rundvthelplexra inc confidential 9lexra 6stage products users guide revision 50 this will show you all of the rundvtoptions available to you see section103 using the commandline options for more information on the use of these options continuebyrunningoneofthefollowingcommands rundvthello ifvcsisthedefaultsimulator rundvtsimncvhello ifncverilogisthedefaultsimulator rundvtsimvxl hello ifverilogxlisthedefaultsimulator if the simulation runs successfully you will see output similar to th following whenthesimulationfinishes info rundvt simv l vrunlog notice timing checks disabled with notimingcheck at compiletime chronologic vcs simulator copyright 19912000 contains synopsys proprietary information compiler version vcsi 52r9 runtime version vcsi 52r9 jun 6 1830 2001 starting to read tests hello lexra 49277500 m000 testsobjhello00400000bin 0 nops passes finish at simulation time 49277600 vcs simulation report time 492776000 ps cpu time 21210 seconds data structure size 286mb wed jun 6 183122 2001 info rundvt results of simulation info rundvt pass 1 fail 0 info rundvt execution complete info rundvt total pass 1 info rundvt total fail 0 ifthesimulationstopsbeforethetesthascompletedorthetestrunsbutf ailslook at the following files found in the regression directory for help in debugging the problem withtheinstallation rundvtlog vcompileloglexra 6stage products users guide revision 50 10 lexra incconfidential19 understandingthertldesigndatabasefileorganization thetopleveldirectory lx_home inthedistributioncontainsthefollowingfiles andthefollowingdirectories each verilog rtl file includes only one module the filename for module module_name ismodule_namev tag lexrainternaldatabaseversionnumber release_summary_xxx_xx alistofeachfileandversionintherelease atpg scriptsandtemplatesforatpg bin scriptsusedtobuildmakefilesandsymboliclinksverilog preprocessorandrtlconfigurationtool chip verilogrtlcodeforchiplevelmodulesforexample lx_base usedinregressiontests behavioralrammodels cpu verilogrtlcodeforprocessor moduleandsubmodules ejtag verilogrtlcodeforejtagmodulesandsubmodulesoptionally licensed include verilogincludefiles lbc verilogrtlcodeforlbcmoduleandsubmodules lmi verilogrtlcodeforlmimodulesandsubmodules lx verilogrtlcodeforthelx0 lx1 andlx2processorlayers macs verilogrtlcodeformacmodulesandsubmodulesoptionally licensed requiredforriscdsp regression rundvtscriptandassociatedfiles syn individualsubdirectoriesforsynthesizedblockswithlinkstosource codegenericsynthesisscriptssynopsyssynthesis constraints andmakefileforeachblock system verilogrtlcodeforlxmodulesincludesbehavioralmodelsfor ramclkresetbuffers testbed verilogrtlcodeforassociatedtest benchcode tests teststoberunonthelexraprocessorverilogmodel tlb verilogrtlcodefortlbmmuoptionallylicensed tm_lbus verilogrtlcodeforlbcbusfunctionalmodels user filesthatneedtobemodifiedbytheusertodescribethelocaltool andlibraryenvironmentandlocationsincludes lconfig formlexra inc confidential 11lexra 6stage products users guide revision 50 110 customerconfigurations once you have verified proper installation the environment is ready to generat design objects for the configuration and technology you have specified subsequentchaptersdescribeeachstepbelowinmoredetail generateaconfigurationusing lconfig chapter2 usethelx012designhierarchies chapter3 interfacetherams chapter4 useabuscontroller chapter5 addacustomengineinterface chapter6 addacoprocessor chapter7 usetheejtag option chapter8 addtestability chapter9 runregressionsrtlgates chapter10 synthesize chapter11 simulate chapter12lexra 6stage products users guide revision 50 12 lexra incconfidentiallexra inc confidential 13lexra 6stage products users guide revision 50 chapter2 usinglconfig 21 overview thelconfig utility suppliedbylexraconfiguresthe rtl design databasethis includes rtlcodesimulationenvironment andsynthesisscripts this chapter describes how to use lconfig it does not describe specific processor configuration options lconfig generates blank forms which documenttheseoptions lconfig is perl 5 script providing an easy to use form based method for configuring the rtl design database you fill out form and process it with lconfig toaccomplishthetaskslistedbelowformsincludedocumentationthat describesall availableoptionstheoptiondefaultsmaymeet yourneeds lconfig let syoudothef ollowing configure features such as cache sizes optional coprocessor interfacescustomenginesandsystembusattributes generate an include file that tailors the rtl code and top level integration lexras rtl code which uses the symbol definitions to manage its configurationdependent features includes this file lexrasrundvtscript also examines this file to determine what simulationtestsmustbeexecutedtoverifytheconfiguration createverilogmodule listsfor rtlsimulation generatemakefilestocontrolsynthesischapter 2lexra 6stage products users guide revision 50 14 lexra incconfidentialthelconfig perl script is located in the lx_homebin directory to use it you must have perl installed on your system see section15 configuring for perl 22 whentoexecute lconfig lconfig creates files that tailor the simulation and synthesis environments to your configuration you must run lconfig at least once before performing simulation and synthesis tasks because it creates files that are directly us ed for these tasks do not execute lconfig when simulation or synthesis is in progress after you have settled upon configuration and started synthesis do not run lconfig tochangetheconfigurationunlessyouare willing to resynthesizethe makefilesgeneratedby lconfig includedependenciesthatrebuildthe required modulesthenext timeyousynthesize 23 running lconfig the execution of lconfig should be done from the lx_homeregression directory you will find preconfigured lconfig forms supplied by lexra in the lx_homeuserdirectorytheuserdirectoryisagoodplacetokeepapplicat ion specific forms lconfig has many command line options for example generating blank form copyingan oldform toanew oneandbuilding cleanrtlfiles blank form is the starting point for your custom configuration of the lexr processor it includes detailed documentation of all configurable features wi th workingdefaultvaluesassignedtoeachfeature togeta blankconfigurationformtype cdlx_homeregression binlconfigblank_formusermyform wheremyform isthenameof theoutputfileyouwish lconfig toproducelexra inc confidential 15lexra 6stage products users guide revision 50 lconfig does not overwrite an existing file when it creates blankforms instead itreportsanerror aftercreatingablankformreviewitandmakechangesfromthedefaultvalues to satisfyyourparticularneeds nextprocesstheconfigurationform withthe command binlconfigusermyform wheremyformisthenameofyourform when creating forms lconfig always writes the output form in the current working directory unless given path to another subdirectory when processing formslconfig writes the required output files into the appropriate project subdirectoriesseesection16runninglconfig new releases of the rtl design database can include configuration options not available in prior releases when new options are added lconfig assigns an appropriate default this allows new releases of the rtl design database to processolduserforms lconfig always issues warning when assigning default value to avoid thesewarningsaddthedefaultassignmentorsomeotherassignmenttothei nput formlconfig facilitatesthisbyincludinga command thatcopiesan old form to new form copy_form preserving assigned values in the original form and assigning defaultvaluestounspecified optionsby doing thisyou will be ableto viewthedocumentationthatcomeswiththenewconfigurationoption binlconfigcopy_formuserinput_form_nameuseroutput_form_name alwayscomparetheinputformandoutputformtoensurethat lconfig haskept oldvaluesandthattheassignmentsfornewoptionsareacceptable 24lconfig forms the blank forms produced by lconfig are not actually blank they are just default starting point for system configuration lconfig specifies each configurablefeatureinitsownsectionhereisasamplesectionlexra 6stage products users guide revision 50 16 lexra incconfidential dcache data cache size configuration choices none 64k_1 32k_1 16k_1 8k_1 4k_1 2k_1 1k_1 none data cache 64k_1 64k byte direct mapped data cache 32k_1 32k byte direct mapped data cache 16k_1 16k byte direct mapped data cache 8k_1 8k byte direct mapped data cache 4k_1 4k byte direct mapped data cache 2k_1 2k byte direct mapped data cache 1k_1 1k byte direct mapped data cache the following settings are required when dcache none mem_granularity byte default dcache 2k_1 dcache 2k_1 comment lines begin with characters blank form includes comments describing at minimum the legal settings for an option and the default value for more complex options lconfig supplies additional documentation when lconfig processes form it does not interpret the comments default assignmentfollowsthecommentblockfor given settingyou may edit the form tochangethesevalues carefully review all of the documentation provided in blank form to determ ine theconfigurationsettingsyourapplicationrequires throughoutthedocumentation supplied by lconfigthe wordmodule means configurable feature this is more general than the verilog module keyword for lconfig module is any configurable feature that is conveniently named and given listofpossible choices more than one processorverilog module m ay be affectedbythechoiceforasingle lconfig settinglexra inc confidential 17lexra 6stage products users guide revision 50 25 formssuppliedbylexra lexra supplies several preconfigured forms in the rtl design database these are in the lx_homeuser directory do not use them as starting point for configuringyourversionoftheprocessorgenerateablankformforthatpurpose ratherconsultthese filesfor usefulregression testconfigurationsan d examples of how to configure the lexra processor in full system environment also u these files to verify that the initial installation of the rtl design datab ase was successfulhereisalistofformsyoumightfindinthisdirectory the reference configurations above highlight the minimal standalone chip level simulation testbed provided with the lexra processor which employs stand alone chip and minimal memory system model take the time to look thro ugh blanklconfig form so that you get chance to read the documentation that explainseachavailableprocessoroption in any of the reference configurations above you can fully synthesize all the design modules at or below the level of the lx1 module supplied by lexra see chapter11synthesizingthe lexra cpulexra suppliesmodulesoutside ofthis hierarchyforsimulationpurposesonly 26 filesproducedby lconfig when processing form lconfig creates the following files in the rtl design database seemoredetaileddescriptionsofthesefilesin thesectionsbelowlx4x80form abasiclx4x80configuration w nomacnoejtaginan environmentwithmemorymodelstotestit lx4x80_macform abasiclx4x80configurationmacsupportnoejtaginan environmentwithmemorymodelstotestit lx4x80_ejform abasiclx4x80configurationwithnomacejtagsupportinan environmentwithmemorymodelstotestit includelxr_symbolsvh includefilewithdefinesymbols chipsram_type_datatype_depthxwidthv behavioralrammodels regressioninpfiles listofrtltestbedsourcefilestoincludein simulation synsyntrolmakefile synthesismakefilelexra 6stage products users guide revision 50 18 lexra incconfidentialnever directly modify the contents of any these files to ensure cons istent simulationandsynthesiswiththertlcode lconfig mustproducethesefiles 261 lxr_symbolsvh thisfilecontainsmanydefinestheycontrolaspectsofthelexraprocessorrt l configurationandsimulationtestbedsetupthefile hasthefollowingsect ions summaryoftheconfigurationchoices summaryofram requirements configurationindependentsymbols configurationdependentsymbols hereisanexampleram summaryprovidedby lconfig ram requirement summary module config depth width ports ram qty used for icache 1k_2 128 x 32 1 sram_ic_data0_128x32 1 data store set 0 icache 1k_2 128 x 32 1 sran_uc_data1_128x32 1 data store set 1 icache 1k_2 32 x 24 1 sram_ic_tag0_32x24 1 tag store set 0 icache 1k_2 32 x 26 1 sram_ic_tag0_32x26 1 tag store set 1 and locklru flags dcache 2k_1 512 x 32 1 sram_dc_data_512x32 1 data store dcache 2k_1 128 x 22 1 sram_dc_tag_128x22 1 tag store following the documentation section in the lxr_symbolsvh file there are some symbol definitionsthatare independent ofthe configurationthese are the same forevery lconfig execution following these are set of sections one for each configurable item in the processedformthesecanbeverysimpleasinthisexample sen_buffers none do not buffer scan enable define vpp_pop_no_senbufs other items result in several to many symbol definitions for tailoring the rtl codelexra inc confidential 19lexra 6stage products users guide revision 50 after all of the sections for the configurable features there are some more pre determined definitions some of these may rely on configuration dependent definitionsinthemiddlesectionofthe lxr_symbolsvh file 262 chipsram_type_data_type_depthxwidthv lconfig automatically generates behavioral ram files they are listed in the lxr_symbolsvh file with the specific sizes required for the chosen configuration rundvtuses them for rtl simulation lconfig puts the models in the chip project subdirectory the rundvtscript uses them when it starts the rtlsimulationviathefile regressionlx2inpfiles for synthesis you must supply verilog wrappers with the names of the modul generated by lconfig and put them in the chiptechnology directory you specify technology through the lconfig technology variable you must supply the wrappers with the same port list as the behavioral models generated by lconfig but internally the wrappers instance an application specificramtohelpyouwrite wrappersweprovideanexamplewrapperinthe chipcustomtsyncram_example file 263 regressioninpfiles the inpfiles lconfig produces contain lists of verilog files needed for simulation with the rundvtscript the rundvtscript which is also in the regression directory passes these lists to verilog the different inpfiles separate the source filesintogroups according to basiccode category lconfig lists only the files required for the specific configuration below is list of some of the inpfilescreatedby lconfig youcanspecifyadditionalapplicationspecificfileson the rundvtcommand line tomakethemavailabletothesimulationlx0inpfiles filesthatmakeuptheprocessorlocalbusmemorycontrollers coprocessorinterfaceandcustomengineinterface allofthe modulesinthislistareultimatelyinstancedassubmodulesina modulenamedlx0 1x1inpfiles systembusinterfacemacejtagtheintegrationlayer connectingthesemodulestothelx0module lx2inpfiles rammodels theintegrationlayerconnectingramstothelx1 module testbedinpfiles simulationtestbedsupportsystemmemorytransactorsandbus monitorsfor examplelexra 6stage products users guide revision 50 20 lexra incconfidential264 synsyntrolmakefile this is the main makefile that controls the synthesis process for every synthesized block in the rtl design database there is subdirectory in t he syn directoryused for synthesis lconfig writes amakefile in each subdirectory tailored asneeded to supportthespecificconfigurationthis makefile willwork with thesynsyntrolmakefile to perform the bottomup synthesis of the lexraprocessor the synsyntrolmakefile contains commands to synthesize the various blocks in the processor it also contains hierarchical makecommands to build subblocks you can synthesize the entire design by executing makefrom within the syn lx2directory 27 diagnosticmessages beforeprocessingyourrequest lconfig validatesit scommandlinetoensureit is properly formed it also crosschecks information supplied in your in put form with its internal database and performs purely internal consistency checks as it runs thissection contains complete listing ofthe diagnostic messages d isplayed by lconfig 271 noticemessages thesearemessagescontainingusefulinformation reading form_name specifiesthefilebeingread by lconfig writingdirfilename specifies thefilebeingwrittenby lconfig generatingbehavioralrammodeldirmodel_filename lconfig has created behavioral ram model based on configuration requirementslexra inc confidential 21lexra 6stage products users guide revision 50 generatingfile creatingfilesusedbylexrasoftwaretools thecvtlconf utility is used to parse the lconfigform to generate the asym_config file used by the asym version of the instruction set simulator iss if not using the asym iss ignore the warning that the cvtlconf utilitycannot befound thebincommon_symbols script is used to generate common symbol files used by lexras simulation testbed perl scripts and regression tests th is ensures that all configuration dependencies needed for the regression suite are consistentlyrepresentedintheincludefilesusedbytheseprograms makingtechnologylinklink creating needed links for proper database setup for example when vendor specific ram model is placed into the chiptechnology directoryalink will becreatedtothe synlx2 directory usingtechnologyspecificfiledirtechnologyfilenameforsynthesis lconfig has selected technology specific file for synthesis in place of the normal rtl behavioral file lconfig searches the directory dir technology to find replacements for behavioral verilog models found in the dirdirectory preparingatpgrelatedfiles lconfig modifies filesrelated to atpg for thespecificprocessor configuration as specifiedby the lconfig form preparingsynthesisdirmakefile callingmaketogeneratesymbolreferencefilesindir buildingperblockincludefilesindir lconfig generates makefiles symbol reference files and include files to be usedinthesynthesisprocess lconfigfinished lconfig hascompletedconfigurationofthertldesigndatabaselexra 6stage products users guide revision 50 22 lexra incconfidential272 warningmessages these messages indicate problems you may need to correct lconfig still producesusefuloutputfileshowever noconfigurationvalueformodule usingdefaultconfig the input form did not specify required configuration lconfig will use the defaultvalue defaultvalueswereusedforlistoptions lconfig usedone ormoredefaultvalues ce0config0andce1config1supportedforrtltestingonly lexra does not support the chosen ce0ce1 configuration for synthesis we allowtheconfigurationbecause itisusefulforrtltesting ce0noneandce1exportrequireshilotobeimplementedince1 nomoduleisdeclaredforceport0andamoduleyouhavesuppliedisdeclared for ce port 1 therefore you must design your ce module to respond to the mfhi mflo mthi and mtlo instructions see section621 instancing customengines ce0config0andce1exportrequireshilotonotbeimplementedince1 lexra module responding to the mfhi mflo mthi and mtlo instructions is declaredforceport0andamoduleyouhavesuppliedisdeclaredforceport1 therefore you must design your ce module not to respond to the mfhi mflo mthiandmtloinstructionsseesection 621instancingcustomengin when lbc_sync_mode is synchronous lbc_rbuf need not be greater than 2 the combination of lbc_sync_mode set to synchronous and lbc_rbuf set greater than 2 results in rarely used read buffer entries wasting chipareasetlbc_rbufto2forthiscase lbc_rbufissettomorethantwicethelinesizeandthuswill wastearealexra inc confidential 23lexra 6stage products users guide revision 50 setting lbc_rbuf to more than twice line_size results in unused read buffe r entrieswastingchipareadecrease thereadbuffersizetosave area ram_model requires technology specific wrapper dirtechnology ram_modelforsynthesis technology specific ram wrapper of the specified width and depth is required forsynthesisbutwasnotfoundintheexpectedlocation dirfilename requires technology specific version dirtechnology filenameforsynthesis technology specific file is required for synthesis but was not found in the expected location see the rtl code in dirfilename for the required modulefunctionmodulefunctionsareusuallysimpleonegatefunctionst hatyou mustchoose manuallytoensure properimplementationthe missingfilesdo n ot prevent rtl only simulation as the rtl code always provides generic functionalequivalentinthe dirfilename file missingtechnologyspecificfileswillcausesynthesisproblems previouserrormessagesidentified oneormorerequiredtechnologyspecificfiles as missing absence of these files will result in synthesis errors the rtl simulation is still valid however because rundvtuses generic rtl versions of therequiredtechnologyspecificfilesforrtlsimulation 273 errormessages thesemessagesindicateproblemsthatyouneedtocorrectbefore lconfig can produceuseful outputfiles moduleisnotaconfigurablefeature an unknown configurable feature appears on the left side of in the form checkthefeature name configisnotavalidconfigurationoptionformodule an unknown value appears on the right side of in the form check the list of legalvaluesinthe formlexra 6stage products users guide revision 50 24 lexra incconfidentialmorethanoneconfigurationoptionspecifiedformodule configurable feature appears on the left side of more than one in the form deletethe unnecessaryfeaturename module1config1requiresmodule2config2 the configuration value you chose for module1 requires specific value for the configuration of module2 but the form specifies some other value select thevalue specifiedfor config2 configislessthanallowedminimumminformodule configisgreaterthanallowedmaximum maxformodule numericalconfigurationvalueisoutsidetheallowedrange base90mustbezerobasevalue top30 must be 1111 topvalue base3116 and top3116 must have same value basevalue1 topvalue2 base154 must be less than or equal to top154 basevalue1 topvalue2 the address range specification for imem irom or dmem does not conform to configurationrulesintheformreviewtherulesandcorrecttherange rangeformodule1overlapswithrangeformodule2 the address ranges for local rams imem irom dmem overlap in the form correcttherangessotheydontoverlap requiredrtlsourcefilefilenamedoesnotexist lexra supplied source file required by the configuration is missing this coul d indicateimproperinstallationoraccidental filedeletion 274 abortmessages lconfig isunabletoexecutetherequestedcommand filenamerequiredforblankformoutputlexra inc confidential 25lexra 6stage products users guide revision 50 theblank_form commandline option does not specify an output file name specify anappropriateoutput file invalidoptionoption thecommandlinehasanunknownoption toomanyarguments thecommandlinehasextraneousarguments outputfileformnamealreadyexists theblank_form command line option specifies an output filename already in use inputfileformnamedoesnotexist theinputform specifiedonthecommandlinedoesnotexist cannotfindincludeandregressiondirectories lconfig ran from an improper location always run lconfig from the regression directory argumentsrequired lconfig ran withoutarguments inputfilenamerequiredforsourceform outputfilenamerequiredfordestinationform thecopy_form option lacks the proper command line arguments the syntax is lconfigcopy_forminput_form_nameoutput_form_name 275 internalmessages iflconfig halts with an internal error message it has detected an internal inconsistency lexra tests lconfig with randomly generated input forms to ensure that you do not encounter these messages if you do see such messagepleasecontactyourlocal lexraapplication engineerlexra 6stage products users guide revision 50 26 lexra incconfidentiallexra inc confidential 27lexra 6stage products users guide revision 50 chapter3 rtlorganization 31 buildingblocks thelexraprocessorincludestheprocessorcoreaswellasanumberofinterfac modules connect your surrounding logic to the processor through these interfaceblockstoarchitectyoursystem the block diagram below shows an example of the processor complex the majorfunctional blocksinclude processorcore localmemoryinterfaceslmis coprocessorinterface scis customengineinterfacecei lexrabuscontroller lbc in addition you can specify and configure optional product dependent modules t h ta r ep l c di nt h lx1level of the processor hierarchy ie ejtag mac tlb lbc connect the processor complex to the rest of your design through ports associated with the various interface blocks in the rtl successive chaptersofthisguide explainhowtousetheseinterfacemoduleschapter 3lexra 6stage products users guide revision 50 28 lexra incconfidentialfigure31 processorblockdiagram 32 usingthelx0lx0clx1lx2designhierarchies to help you integrate lexra processors into yourdesign we have organiz ed the hierarchy into set of module layers the organization provides an effic ient meanstoincorporate theprocessorintoanapplicationspecificdesign the block diagram above highlights the four module layers in the processor hierarchy the innermost layer lx0 contains the core processor complex youicache imem scancollar rambistmuxejtag core ci13 coprocessor13dcache dmemscan collarram bist muxmac custom engineceilx2 lx1 lx0c lx0 lmi lmilmi lmi lbcc b u s tlblx_baselexra inc confidential 29lexra 6stage products users guide revision 50 shouldneverneedtotouchitlayers lx0candlx1letyouselectlexrasupplied product options the hierarchical topmost layer lx2lets you connect standard srams to the processor memory interfaces anything above the lx2layer is designspecific you never need to change the rtl source file used by the lx0lx0co rlx1 layerslconfig configuresand manages themfurther ifyoufollowthe default ram integration methods described below see you wont need to edit the lx2vrtlsourcefileeitherseechapter4 localmemory 321 moduledefinitions thelx0module contains the core of the processor the register file interrupt logicpipelineand decodelogicallresidehere theoptional lx0cmodule supplies scan collar isolation of the lx0modulethis layer is presentifyou set scan_scl yes or ram_bist_mux yesin your lconfig form it contains an instance of the lx0module scan isolation logic as well as ram test muxes the test muxes can be used for bist testing or as pointofentryintotheramsbyadmaengine thelx1modulehas instancesof lx0orlx0candoptionalmoduleswesupply in rtl form such as the mac and ejtag it also passes the ram lbc custominstructionandcoprocessorportsuptothenextlayerasneeded thelx2module has instances of lx1and all rams required to support the lmis as long as customization of the interfaces to the rams is required ie custom dma ports or thirdparty ram bist then this layer uses standard interconnectandram wrappersitalso passesthelbccustom instructionand coprocessorportsuptothenextlayerasneeded we supply module lx_base it instances lx2and other testbed modules like copstub an example for the coprocessor interface and ce_dvtexample custom instructions this level of the hierarchy may be useful barebon starting point foryourdesignin that itincludes wire declarationsandani nstance of thelx2module the port list of this module is designed to work with lexras simulationenvironmentand isprobablynotdirectlyusefulformostapplicationslexra 6stage products users guide revision 50 30 lexra incconfidentiallexra inc confidential 31lexra 6stage products users guide revision 50 chapter4 localmemory thischapteroutlinesdifferentfeaturesandoptionsforlexrasriscriscdsp internalmemorysystemthemainmemorysystemr30004gbmemoryspace ontheexternallexrabusispartofthechiparchitectureandisnotcoveredhere lexra processors internal bus is based on the harvard bus architecture t his specifies that there is one instruction bus and one data bus the architecture allows lexra to support flexible internal memory system with many differ ent memory configurations these include different memory types namely ca che memories rams and roms as well as different memory sizes in addition lexra processors can support both byte writable as well as word writable ram s when using word writable rams byte and halfword stores will cause the processortoperform readmodifywrites using the lconfig tool and your lconfig form you can specify the exact configurationofyourprocessoronceyouvespecifiedthetypesi zeandaddress location of the caches rams and rom in your design lconfig will generate genericmemorymodelstoallowyoutosimulateyourconfiguredprocessor thegenericmemorymodelsservetwopurposesfirst rundvtcanusethemfor system simulation before you decide on specific memory technology t use second when you do decide on your memory technology you can replace the generic simulation models with memory wrapper that will allow you to instanc yourowntechnologyspecificmodel lexra processors memory architecture also supports number of runtime features such as flexible cache flushing options dma to internal memo ries cachelockingandsupportformemorytestingchapter 4lexra 6stage products users guide revision 50 32 lexra incconfidentialthe first four sections below outline how to configure the memory architecture and how to use the different memory models while the following four sections discusstheruntimefeaturesofthememoryarchitecturethelastsecti ondiscuss productspecificmemorytopics 41 memoryarchitectureandconfigurability 411 availableoptions memorysizesandmemorytypes thetwotablesbelowshowpossiblememoryconfigurations youcanconfiguretheicachetobedirectortwowaysetassociative thedcacheisdirectmapped seetheproductdatasheetforsupportedmemorysizesicache imem irom yes yes yes yes yes yes yes yes yes yes yes yes dcache dmem drom yes yes yes yes yes yes yes nolexra inc confidential 33lexra 6stage products users guide revision 50 cachelinesize oucanalsoc onfiguret hecachelinesizeviathe lconfig formthe cache line sizeissameforboththe icacheandthedcache changing the cache line size has an impact on system level performance and characteristics if you change the size consider such things as interrupt latenc timemainmemorycharacteristicsbusutilization andthelike latency of serving interrupts the processor stalls while the memory system i s serving cache miss and as resultthe processor can notservice an in terrupt intheperiodthusthelongercachelinesarethelongerittakestheprocessort service cache miss therefore the processor takes longer to service an interrupt noteif using mem_first_word desired once the desired data word is received by the processor the processor will continue to execute only if another access occurs on thedatabuswhilethelineisstillbeingfetchedwilltheprocessorstall main memory characteristics some memories have long setup times but once set up they burst data very efficiently such memories are better suited f or long cachelines busutilizationlongcachelinesforcetheprocessortooccupythebusforl onger times for every cache miss this may cause longer wait times for other devi ces tryingtoaccessthe busonthe otherhandmemorysystemstransfer moredata when there are longer cache lines depending on such software characteristics aslocalityofcodeanddatathismayreducethenumberof cachemisses memorygranularity lexra processors have two options relating to memory granularity these are labeled mem_granularity and lmi_data_granularity both of these are configured via the lconfig form mem_granularity refers to the ability f the system bus to perform word or byte accesses and lmi_data_granularity refers to the local rams ability to perform the same functions when mem_granularity word byte and halfword store instructions cause readmodifywrite transaction to occur on the system bus store half word instruction to byte address 0x02 for example will cause the processor to read the word at location 0x00 modify the upper half of the word and write the entirewordbackacrossthebustoaddress0x00inthismannertheprocessori slexra 6stage products users guide revision 50 34 lexra incconfidentialensuringthattheprocessorssystembuscontrolleronlyperformswordaccesses onthesystembus when mem_granularity bytebothbyte and halfword store instructions will cause the system bus controller to perform byte and halfword accesses on the system bus thus store halfword instruction to byte address 0x02 for example will cause the processor to issue halfword write access on the system bus to address 0x02 in this sort of system bus peripherals must be designedinawaytounderstandandacceptbyteandhalfwordaccess noteeven if mem_granularityword byte and halfword accesses to uncacheable space will cause byte and halfword transactions to occur on the system bus uncacheable address space kseg1 is commonly mapped to hardware control registers such that unsolicited reads from readmodifywrite could cause problems withhardwarecontrol when lmi_data_granularity word the local srams dcache and dmem are specified as being word accessible in this case byte and halfwo rd writes to the data memories cause readmodifywrite to occur this is two cycleprocess when lmi_data_granularity byte the local data srams are specified asbeingbyteaccessibleinthiscasetheramsmusthavewriteenable sforeach ofthebytelanesinthisconfigurationbyteandhalfwordwritesarewrittent othe ramsin asinglecycle thefollowing tableshowsthe possiblecombinationsofthegranularitysettings for the best performance set both mem_granularity and lmi_data_granularity to byte otherwise the following talks about the tradeoffs mem_granularitywordlmi_data_granularityword byte and halfword accesses to the local data memories require two cycles to complete readmodifywrite byte and halfword accesses to memory situated on the system bus require the processor to first read the word modify it then write it back while the initial read occurs the processor is stalled fo r systemsmem_granularity lmi_data_granularity word word byte word byte bytelexra inc confidential 35lexra 6stage products users guide revision 50 with heavy bus usage this may significantly impactperformanceonce the word has been read and modified the processor will continue to operate as soon as thewordtobewrittenisacceptedbythesystembus mem_granularitybytelmi_data_granularityword byte and halfword accesses to the local data memories require two cycles to complete readmodifywrite byte and halfword accesses to memory situated on the system bus are finished by the processor as soon as the system bus can accept the data to be written this frees the processor to continue processi ng whilethesystembushandlesthetransfer mem_granularitybytelmi_data_granularitybyte byte andhalfword accessesto the local data memoriesrequire single cycle to complete byte and halfword accesses to memory situated on the system bus are finished by the processor as soon as the system bus accepts the data this frees the processor to continue processing while the system bus handles th transfer in system with need for many byte and halfword accesses this will bethehighestperformingsolution 412 imemanddmemcontrollers optional imem and dmem allow efficient storage of frequently used or timing critical code and data code for exception handlers for example you configure the address ranges of the rams using the lconfig formlconfig then sets t h ea d d r s sr n g et ob eh r d w i r di n t r n lt ot h ep r c s s ro re x p r t dt ot h lx2portlistatsynthesistimetheseramsneed notagstorage the ram controllers work together with the cache controllers so that an address claimed by the ram controller does not trigger the cache controller consequently the ram like scratch pad ram works much like an addon cachewithfixedaddressrangeandsinglecycleaccesstimes thedmem controllerhandlesanaddresswithinitsrangeasanuninitializeddat section thusthe only time the dmem controller initiates write to the dmem is whenexplicitlytoldtodosobytheprogramthatiswhentheprocessorexec utes store instruction within its configured range furthermore the dmem controller does not examine any valid bits therefore read from dmem address not written to previously returns undefined data just like any uninitial ized data sectionlexra 6stage products users guide revision 50 36 lexra incconfidentialyou can configure the address range of the imem and dmem to be within all segments that is within kuseg kseg0 kseg1 or kseg2 using the physical addressesthattheserangesdefine for more information on how the cache and ram controllers operate please readtheproductdatasheet 413 configuringthememoryarchitecture the exact rams required for processor application depend on how you configure optional features with lexras lconfig utility here is sample lconfig form entryforconfiguringicache icache instruction cache size configuration choices none 64k_2 32k_2 16k_2 8k_2 4k_2 2k_2 1k_2 64k_1 32k_1 16k_1 8k_1 4k_1 2k_1 1k_1 none instruction cache 64k_2 64k byte 2way set associative instruction cache 32k_2 32k byte 2way set associative instruction cache 16k_2 16k byte 2way set associative instruction cache 8k_2 8k byte 2way set associative instruction cache 4k_2 4k byte 2way set associative instruction cache 2k_2 2k byte 2way set associative instruction cache 1k_2 1k byte 2way set associative instruction cache 64k_1 64k byte direct mapped instruction cache 32k_1 32k byte direct mapped instruction cache 16k_1 16k byte direct mapped instruction cache 8k_1 8k byte direct mapped instruction cache 4k_1 4k byte direct mapped instruction cache 2k_1 2k byte direct mapped instruction cache 1k_1 1k byte direct mapped instruction cache default icache 2k_1 icache 1k_2 after filling out and processing configuration form with lconfigy um examine the ram documentation section in the includelxr_symbolsvh filecreatedby lconfiglexra inc confidential 37lexra 6stage products users guide revision 50 hereisanexampleofthisdocumentation ram requirement summary module config depth width ports ram qty used for icache 1k_2 128 x 32 1 sram_ic_data_128x32 2 data store icache 1k_2 32 x 24 1 sram_ic_tag0_32x24 1 tag store icache 1k_2 32 x 26 1 sram_ic_tag1_32x26 1 tag store and locklru flags dcache 2k_1 512 x 32 1 sram_dc_data_512x32 1 data store dcache 2k_1 128 x 22 1 sram_dc_tag_128x22 1 tag store this shows that the configuration requires six ram instances the names of t he verilog modules that define these rams have the format sram_type_data type_depthxwidth lconfig automatically writes behavioral models for these rams and places them in the lx_homechip subdirectory of the processor noteif using lmi_data_granularitybyte the names for the ram wrappers and behavioral ram models will include trailing _xwe where x is the number of write enablelinesforexamplesram_dc_data_4096x32_4wev noteif usingthelx8000 theram for thedmemhas twoports this is toallow fast dma of packetdataintothelocalramdmeminthiscasetheramwillbelabeledsomething likesram_2rw_dw_data_1024x64 for synthesis you must use applicationspecific rams that meet these requirementsyou may use largerrams ifthe required size isnotavailablethe synthesis wrapper for each ram must however present the required depth and width at its interface as described in section44 using library vendors ram modelsbelow 42 memoryrequirements as described in previous sections the processor uses memories to implem ent instruction and data cache storage instruction and data tag storage instruction and data ram and rom storage the processor can interface with very simple memories that requires minimum of memory functionality section42 1 ram function below outlines functional requirements section422 ram timing belowdiscussestiming requirementsforoptimalperformancelexra 6stage products users guide revision 50 38 lexra incconfidential421 ramfunction the lexra processor interfaces to synchronous rams the only signals it requires are address bus write data bus read data bus write enable and clock optional signals are read enable and chip select depending on the setting of lmi_data_granularity the rams may or may not require byte access capabilityiewriteenablesforeachbytelane the standard ram models and wrappers include active high and low control lines the memory controllers drive these redundant control pins to let you configurewrappersforsynchronousramswithoutaddinglogicinthewrapper if your ram is asynchronous you can easily make it synchronous by creating wrapperthatlatchesalloftheinputsignalsonthepositiveedgeoftheclock for write operations all signals address write data read enable write enable andchipselectareclockedonatthesamepositiveedgeoftheclock for read operations address write enable read enable and chip select are clocked into the ram at the same positive edge of the clock read data is returnedinthefollowingcycleafteracombinatorialreadaccessdelay seealsothe waveforminsection422ramtimingbelowformemoryaccess seetheproductdatasheetforalistoftheram interfacesignals the lexra rtl does not support clkn but supplies it in the wrapper for cases thatneedyourinterventionforexampleifyourramonlysupportsnegativeedge clocking 422 ramtiming ram access takes two cycles to complete but the ram may start new accesseverycyclethetwocyclesarethecommandcycleandthedatacycle in the command cycle the processor supplies addr we re cs and if applicable data_intheram deviceregisterthese attherisingedgeof clklexra inc confidential 39lexra 6stage products users guide revision 50 inthedatacycletheramperformsareadorwriteoperationasindicatedby the we control it receives in the command cycle for read operation read da ta flowsoutoftheramduringthedatacycle withoutanyinterveningdatare gisters for write operation the ram writes the ram array the processor does not observedata_outduringthedatacycleofawriteoperation thediagrambelowshowsaramreadaccess to achieve timing balance with the rest of the processor design the ram read data must be stable by the 45 to 65 mark in the processor cycle for rams used as instruction or data stores the processor uses the rest of the cycle to transfer the information from the caches to the processor core for rams us ed as tag stores the processor uses the rest of the cycle for tag comparison read access times longer than 45 to 65 of the processor cycle time may well requireadecreaseintheprocessoroperatingfrequency the diagram below shows ram write access the processor does not use data_outduringthedatacycleofawriteoperationaddr we data_in data_out cycleclk re cs cmdcycle data cycle4565 addr we data_in data_out cycleclk re cs cmdcycle data cyclelexra 6stage products users guide revision 50 40 lexra incconfidential423 criticalpathsinvolvingrams in most casesthe ram performance dictates the performance ofthe processor thissectioncontainsguidelinesonmemoryperformance for most silicon technologies groups of files for modeling foundry process and libraryinformationthemostcriticalpathsintheprocessorarethefollo wingfour address to instruction rams the path providing the next instruction address from the processor to the icache or imem the rams addressregisterinputsetup timeisinthecriticalpath instruction to processor the path providing the instruction from the icache or imem back to the processor the rams clock to data outlatencyisinthecriticalpath addresstodataramsthepathprovidingthedataaddressfrom the processor to the dcache or dmem the rams address register inputsetuptimeisinthecriticalpath data to processor the path providing the data from the dcache or dmembacktotheprocessortheramsclocktodataoutlatencyis inthecriticalpath 43 usinglexrasgenericrammodels lconfig produces generic ram models based on your selected memory architecture and memory sizes it generates all simulation models necessary icacheicachetagsdmem etcbasedon thesettingsinthelconfig form file the generated simulation models are in lx_homechip and the names of the generated models are sram_type_data type_depthxwidthv or with the trailing _xweifusing byte accessible memories these modules are connected to the processor thus intervention is necessary the mod els are instantiated in the lx2hierarchy for further details see section32 using the lx0lx0clx1lx2designhierarchies the generatedmodels are intendedfor rtlsimulation onlydo notuse them f or synthesisorsignoffsimulationlexra inc confidential 41lexra 6stage products users guide revision 50 44 usinglibraryvendorsrammodels while the lexra generic ram models are well suited for early architecture exploration whenyourown rammodelsmightnoteven beavailableyoushould not use them exclusively throughout the design cycle at some point use ur libraryvendorsramsimulationmodelsinstead to use vendor ram models write ram wrappers with port lists that are compatible with lconfigs corresponding generic ram models and name the files thesameastheyare named forthe genericram modelsputthe wrappers in thechiptechnology subdirectory and rerun lconfig this will allow lconfig to create links from the syndirectories to the location of the ram wrappers where the synthesis scripts will look for them your wrapper must provide all the required and optional signals for interfacing to the rams if the ram doesnt use the optional signals simply leave them unconnected inside t he wrapper seethechiptechnology directoryforanexample ramwrapper when simulating ensure that the vendor ram models instanced in the ram wrappers are accessible you do this typically by adding library entrie s to the usertechnologygatef file also in the file regression lx2inpfiles be sure that all the ram wrappers are listed so thatthe proper verilogfilesarereadintotheverilogsimulation rtl simulation of the processor interfacing to vendor ram models with tim ing requirements might result in simulation problems ie timing checks must be disabledsee chapter12simulation guidelinesforfurtherdetails vendormemoryinitialization the vendor rams that get connected to the icache dcache and imem interfaces must all be initialized to nonx value if they are not the uninitializedcontentscan causeproblemsin simulation lexraprovidesinthei r rtl environment debug monitor lmon that will look for this condition however if the monitor in lmon is not being instanced as in the case for gate level simulation simulation may become corrupt if this monitor warns that th ram interfacehasgonexusuallythiscomesfromeithertheram contentbeing uninitializedorasystembusreadthatcamebackxlexra 6stage products users guide revision 50 42 lexra incconfidentialto remedy the situation the local rams connected to these interfaces must l be initialized to nonx value for the imem and icache it is best to ini tialize the ram contents to an invalid opcode if the processor unexpectedly executed one of these opcodes bad opcode exception trap would occur and simulation wouldfail for the dcache initializing the rams to random data should sufficefor this may very well be what the real silicon will do dmem contents should be initialized by an application ie via store instructions before any data is read from it if it is not done xs may enter the processor data paths and cause simulationproblems uni i z ed m emor i mpact on cac he c ontrol l er s the xs in the rams are problem because the caches are permitted to return invalid instructionsordata tothe processorifa missoccursthe cach logic sends signal to the processor in the next cycle to nullify the effect of havingsentthewronginformationanxinthetagstorescancausethecache controllers to not even be able to determine if miss occurred or not although the hardware contains state machines to write 0s to all tag stores upon reset there is guarantee that the processor state will not be corrupted when thetag ramsare allowed to contain x before reset an x should not be in the instruction store because the processor performs speculative decode of the instruction that it is sent the nullification signal from the cache controller will make the logic do the right thing but only if it is at some binary value for the logic to support an x in an invalid instruction thelogicwouldhavetobestructuredinawaytoensurethatthexisgatedout before itissensed bythedecode logicingeneralthisispossible forrtlbut this property is not always preserved once the design is mapped to gates by synthesisand either waythe structure would have veryadverse impacton critical path timing an x in the data caches data store is not wanted for similar reason as the instruction store the data that is read from the data cache might be needed to resolve branch condition that is present in the d stage the x in the logic can cause an x on the branch outcome even though the pipeline is being stalled the x can still leak through the branch logic and corrupt the pipeline so to ensure valid simulation initialize the icache imem and dcache ramsto values thatarenonxlexra inc confidential 43lexra 6stage products users guide revision 50 45 directmemoryaccesstointernalrams devices on the external lexra bus cannot snoop the internal instruction or dat bus in order to access the internal memories instead the lexra processor provides two methods for direct access to internal memories first request grant method has been created for an external device to get exclusive access to the internal memories using the same memory port that the processor uses secondanyoftheinternalmemoriescanbemadewithdualportedmemoriesso thatan external agentcan view modify thememorycontents withoutimpactin g theperformanceoftheprocessor 451 usingrequestgrant youcan use thedma accessmethod outlinedbelow todma dataorinstructions intoa localmemoryaswell asallow an externalagenttoforcecacheinvalidat ion upon the processor thus you can use it to control data coherency in multiprocessorenvironment each icache and dcache controller as well as each ram controller provides request signal that an external agent may use to signal that it wants access to the internal ramsthememorycontrollerrespondstoa req signal asserted by the external agent by asserting grant gnt signal when the external agent detects the asserted gnt signal it has exclusive access rights to the m emory devicesthatthememorycontrollernormallyuses notebeforethememory controllerassertsgrant it may havetoexecute atransactiononthe system bus make sure that the system bus is not held indefinitely or the memory controllermaynotassertgrant the external agent may access the icache store and tag imem dcache store and tag dmem or any combination ofthese depending on which memory controllersreq andgntsignalsyouhaveconnected the processor stalls while the grant is asserted as result the length f the dma operation may affect system characteristics like maximum interrupt responsetime in order to give an external agent access to internal memory using this method you must insert 21 mux into the appropriate critical path you can insert this m u x c l l dt h er mb i s tm u x u s i n gt h ei n t r f c ew ed s c r i b ei ns c t i n9 3 ram testinglexra 6stage products users guide revision 50 44 lexra incconfidentialdmapriority the external dma engine is guaranteed to get first priority ie first access immediately after the processor comes out of reset this enables the dma to write to any memory before the processor starts executing the dma request line must be asserted before the processor comes out of reset in order to guaranteethisbehavior 452 usingdualportedmemories dual ported memories give you the best performance when doing dma to the internal processor memories for area conscious design the area impact of dual ported memory may make this feature unfeasible also when using dual ported memories care must be taken to ensure that the processor does not processdatathatiscurrentlybeingmodifiedbytheexternalagent 46 invalidatingacache lexra processorsprovidesseveral differentmethods bywhich you can invalidate the caches or portion of the caches since different applications have di fferent requirements method is better or worse than another the sections below describe the different cache invalidation schemes and their limitations and t he lastsectionsummarizesthem 461 invalidatingacachecompletely the coprocessor 0 has control register called cctl general register address20 some bits in this register control the complete invalidation of the caches one bit for the icache and one bit for the dcache thus you can controltheinstructionanddatacachesseparately anassemblerprogrameasilycreatedcansetthesebitstodesiredvalueso nce the processor detects that cache invalidation bits have been set the p rocessor stalls the cache controllers invalidates the icache tag andor the dca che tag depending on the cctl setting the processor resumes once the caches havebeeninvalidated the cache invalidation sequence takes one cycle per cache line you can do instructionanddatacacheinvalidationinparallellexra inc confidential 45lexra 6stage products users guide revision 50 462 invalidatingacachelinewithanaliasedapproach you can also invalidate the dcache with one line granularity use the alias ed approachtoreplacethecachelineyouwanttoinvalidatewithanothercacheline since the dcache is directly mapped you can invalidate the cache line of particularaddressbyloadinganaddresswiththesame10loweraddressbitsfo r a1kbytecacheforexampleyoucanfindsuchanaddressbyaddingthecache sizeto theaddresswhosecacheline youwanttoinvalidate disadvantage of this method is that it displaces the cache line at the indexed locationeven ifitisnotthetargetaddress 463 invalidatingacachelinebyuncachedreference if the address whose cache line you want to invalidate is within the kseg0 segment you can invalidate it by making an uncached reference to the same physicaladdress lexras simple memory manage unit smmu provides fixed memory mapping scheme the processor maps the two virtual memory segments kseg0 cached and kseg1 uncached to the same physical memory furthermore even for uncached references the lexra cache controller translates the uncached virtua l address to physical address and looks up the tag memory if the address matchesthetagit invalidatesthecacheline thusifanaddressinkseg0shouldbeinvalidatedinthecacheitisenoughtod aloadoperationfrom thecorrespondingaddressinkseg1 the advantage of this method compared to the previous method is that it invalidates thelineonly if it is resident 464 invalidatingacachebyusingdma you can use the dma access method described in section45 direct mem ory access to internal rams to invalidate the caches since the lexra processor c an grant access not only to the cache store but also to the cache tag using t he dma an external agent can force cache invalidation upon the processor instructionandordatacacheslexra 6stage products users guide revision 50 46 lexra incconfidentiala cacheinvalidationsequencelookslikethis 1 theexternalagentassertsreqtotheappropriatecache 2 once granted access to the cache by receiving an asserted gnt the external agent reads some position in the cache tag memory to ensure data coherency it determines if there is any datainthecachewhosecachelineyouwanttoinvalidate 3 if there is the external agent invalidates the appropriate cache linebyresetting thevalidbitfortheselines 465 invalidatingacacheusingmultiportmemories this method requires that the cache tag memories be implemented with multi portmemoriesormorepreciselytworeadportsandonewriteport thiscacheinvalidationmethodisverysimilartotheonedescribedint heprevious section however having access to the second read memory port the external agent does not need to use the dma request in order to examine read the tag memory it need only use the dma channel when finding data in the cache whosecachelineneedstobeinvalidated cacheinvalidationsequencelookslikethis 1 the external agent reads the cache tags when needed using thesecondreadportonthetagmemory 2 if it findsdatainthe cache that needsto beinvalidated it issues the req and invalidates the appropriate cache lines when receivingan assertedgnt 466 conclusion the methods in the first three sections of 46 invalidating cache di ffer from those the last two sections in that the first set of methods requires that t he application running on the processor itself know that is has to invalidate t he cacheitinitiatesthecommandsthatinvalidatetheentirecacheorport ionsofthe cacheforsomesystemsthisisnotalimitationforothersitisunusa ble the last set of methods use an external agent to force cache invalidation upon the processor the last method is more efficient in terms of system perform ance butitmayrequiremultiportramslexra inc confidential 47lexra 6stage products users guide revision 50 47 icachelocking if you configure the instruction cache for twoway set associativity t he lexra processor lets you lock instructions into the icache you can force all fet ched instructions to occupy set 1 of the icache during execution of critical code segment subsequentlyyou can lockthe instructions heldin set1 sothat misses dont displace them in this mode the processor uses set 0 to service icache misses the coprocessor 0 has control register cctl general register address 20 thecctl32controlstheicachelocking to ensure that critical piece of code fetched by the processor be stored nd lockedintoset1modifyyourfunctionwithasmall wrapperasfollows custom_function_wrapper assemblercodetosetcctl3210 custom_function assemblercodetosetcctl3211 endcustom_function_wrapper 48 rammanufacturingorbisttesting the lexra processor provides mechanism for testing ram at manufacturing timeorusing bist machinesseesection93ramtestingformoredetail s 49 lx4280memoryspecifics thelx4280hasa64bitinstructionbustoaccommodatethedualissuepipel ine for consistency sake the lx4280 also has 64bit interface to the data caches and dmem thus all the memory interfaceswrappers mustbe 64 bitshowever the memories themselves may be 32 bits as in the lx4189 or 64 bits in any case there must be separate we signal write enable for the upper 32 bit memorybit6332andanotherwe forthelower32bitmemorybit310cctl32 functionality 00 noeffectnormaloperation 01 noeffectnormaloperation 10 forcesallcachemissestooccupyset1 11 replacescachelinesinset1andlocksitlexra 6stage products users guide revision 50 48 lexra incconfidentialexample memory configured to be 8k_1 in the lconfig form 8 kbytes direct mappedwillhavethe followingdepthandwidth 1024x64 forlx4280 2048x32 forlx4189 410 lx5280memoryspecifics thelx5280hasa64bitinstructionbustoaccommodatethedualissuepipel ine it also has 64bit interface to the data caches and dmem to allow 64 bit accesses in single cycle thus all the memory interfaceswrappers must be 64 bitshoweverthememoriesthemselvesmaybe32 bitsasinthelx5180 or64 bitsinanycasetheremustbeaseparatewesignalwriteenablefortheupper 32bitmemorybit6332andanotherweforthelower32bitmemorybit310 example memory configured to be 8k_1 in the lconfig form 8 kbytes direct mappedwillhavethe followingdepthandwidth 1024x64 forlx5280 2048x32 forlx4189 411 lx8000memoryspecifics the lx8000 has 64bit system bus interface to take advantage of thi s the icache imem and dcache are 64 bits wide all the memory interfaces wrappers for these rams must be 64 bits however the memories themselves may be 32 bits as in the lx4189 or 64 bits in any case there must be separate we signal write enable for the upper 32 bit memory bit 6332 and anotherwe forthe lower32bitmemorybit310 the dmem on the lx8000 has its width specified via the lconfig form op tion dmem_width write enable bit is added for each 32bit word per dmem addressthereforea32bitwidedmemwillrequireonewriteenablebita64 bit dmemwillrequiretwowriteenablebitsandthe128bitwidedmemrequiresfour writeenable bits noteif using lmi_data_granularitybyte there will be writeenables for every byte thusifthedmeminterfaceis128bitswidetherewillbe16writeenableslexra inc confidential 49lexra 6stage products users guide revision 50 chapter5 usingthelbcinterface the lexra bus controller lbc is the interface between the internal instruction and data busses of the core and the external bus which is used to connect peripherals such as main memory or io devices the lbc implements lexra s lbus protocol fullfeatured bus protocol that supports multiple bus masters througharequestgrantarbitration detailed description of the lbc and lbus protocol as well as the pin descriptionisgivenintheproductdatasheet theproductdatasheetalsodescribesanalternativebusstructureavailable tothe lexra cores the cbus the cbus is an appropriate alternative when simple pointtopointbusprotocolisdesired 51 configuringthelbcwith lconfig 511 configuringasynchronousasynchronousinterface the lbcs bus clock can operate either synchronous or asynchronous to the lexra core clock as the lbc contains builtin asynchronous handshaking logic this handshaking logic does however significantly increase the latency of bus accesses therefore the lbc should be operated in synchronous mode if bus latencyisaconcern the lbc is configured to run either synchronous or asynchronous using the lbc_sync_mode lconfig optionplease referto the lconfig formand the productdatasheet fortheavailablesettingschapter 5lexra 6stage products users guide revision 50 50 lexra incconfidentialthe latency for lbus accesses depends upon several variables for synchronousbusclockthelatencywilldependuponthe followingfactors waitstatesoftarget device lbusarbitrationdelay typeofbusoperationegsinglewordreadcachelineread cachelinesize for data cache miss operations the location of the critical word within t he retrievedcachelinethedatacachecontrollerreleasesthepipelinestallw henthe desiredwordhasbeenretrievedoverthelexrabus lbus width 32 bits or 64 bits refer to product datasheet for your specifi c productconfiguration when an asynchronous bus clock is used the latency will increase due to the asynchronoushandshakinglogicwhichaddsapproximately4cyclesper wordof round trip latency however the actual latency will depend greatly upon the rat io ofthebusclocktothecoreclock the table below gives the latency assuming synchronous bus clock for 4 word cache line read the best case assumes the critical word is the first w ord retrieved in the cache line the worst case assumes the critical word is the st word retrieved which will always be true for instruction accesses as the instructioncachedoesnotimplementcriticalwordreturncapabilitybot hcolumns assume wait states on the target device and that the lbc has been pre grantedthe lexrabusthroughtheuseofaparkedmasterarbitrationscheme 512 configuringcachepolicies when the lbc initiates bus transaction for cache line read it puts one and only one address on the address bus for the whole cache line transaction system memory controllers may respond tocache line requests in variouswaysmode bestcaselatency cyclesworstcaselatency cycles synchronous 7 12lexra inc confidential 51lexra 6stage products users guide revision 50 thereforeitisimportantthatthe lbcbeproperlyconfiguredtoacceptthewords in the cache line in the order in which they will be read by the system m emory controllerthememorycontrollermayrespondinoneofthefollowingways by transmitting the desired word the word that actually caused the missfirst by transmitting the zero word the first word in the cache line independentofwhichwordactuallycausedthemissfirst whentransmittingthesecondandsubsequentwordsthememorycontrollermay increment the word position within the cache line in linear or interl eaved manner please refer to the product datasheet and your lconfig form for details andtheappropriatelconfigsettings 513 configuringreadandwritebuffersizes the lbc implements write buffer to accept write requests from the processor details ofoperation and configuration options are explained inthe datasheeta nd lconfig form customers who wish to save area may use reduced write buffer size at the expense of performance selecting larger write buffer size may improve performance slightly for those applications requiring lot of writes to memorydevicesattheexpenseofarea the lbc also implements read buffer the read buffer stores data or instructionstemporarilybeforetransmittingthem totheinternalinstructio nordata busses the read buffer allows the lbc to accept read data as it is provided by the target device if the lbc is not able to accept read data as fast as it is provided by the target device its read buffer may become full the lbc will asserttheirdysignalduringthisconditionrequiringthetargetdevicetosta llthe lbus during the transaction the optimal read buffer size is typically the minimum amountrequired toavoidthedeassertionofirdy if an asynchronous lbc is used the optimal read buffer size is twice the cach line size or eight entries assuming 4word cache line size in the case of simultaneousinstructionanddatacachemissesthelbcwillperformsuccessive icache and dcache refills read buffer of eight entries will allow both requests to be serviced and posted to the read buffer without the deassertio n of irdy during the transaction setting the read buffer size to smaller val ue will reduce area but may result in the deassertion of irdy during transaction therebyreducingoveralllbus bandwidthlexra 6stage products users guide revision 50 52 lexra incconfidentialif you configure the lbc with synchronous interface the cache can accept t he data as fast as the lbc can read it therefore there is need for large read bufferinthiscaseyoumayreduce thesizeofthereadbuffersizetotwoen tries theminimumallowable formoreinformationonthereadbufferandtheassociatedconfiguratio noptions pleaserefertothedatasheetandthelconfig form 52 lbusdevicedesignrules the lbus can accommodate both master and target devices such devices must be designed to accommodate the lbus protocol as described in the product datasheet please refer to the datasheet for detailed signalling descriptions 521 lbusarbiters if the lbus contains additional bus masters besidesthe lexra core or connects multiple master cores you must design bus arbiter to arbitrate requests from the various bus masters detailed arbitration rules are provided in the product datasheetbelowaresomeguidelineson busarbiterdesign the choice of prioritization fixed priority round robin etc is up to the customer it is the designers responsibility to ensure that the prioritization scheme used will allot sufficient bus bandwidth to each busmaster onlyonegntsignalcanbeassertedatanyonetime you can design an arbiter that pregrants bus master while previoustransaction is in progressa pregranted masterisonethat hasreceived gnt signal even though ithasnotyet requested the bus by asserting req this technique will save 2 cycles when the nextmasterrequeststhebus anarbiterthatpregrantsamastermaytakeawaythegntandgive it to another master at any time without regard for the state of the transaction in progress within the limits of the master devices gnt setup time of course if the first master has already sampled gnt it starts the transaction on the next cycle the new master samples gnt butalso seesthatthebusisnowbeingusedanddoesnot try to drive the bus there is chance of two masters simultaneously driving the bus if they both sample gntframeirdy on thelexra inc confidential 53lexra 6stage products users guide revision 50 cyclebefore takingownershipofthebus an arbiter may park master by continuously asserting gnt thus giving it instant access to the lbus if it needs it if another device needsthe busthearbitermaytake awaygnttothe parkedmaster and give it to the new master the new master still must sample gntframeirdy to make sure the parked master has not startedatransaction 53 deviceinterconnections on any bus based system you need to connect devices such that every slave device seesallthemasterdevicessignals andall themasterdevicesseeallthe slave devices signals in traditional board level design you connect them this way with combination of tristate busses and pullup busses you typic ally use the pullup busses for handshake signals that need to be continuously sampled you use the tristate busses for wide busses that can be enabled by the devi ce abouttodrivethem in an application specific integrated circuit asic pullup busses are not possible tristate busses are difficult because asics cannot tolerat an driven tristate bus and some asic vendors do not permit tristates therefore youhavetomodifythetraditionalmodelsomewhattobuildasystem onachip there are two basic models you can use for device interconnect tristate and multiplexed the tristate model resembles the traditional board level tris tate modelexceptthatthetristatebussesmustbedrivenatall times the multiplexed model uses multiplexers to create pointtopoint connection s either by distributing the multiplexers such that there is one set for each i nput to each master and each target or by cascading the signals through twotoone muxesateachinputalternativelyyoucansupplya central setofmuxesto r oute thebus for more detailed discussion of the tristate model see section532 connectingtheaddressdataandcommandbussesbelow therearetworulesfortristatebussesinmostasictechnologies youmustnot samplethatis registerasignalinthehighimpedance statelexra 6stage products users guide revision 50 54 lexra incconfidential youcannothavetwoormoredriverstothesamesignalatthesame timedoingso causesshortsandreliabilityproblems we treat protocol signals frame irdy trdy and sel and busses addr cmdanddataseparately 531 connectingtheprotocolsignalsusingorgates t h ee s i s tw yf ry ut or u t et h ep r t c l f r m i r d s l t r d signalsistorouteall possibleoutputstoall possibleinputsandlogicallyort hem beforepresentingthemtotheinputpininotherwordsrouteallmastersfra andirdysignalstoallmastersandallslavesandthenortheminfronto feach frame and irdy input pin likewise route all slaves trdy and sel to all mastersandlogicallyorthem infrontofeach frame and irdyinputpin thisworks because lexra definesall four protocol signalsto be valid at all times andyourprotocolmustguaranteethatno twodeviceseverdrivethesame signal atthesametimefurthermoreyourprotocolmustguaranteethatthisisalsot rue ofxoedoeandcoetheroutingoverheardisusuallylowbecausetherear onlyfoursignalslexra inc confidential 55lexra 6stage products users guide revision 50 532 connectingtheaddressdataandcommandbusses you need to treat the addr data and cmd busses differently from the protocol signals for three reasons one is that they are wider busses with more signals and are therefore more difficult to route unlike the protocol signals which are always defined to be valid these signals have an undefined value when not valid thereforeyou can notlogically or them with busses from other sources you can connect these busses using either multiplexers or tristate buf fers most asic vendors require that you use multiplexers to connect the busses as tri statesdorequirespecialhandlingandcan causetestabilityproblems thelbcsendstwosetsofoutputenable signalstocontroltristatebuffersframeirdyframeirdytrdysel frameirdyframeirdytrdysel frameirdyframeirdytrdysel trdy sel frame irdy trdy sel frame irdy target targetmaster master masterlexra 6stage products users guide revision 50 56 lexra incconfidential coe command output enable controls the command and address busses doe dataoutputenablecontrolsthedatabus note that there is always an inactive cycle when any of these three busses changeownershipifyouareusingtristatebussesthisinactivecyclewillrequ ire special handling to avoid undriven tristate busses it is conside red poor design practice to have undriven tristate busses most asiccot libraries that suppo rt tristatedriversincludebusholderdevicesbusholdersaretwocascadedbuffe rs ornotgatesofwhichthesecondisaweakdriverboththeinputandtheout put of the bus holder connect to bus signal because of the weak driver the bus holder can drive the bus to the most recently driven level without risk of current problemsorshorts 54 usingcbus the cbus is simplified bus protocol optimized for pointtopoint operat ion it lacks several features of the lbus as shown in the table below however it can be useful in applications in which area is critical and multiplemaster bus protocol isnotneededalsothe simplerprotocol of the cbus makes iteas ierto interfacetoathirdpartyorproprietarybusstructure the table below showssomeofthe principal differences between the cbus and the lbus for complete information on the cbus signalling protocol pl ease refertotheproductdatasheet feature lbus cbus asynchronousinterface yesoptional writebuffer yes readbuffer yes multimasterbus yes ejtagsupport yes nolexra inc confidential 57lexra 6stage products users guide revision 50 chapter6 addinginstructionsusingthecustomengine interfacecei 61 introduction the custom engine interface cei allows you to implement custom instruc tions as extensions to the mips1 isa the lexra core contains two ceis cei0 nd cei1cei0 isreserved forthe optional multiplyaccumulatemac modulece i1 is available for customer defined instructions up to 10 custom opcodes may be defined 62 operation thecustom engine receives12opcodebitsthe 6bitopfieldandthe6bit subop field the diagram below shows the location of these two fields in the mips1 rtypeopcodeformat the custom engine ce receives the opcode in the s stage refer to the productdatasheetforinformationonthepipelinestagesifitdecodestheopco as valid instruction it asserts the sel signal in the stage the sel signal indicates to the processor that the custom engine has received valid opcode and reserved instruction trap should not be taken if sel is not asserted the processor will assume an invalid opcode has been executed and will generate reservedinstructiontrap3126 256 50 op subopchapter 6lexra 6stage products users guide revision 50 58 lexra incconfidentialduring the stage the custom engine receives the two operands they are either two 32bit register operands or one register operand and one 16bit immediate operand sign extended to 32 bits the custom engine can return the results to the processor via the res signal to the core in the stage alternatively the custom engine can use temporary registers or the mips1 hi loregisters thefigurebelowshowstheblockdiagramofacustomengine 621 instancingcustomengines there are two lconfig options controlling the instancing of custom engines ce0 and ce1 please refer to the product datasheet and lconfig form for detailsonthe lconfig options custom engine ce0 is reserved for the lexra mac module the lexra mac moduleisoptionalonthelx4189andlx4280butisrequiredonthelx5180and lx5280 notethatthe lexramac implements themips1 hi registersifthemac i s not used then ce0 must be set to ce_hl to instance the mips1 hi registers unless these registers are implemented in ce1 by the user please refertosection634temporaryregistersandmips1hilo fordetails if you want to connect custom engine to ce1 set ce1 to export setting ce1 to ce_dvt instances simulation testbed ce_dvtv you can use the testbed module as template for implementing custom engine the testbed itselfis validonly for simulationpurposesthetemplateis notsyn thesizablecustom engine block cei_res_ecei_ceiaop_e_r cei_ceibop_e_r cei_ceiop_s_r decode pipeline control cei_sel_e_r cei_halt_e_rcei_ceihold cei_xcpn_m_ci cei_instm32_s_r_nlexra inc confidential 59lexra 6stage products users guide revision 50 622 interfacesignals the core exports the following interface signals to the lx2vmodule when you set ce1 to export cei inputs are outputs of your custom engine and c ei outputsareinputstoyourcustom engine ceiinputsoutputsofyourcustomengine ce1_res_e310 the32bitresultofthecustomengineoperationreturnedto thecoreintheest age ce1_sel_e_r indicates that the custom engine has decoded valid user defined opcode and that the core should not take the reserved instructio n trap thecustomenginereturnsthesignaltothecore inthee stage ce1_halt_e_r indicates that the custom engine is executing multiple cycle instruction and the result of the instruction is not yet valid asserting thi s signal causes the pipeline to stall refer to section631 pipeline issues an d stalls for furtherexplanationofstallconditionsthecustomenginereturnsthissignal tothe coreintheestage ceioutputsinputstoyourcustomengine cei_ce1op_s_r110 the 12bit concatenation of the op and subop fields from thefetchedinstructionvalidinthes stage cei_instm32_s_r_n the core assertslow if the instruction is 32bitmips1 instructionthe coreassertshighifthe instructionisa16bitmips16instru ction thecustomenginemustexaminethissignaltoavoidaliasingcustominstructions withmips16instructionscustomopcodesarenotavailableinmips16 validin thes stage cei_ce1aop_e_r310 the32bita registeroperandvalidin theestage cei_ce1bop_e_r310 the32bitb registeroperandorthe 16bitimmediate fieldsignextendedto32bitsfrom theinstructionvalidinthee stagelexra 6stage products users guide revision 50 60 lexra incconfidentialcei_ce1hold when high indicates pipeline stall during pipeline stall the outputs from the interface to the custom engine are not valid and should be ignored thecustom enginemust stallits pipelineandretainthepr evious stateof its outputs in some cases the custom engine may need to hold some of its internal state when this signal has been asserted the core will not assert this signal if the custom engine itself causes pipeline stall by asserting t he ce1_halt_e_r signal validin anypipelinestage ce1_xcpn_m_c1 indicates an exception has occurred section632 exceptions and invalidation explains the significance of exceptions to cust om engineinstructionsvalidduringthemstage cei_ce1invld_m indicates that the current m stage instruction is invalid execution of any ce instruction in the m stage should be terminated refer t section632exceptionsandinvalidationfordetailsvalidduringt hem stage cei_ce1invldp_s_r indicates an invalid instruction in the s stage of the pipeline therefore the instruction opcode present on cei_ce1op_s_r is not valid and should be ignored refer to section632 exceptions and invalid ation fordetailsvalidduringthes stage 623 availableopcodes the table below shows instructions available for use by the custom engine interface in bold type the custom engine must also decode the mips1 mfhi mflo mthi mtlo and the mips16 mfhi mflo if the custom engine implementshiloregisters opcodes in addition to those listed below are not generally supported please contact lexra if your custom engine design must implement additional instructionsbeyondthe10customopcodesallocatedbelow op116instr3126 op50instr50 description instruct ionformat 2h00 2h38 new_rop0 register 2h00 2h3a new_rop2 register 2h00 2h3b new_rop3 register 2h00 2h3c new_rop4 register 2h00 2h3e new_rop6 register 2h00 2h3f new_rop7 registerlexra inc confidential 61lexra 6stage products users guide revision 50 registerformat rdrssuboprt immediateformat rt rsopimmediate for register format instructions the rs operand appears on ce1aop and the rt operand appears on ce1bopthe resultis stored in register rd to make use of internalcustomengineregisterssuchasthemips1hiloregistersi nsteadof a32bitdestinationregistertherdfieldmustbesetto0x00 for immediate format instructions the rs operand appears on ce1aop and the 16bitimmediate field sign extended to 32 bits appears on ce1boptheresult is stored in rt to make use of internal custom engine registers such as the mips1 hi registers instead of 32bitdestination registerthe rtfield must besetto0x002h18 immediate50 new_iop0 immediate 2h19 immediate50 new_iop1 immediate 2h1a immediate50 new_iop2 immediate 2h1b immediate50 new_iop3 immediate 2h00 2h10 reservedformfhi register 2h00 2h11 reservedformthi register 2h00 2h12 reservedformflo register 2h00 2h13 reservedformtlo register 2h2d 6bx1_0000 mips16mfhi register 2h2d 6bx1_0010 mips16mflo register 31 26 25 21 20 16 15 11 10 6 5 0 op0x00 rs rt rd 0x00 subop 31 26 25 21 20 16 15 0 op rs rt immediateop116instr3126 op50instr50 description instruct ionformatlexra 6stage products users guide revision 50 62 lexra incconfidential63 implementationdetails 631 pipelineissuesandstalls therearethree typesofcustomengineoperations singlecycle multiplecyclewithoutstalls multiplecyclewithstalls in single cycle operations the custom engine decodes the instruction in the s stageandreceivestheoperandsintheestageittransferstheresultstothecore bytheendoftheestageandthecoreupdatesgeneralregistersinthewstage in multiple cycle custom engine operations without stalls the custo m engine decodesthe instruction in thes stageand receives theoperands in thee stage however it does not return the result to the core in the stage instead the custom engine stores the result in temporary registers when the operation is completed one example ofinternal temporary registers are the mips1 hi registers which are described in more detail in section634 temporary registersandmips1hilo for custom engine operations that use internal registers the custom engine holdsitsown pipelineinthemstageforasmanycyclesasittakest heinstruction to execute the processor pipeline will continue to execute subsequent instructions when the operation is complete the program can retrieve the data using custom engine opcodes that read these registers one example of these opcodesarethemips1mfhiandmfloinstructionsexplainedinmore detailin section634temporaryregistersandmips1hilo in some cases the custom engine may receive an instruction to read the temporary registers before the execution of the multiple cycle custom eng ine instructioniscompletetherearetwoapproachestosolvingthisproblem require the programmer to place the proper spacing between the custom instruction and an instruction accessing the temporary registers attempts to read the result earlier return invalid data this approach simplifies the hardware design at the expense of programmingcomplexitylexra inc confidential 63lexra 6stage products users guide revision 50 assertthe ce1_halt_e_r signal to the core until the resultsofthe custom instruction are available in the temporary registers this approach adds complexity to the hardware design but avoids any programminghazardswithcustom engineinstructions if you eliminate multiple cycle operations with stalls you eliminate the requirement for temporary registers if an instruction does not require large number of cycles to execute you could have the custom engine assert the ce1_halt_e_r signal when the instruction enters the stage and then deassertitwhen the execution is completethe customengine would assert the resultonce1_res_e inthesamecyclethatitdeasserts ce1_halt_e_r this approach causes the processor pipeline to stall whenever it encounters the multiple cycle instruction which in turn may cause performance degra dation therefore we recommend this approach only when the number of required instruction cycles is two or fewer however the reduction in design comp lexity that results from removing the temporary registers may make this tradeoff worthwhile the processor can stall the custom engine by asserting the cei_ce1hold signalthissignalindicatesthatanoperationsuchasacachemisshascaused processor stall the processor does not assert this signal if the custo m engine itselfcausedthestallbyasserting ce_halt thiseliminatesthe needto check for potential deadlockconditionsifthe processorasserts ce1hold the custom enginemustholdanyinstructioninthes ore stageyoumustignore theopcode and operand inputs and hold the resoutput in its previous state as the processor is not ready to access the result of the custom engine instruction multiple cycle instructions that are in the first m stage must be held as well for proper exception handling instructions that have already advanced past the f irst m stage may continue to execute and may update internal custom engine temporaryregisterswhenexecutioncompletes 632 exceptionsandinvalidation since the custom engine is tightly coupled with the core pipeline proper exception handling is requirement there are many sources of exceptions including hardware interrupts and ejtag breakpointsthereforecustom engine instructionsaresubjecttoexceptions exceptions are recognized when the exception victim reaches the m stage t thattimeallsubsequentinstructionswhichareinearlierstagesinthep ipelinearelexra 6stage products users guide revision 50 64 lexra incconfidentialsquashed the exception victim and flushed instructions are reexecuted when the exception routine has completed in order to implement precise except ions the state of the custom engine must not be changed by the squashed instructions thecustomengineopcodesandoperandsarepresentedtothecustomenginein the s and stages respectively therefore the custom engine design must take care to avoid state changes until the ce instruction has completed the m sta ge without any exceptions exception handling is enabled through the use of the ce1_xcpn_m_c1 andcei_invld_m signals thecei_invld_m is asserted whenever the instruction in the m stage must be invalidated if cei_invld_m is asserted the custom engine must invalidate any instruction in the m stage the invalidated instruction must not cha nge any state internal to the custom engine the invalidation may or may not be caused by an exception thece1_xcpn_m_c1 signal is asserted when an instruction in the m stage of the pipeline contains an exception when ce1_xcpn_m_c1 is asserted the custom engine must abort any operations in the s and stages the aborted instructions must not proceed to the m stage and must not change any state internaltothecustomengineinstructionsalreadyinthemstagemayc ontinueto executeunlessthe cei_invld_m signalisalsoasserted for multiple cycle instructions the definition of the m stage may be confusing the m stage is the first cycle following the stage in which there are pi peline holdsasindicatedby ce1_halt_e_r orcei_ce1hold notetheestageis whenthe2operandsarevalidsubsequentcyclesarenotconsidered partofthe m stage custom instructions executing in these cycles may continue executi on for example consider an opcode ce_long that takes 10 cycles following its stage and writes to hi upon completion the instruction ce_long is only subject to exceptions in the first of the 10 cycles which is its m stage if ce_long is executing and has progressed beyond this first cycle it must continue to completion even if cei_invld_m orce1_xcpn_m_c1 are asserted in some cases the instruction in the s stage may be invalid in such situations the core asserts cei_ce1invldp_s_r indicating that the s stage opcode on cei_ce1op_s_r is not valid and should beignored custom engine operations already in the or m stages may continue execution examples of invali d opcodesinthes stageincludepipelinebubblesinsertedbycertain instruct ionslexra inc confidential 65lexra 6stage products users guide revision 50 633 dualissueconsiderations custom engine operations on the dualissue processors lx4280 and lx5280 are handled in the same manner as the singleissue processors lx4189 lx5180 lx8000 the pipeline control signals and exception signals must be handled in the same manner as described earlier however there are some potentiallyconfusingsituationsthatwarrantfurtherexplanation customengineopcodesareissuedtopipelinebalsoknownasthemacpipein some cases an instruction may be issued only to pipeline due to scheduli ng conflict refer to the product datasheet for details on dualissue schedul ing conflicts in such cases an invalid instruction will propagate through pipeline b causing assertion of the cei_ce1invldp_s_r signal proper handling of this signalisstillthesameasdescribedearlier if an exception occurs there may be two instructions in the m stage of the processor pipeline depending upon the instruction ordering and the location of the exception one or both instructions may be flushed if only one instruction i s flushed the other instruction must continue to execute the flushed instruction maybeineitherpipelinea orbdespitethiscomplexitythe processorwi llassert the proper combination of cei_invld_m andce1_xcpn_m_c1 so that the custom engine can properly handle the exception the definition of these signals isthe sameasdescribedinsection632 exceptionsandinvalidation 634 temporaryregistersandmips1hilo to avoid stalls on multiple cycle custom engine instructions tempora ry registers must be used to store the results as described in section631 pipeline i ssues and stalls there are two approaches to implementing temporary holding registers implementregistersaccessedbycustom engineopcodes implementmips1 hiandlo registers the former approach requires at least one opcode per 32bitregister to read the result an additional opcode per register maybe required ifwriting to the regi ster isrequiredeitherforinitializationorforacontextsaveandrestorelexra 6stage products users guide revision 50 66 lexra incconfidentialthe mips1 instructionsetprovides two 32bitregisters called hiand lot hese areaccessedbythemfhimflomthiand mtlo instructionsinsomecases these registers may be used as temporary registers thereby saving valuable opcodessome restrictionswhen usinghilo are themacusesthemips1hiandloregisterstostoretheresultsof the mips1 multiply and divide instructions thereforethe use ofhi and is restricted to those configurations that do not implement the mac this restriction prohibits the use of hi and on the lx5180andlx5280products normallyhiandlo are implementedon ce0whence0is setto its defaultvalue ofce_hlifthecustom engine implementshiandlo registersthevalueofce0mustbesettonone lconfigdoesnot check for any conflictin the use ofhi and between custom enginemodulesandce0modules the custom engine must implement the four mips1 opcodes for mthimtlomfhiandmfloadditionallyifthelexracorewillbe used to run mips16 codethe custom engine must also implement the two mips16 opcodes for mfhi and mflo this is the only situationinwhich acustomengineinstructionwillutilizemips 16 compilers can make use of hi and to implement software multiplies and divides therefore the programmer should ensure thatdatafromcustom engine operationsisretrieved fromhilo as quicklyaspossiblefollowingexecutionofthece opcode regardless of the approach used to implement temporary registers the value of these registers must not be updated until the custom engine instruction has completeditsm stagewithoutanyexceptions 635 timingconsiderations all outputs ofthe custom engine inputs to the lexra core should be source d by registerstoavoidanytimingconvergenceproblems notethatboththeoperandsandtheresultarevalidintheestagethisrestricti on means thatfor single cycle instruction time must be allotted for th registerto output delay for the operands execution of the instruction setup time for the resultand wire propagationdelaytheamountoftimefor instruction ex ecution inlexra inc confidential 67lexra 6stage products users guide revision 50 single cycle is very limited the exact amount is technology dependent but lexra recommends that the time allocated be more than 2025 of the total cycle time this restriction limits single cycle opcodes to simple operations only especiallyinhighfrequencydesigns inputs to the custom engine outputs of the lexra core are generally availabl early enough that they do not need to be immediately registered please consult theproductdatasheetfortheapproximatedelaytimesoncustom enginesignals 64 waveforms waveforms for several common custom engine operations follow some general notesregardingthesewaveforms if signals are valid only during certain pipeline stage eg czrd_gen_s the pipeline stage is appended to the end of the signal thesignalsthatstartwiththestringi_suchasi_ce_stage_mand i_ce_stage_w are not actual interface signals nor do they correspond to signals internal to the lexra core they are used to demonstrate the pipeline stage corresponding to the illustrated custom engine operation for example i_ce_stage_m asserts whenthecustomengineoperationisinitsmstagelexra 6stage products users guide revision 50 68 lexra incconfidentialfigure61 singlecyclecustomengineoperationclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra inc confidential 69lexra 6stage products users guide revision 50 figure62 singlecyclecustomengineoperationwithholdclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra 6stage products users guide revision 50 70 lexra incconfidentialfigure63 twocyclecustomengineoperationwithhaltclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra inc confidential 71lexra 6stage products users guide revision 50 figure64 twocyclecustomengineoperationwithhaltandholdclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra 6stage products users guide revision 50 72 lexra incconfidentialfigure65 twocyclecustomengine operationwithhalt and delayedholdclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra inc confidential 73lexra 6stage products users guide revision 50 figure66 multicyclecustomengineoperationusinghilothemflo returns theresultfromoperationaclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_m2 i_ce_stage_m3 i_ce_stage_w i_ce_reg_lo ce1hold invldp_s_r xcpn_m invld_ma mflo 0000 alexra 6stage products users guide revision 50 74 lexra incconfidentialfigure67 multicyclecustomengineoperationwithearlymfloinduc inghalt conditionclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_m2 i_ce_stage_m3 i_ce_stage_w i_ce_reg_lo ce1hold invldp_s_r xcpn_m invld_ma mflo 0000 alexra inc confidential 75lexra 6stage products users guide revision 50 figure68 customengineoperationwithsstageinvalidateclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_ralexra 6stage products users guide revision 50 76 lexra incconfidentialfigure69 customengineoperationwithsstageexceptionclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold xcpn_malexra inc confidential 77lexra 6stage products users guide revision 50 figure610 customengineoperation withholdandsstageexceptionclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold xcpn_malexra 6stage products users guide revision 50 78 lexra incconfidentialfigure611 customengineoperationwithholdanddelayedsstagee xceptionclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold xcpn_malexra inc confidential 79lexra 6stage products users guide revision 50 figure612 customengine operationwithestageexceptionclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold xcpn_ma alexra 6stage products users guide revision 50 80 lexra incconfidentialfigure613 customengineoperationwithmstageinvalidateclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra inc confidential 81lexra 6stage products users guide revision 50 figure 614 customengineoperationwith holdandmstage invalidateclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra 6stage products users guide revision 50 82 lexra incconfidentialfigure615 customengineoperation withholdanddelayed mstageinvalidateclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_w ce1hold invldp_s_r xcpn_m invld_ma alexra inc confidential 83lexra 6stage products users guide revision 50 figure616 multicyclecustomengineoperationsuppressedbymstagein vali dateclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_m2 i_ce_stage_m3 i_ce_stage_w i_ce_reg_lo ce1hold invldp_s_r xcpn_m invld_ma 0000lexra 6stage products users guide revision 50 84 lexra incconfidentialfigure617 multicyclecustomengineoperationcontinuesifinvalida teoccurs after mstageclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_m2 i_ce_stage_m3 i_ce_stage_w i_ce_reg_lo ce1hold invldp_s_r xcpn_m invld_ma mflo 0000a alexra inc confidential 85lexra 6stage products users guide revision 50 figure618 twomultiplecyclecustomengineoperationswithsecondoper tion bsuppressedbymstageinvalidateclk ce1op_s_r110 instm32_s_r_c1_n ce1_sel_e_r ce1aop_e_r310 ce1bop_e_r310 ce1_res_e310 ce1_halt_e_r i_ce_stage_m i_ce_stage_m2 i_ce_stage_m3 i_ce_stage_w i_ce_reg_lo ce1hold invldp_s_r xcpn_m invld_mab mflo ab ab 0000 alexra 6stage products users guide revision 50 86 lexra incconfidentiallexra inc confidential 87lexra 6stage products users guide revision 50 chapter7 usingthecoprocessorinterfaceci coprocessors can be used to implement long latency operations that re controlled directly by the processor an example of such an operation may be dma transfercoprocessors are also useful to implementcustom logic tha tmust be directly controlled by the processor this chapter discusses some of the designconsiderations when implementing coprocessor to connecttothe lexra corewaveformsareincludedtohelpillustratetheprotocol detailed description of the coprocessor interface signals timing inform ation and pipeline considerations can be found in the product datasheet the appropriate lconfig option settings can be found in the product datasheet and inthelconfig form 71 coprocessoroverview lexra coprocessor can contain up to 32 processor addressable general registers and up to 32 processor addressable control registers each of these registers isup to 32 bitswidetypically you use the general registe rs for loading and storing data on which the coprocessor operates write data to the coprocessors general registers from the cores general registers with the mtcz instruction read data from the coprocessors general registers to the co res general registers with the mfcz instruction load and store the coprocessors general registers directly from main memory with the lwcz and swcz instructions you can load and store the coprocessors control registers from the cores general registers with the ctcz and cfcz instructions respectively you can not loadorstorethecontrolregistersdirectlyfrommainmemorychapter 7lexra 6stage products users guide revision 50 88 lexra incconfidentialthe coprocessor can also provide condition flag to the core the condition fl ag can be bit of control register or logical function of several trol register values test the condition flag with the bczt and bczf instructions the instructionsindicatethattheprogramshouldbranchiftheconditionistruebc zt orfalsebczf 72 coprocessordesignconsiderations listed below are some of the issues to consider when designing lexra coprocessor all coprocessor instructions induce pipeline bubble which is effectively nop in the pipeline this allows the results of coprocessorinstructionstobeavailableinthefollowinginstruction coprocessor cannot stall the processor pipeline coprocessor must return valid read data in the cycle following read request coprocessor must accept write data when it is sent by the coprocessorinterface ifthe processor asserts cz_rhold the coprocessor must continue to hold valid data on its read data output during pipeline hold the coprocessorshouldnotsamplethereadorwriteaddressordataas these signalsmaynot necessarily be valid the coprocessor should sampletheseinputsinthecyclewhen cz_rhold deasserts coprocessor read and write operations occur at different pipeline stages of their corresponding instructions therefore coprocessor reads and writes can happen simultaneously even to the same register the instruction sequence is described in the product datasheet in some instances in which coprocessor read immediately follows coprocessor write operation forwarding path is activated in the coprocessor interface in this instance the coprocessor read will return the same exact data that was written in the earlier write operation in some coprocessor designsthe returned data from the forwarding path may be different than would normally be expected haditbeenreturned from thecoprocessoritselfforexamplesome coprocessors may make the most significant 16 bits read only zero if1sarewrittenintothesebitsthecoprocessorwillalwaysre turn0lexra inc confidential 89lexra 6stage products users guide revision 50 if the forwarding path is activated 1s would be returned instead please refer to the datasheet for the exact instruction sequence whichactivatestheforwardingpath normally the coprocessor need not be aware of exceptions in the core writes occur in the w stage of the pipeline while exceptions occur in the m stage therefore writes are inhibited before they become visible on the interface reads occur in s and stages if the reads are nondestructive multiple reads are acceptable some coprocessors may perform destructive read operations precise exception handling requires that the coprocessor state may not be disturbed by an instruction that is subsequently flushed from the pipeline due to an exception since destructive reads cause the coprocessor to change state the coprocessor design must take steps to restore its state if the read operation is subsequently squashed the product decathlete gives details on the exception signals visible to the coprocessor interface czxcpn_m and czinvld_m and their proper use also exceptions can occur on any instruction due to hardware interrupts or ejtag breakpoint matches therefore it is not possible to assume that coprocessor instructionsthemselveswillnotgenerateanexception lexra provides 3 coprocessor interfaces of these lexra recommends that coprocessor interface 2 cop2 be used if only one is needed the cop1 instructions are used by r3000 class cores that have floating point units fpus lexra has reserved use ofthecop3instructionsforfutureproductslexra 6stage products users guide revision 50 90 lexra incconfidential73 coprocessorwaveforms waveforms for several common coprocessor operations follow some genera l notesregardingthesewaveforms the signals are listed as czrd_gen etc where z is the coprocessor number 1 2 or 3 waveforms and signalling are identicalforall3coprocessorinterfaces the signals czrd_cntx andczwr_cntx are available only with the lx8000andnetvortexproducts if signals are valid only during certain pipeline stage eg czrd_gen_s the pipeline stage is appended to the end of the signal the waveforms show the signals czrd_gen andczwr_gen t h protocolfor czrd_con andczwr_con is identical the signals i_cz_stage_m andi_cz_stage_w are not actual interface signals nor do they correspond to signals internal to the l x r ac r t h r eu s dt od m n s t r t et h ep i p l i n t g correspondingtotheillustratedcoprocessoroperationforexample i_cz_stage_m asserts when the coprocessor operation is in its m stagelexra inc confidential 91lexra 6stage products users guide revision 50 figure71 coprocessorreadclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czinvld_m czxcpn_ma alexra 6stage products users guide revision 50 92 lexra incconfidentialfigure 72 coprocessor read with sstage hold sstage inputs must not be sampled untilczrholddeassertsclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czinvld_m czxcpn_ma alexra inc confidential 93lexra 6stage products users guide revision 50 figure73 coprocessorreadwith estageholdclk czrd_cntx_s20 czrd_addr_s40 czd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czinvld_m czxcpn_ma alexra 6stage products users guide revision 50 94 lexra incconfidentialfigure74 coprocessorreadwith mstageholdclk czrd_cntx_s20 czd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czhold czinvld_m czxcpn_ma alexra inc confidential 95lexra 6stage products users guide revision 50 figure75 coprocessorreadwith wstageholdclk czd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czhold czinvld_m czxcpn_ma alexra 6stage products users guide revision 50 96 lexra incconfidentialfigure76 coprocessorreadwith exception insstageclk czrd_cntx_s20 czrd_addr_s40 czd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra inc confidential 97lexra 6stage products users guide revision 50 figure77 coprocessorreadwith hold and immediateexceptioninsstage noteexception must stillbehonoredthisfigurealong with figure78coprocessor readwith hold anddelayed exception in sstage and figure 79coprocessorread with exceptionfollowing hold in sstageillustrate thatan exception can be raised at anytime during oraftera pipelineholdclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra 6stage products users guide revision 50 98 lexra incconfidentialfigure78 coprocessorreadwith hold and delayedexception in sstage thisfigurealongwithfigure 77coprocessorreadwithholdandimmediateexception insstageandfigure 79coprocessorreadwithexceptionfollowingholdinsst age illustrate thatan exception canberaisedatanytime during or after pipeline holdclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra inc confidential 99lexra 6stage products users guide revision 50 figure79 coprocessorreadwith exception followinghold insstage thisfigurealongwithfigure 77coprocessorreadwithholdandimmediateexception insstageand figure 78coprocessor read withhold and delayed exceptionins stage illustratethat anexception can be raised at any time durin gor after pipeline holdclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra 6stage products users guide revision 50 100 lexra incconfidentialfigure710 coprocessorreadwithexceptioninestageclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czd_data_e310 i_cz_stage_m i_cz_stage_w czhold czxcpn_m czinvld_ma alexra inc confidential 101lexra 6stage products users guide revision 50 figure711 coprocessorreadwith invalidateinmstageclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra 6stage products users guide revision 50 102 lexra incconfidentialfigure712 coprocessorreadwithhold andmstageinvalidateclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra inc confidential 103lexra 6stage products users guide revision 50 figure713 coprocessorreadwithhold anddelayed mstageinvalidateclk czrd_cntx_s20 czrd_addr_s40 czrd_gen_s czrd_data_e310 i_cz_stage_m i_cz_stage_w czrhold czxcpn_m czinvld_ma alexra 6stage products users guide revision 50 104 lexra incconfidentialfigure714 coprocessorwriteoperation figure715 coprocessorwritewithwstageholdclk czwr_cntx_w20 czwr_addr_w40 czwr_gen_w czwr_data_w310 czrhold czxcpn_m czinvld_ma clk czwr_cntx_w20 czwr_addr_w40 czwr_gen_w czwr_data_w310 czrhold czxcpn_m czinvld_ma alexra inc confidential 105lexra6stageproductsuserguide revision 50 chapter8 ejtag ejtag is short for mips ejtag debug solution ejtag provides several hardware features that greatly facilitate debugging of embedded software code the debug hardwareitselfishiddenand doesnotinterfere with normaloperation ofthelexraprocessorinsteadtheuseraccessesthesefeatureswithanejt ag compatibledebuggerandincircuitemulationiceprobe the host computer communicates with the ejtag probe through either seri orparallel portoranethernetconnectiontheprobeinturncommunicateswith the processors ejtag hardware through the included ieee 11491 jtag interface and tap controller using the tap controller the probe shifts da ta to and from the ejtag data and control registers where it can perform the following respondtoprocessorrequests redirectdirectmemoryaccessdmaintosystem memory configuretheejtagcontrollogic enablesinglestepmode configuretheejtagbreakpointregisters enablepctrace ejtag probes are not supplied by lexra they are provided by third party vendors specializing in embedded debug currently embedded performance inc epi and green hills software inc provide ejtag debuggers and probes thatsupportlexraproductschapter 8lexra 6stage products user guide revision 50 106 lexra incconfidentialthe lexra ejtag implementation supports all required features of the 200 ejtag specification to support these features lexra has added support for new debug exception and two new instructions including software debug exception 81 architecturaloverviewhowitworks 811 hierarchyandblockdiagram thelexraejtag implementationconsistsofthefollowinghardwar eblocks jtagtapcontroller lbcinterface ejtagcontrolregisters breakpointmatchlogic coprocessor 0 cop0 support for new debug exception new instructionsandpctrace all the ejtag modules except the cop0 registers reside in the lx1hierarchy seetheblockdiagram belowlexra inc confidential 107lexra6stageproductsuserguide revision 50 812 pinoutrequirements ejtag needs minimum of five1additional pins these are the standard jtag connector pins tdi tdo clk tms and trst refer to lexras product datasheet fortheactualrtlportnames if the pc trace ejtag feature is also required four additional pins are required for singleissue processors dclk and the threebit pc status signal named pcst for dualissue processors seven additional pins are required dclk and two sets of threebit pc status for both scenarios the program counter value i s output serially on the tdo pin that is tpc1 is muxed with tdo and outputs 1 due tomultiple ways toresetthe tapcontrollertrstis anoptionalpinbreakpoint matchlogic andlbc if ejtag control tapto ejtag probepcstatus pctracehandshakingcontrollbclbusdatalbus address debug pc trace supportcoreinstructionaddress instruction data data address datalmi lmi debug match exceptioninsttypepclx0lx1lexra 6stage products user guide revision 50 108 lexra incconfidentialpc trace serially to the ejtag probe for sampling if desired you can add more pctracepinstpcto reducetheserialshifttimeoftheprogramcounter the maximum configuration for pc trace requires 20 additional pins one dclk four3bitpcstoutputs12pinsandseventpcpinstpc82 for maximum flexibility the lexra processor provides warm reset pin rese tn connecting this pin to the ejtag connector lets you reset the processo r and bootfrom the probeejtag controlandmatch logicarenotaffectedthisal lows the debugging of boot code thus the maximum total number of ejtag signal pinsis265forthejtaginterface20forpctraceand1forwarm reset 813 lexrajtagtapcontroller the ejtag probe enables communication between the host and the lexra processor via the tap controller when you choose the ejtag option you must uselexrastap controllersinceitincludesadditional instructionsforshif tingdata inandoutofthe addressanddataregistersand ejtagcontroller in designing you can use lexras tap controller to control internal or boundary scan chains you can choose to send tap state information and the instru ction register jtag_ir contents from the tap controller to the lx2ports where they canbeconnectedtoyourownlogicthetap controllersupportstheuseofupto fourinstructionsdefinedbyyouto controlscanortestlogic 814 cop0supportdebugexceptioninstructionsregisters the lexra processor has cop0 support for the new debug exception two new instructionsandthreenewejtagregisters the debug exception is the highest priority exception after reset any of t he following conditionscancauseanexception debuginterruptsignalfrom probeviathe tap interface singlestep breakpointmatch softwareinstruction softwaredebugbreakpointsdbbp if ejtag control logic indicates that probe is connected the debug exceptio nlexra inc confidential 109lexra6stageproductsuserguide revision 50 handler routine is at 0xff20_0200 since this address is in the probes address space the processor downloads the exception routine from the ejtag probe if noprobeisconnectedtheexceptionhandlerisat 0xbfc0_0200 kseg1 when the processor receives the debug exception it goes into debug mode certain ejtag operations such as reading and writing of probe address space are valid only while the processor is in this mode also the debug exceptio n is masked by the processor in this mode the processor can take the debug exception while the processor is servicing standard exception thereby let ting youdebugexceptionhandlerroutines ejtagrequirestwo newinstructions sdbbp software debug breakpoint causes debug exception its formatis deret debug exception return causes the program to return to the instruction address stored in the depc register this instruction incursadelayslot theprocessoralsosupportsthreenewcop0registers debug register cop0 register 16 register containing control and status information such as the cause of the debug exception singlestepenableandejtagreset depc register cop0 register 17 the debug exception program counter containing the address to which the program returns after executingthederet instruction desave register cop0 register18a generalpurpose registerfor theuseofthedebugexceptionhandler3126 256 50 0111_00 code 11_1111 3126 256 50 0111_00 0x2000 11_1111lexra 6stage products user guide revision 50 110 lexra incconfidential815 hardwarebreakpoints the ejtag block contains two sets of breakpoint registers so you can set breakpoints on the instruction and data busses internal to the processor the ejtag hardware raises the debug exception when match occurs you can set breakpoints on the instruction address the data address and the data value instruction and data breakpoints are checked during reads and writes you can setupto15breakpointsforeachtypeofbreakpoint the breakpoint registers occupy the virtual address space 0xff3x_xxxx u canaddressthem throughboththeejtagprobeandtheprocessorcore 816 singlestepmode singlestep mode is enabled by setting bit in the ejtag debug register in cop0 in singlestep mode the hardware raises debug exception when each instructioncompletes 817 dmacapability indebugmodetheprocessorcanreachtheprobethroughvirtualmemoryspace 0xff2x_xxxx similarly it can reach the breakpoint registers through virtual memory space 0xff3x_xxxx the ejtag control address and data registers resides in the tap controller and are accessible only through the ejtag these registersarenotaccessible bytheprocessor the ejtag probe uses the lbc to be able to read and write system memory this facility allows the user to read and write devices on the system bus th writing and reading of local memory ie dcache dmem is done through process called instruction jamming in this mode the ejtag probe forces the processor to execute loads and stores with the source or destination f the instructionbeinganejtagregister 818 pctrace lexra processors using ejtag if configured can also have realtime program counter trace pc trace capability this feature allows trace log to be created showing the history of the instruction execution this powerful feature can be usedtofinddifficulttocapturesoftwareproblemsandforcodeprofil inglexra inc confidential 111lexra6stageproductsuserguide revision 50 whenpctraceisusedtheprocessoroutputstheprogramcountervalueseriall whenever program flow changes due to branch jump or exception this serial data is then read by an ejtag probe which supports pc trace and displayed in thedebuggerwindow the clock output dclk provides synchronization of the pc trace signals betweentheprocessorandtheejtagprobeyoucanprogram thedclk output frequency to be 1x 05x 033x or 025x the sysclk frequency for single issue processorsand1xor05xthesysclkfordualissueprocessorsthepcstatus indicating whether program flow changed because of branches jumps exceptions or pipeline stalls is displayed with threebit pcst signal the processor outputs one to four sets of pc status signals depending on the lconfig optionejtag_dclk_nsingleissueprocessorsoutputonesetofpc status signals per sysclk while dualissue processors output two sets of pc statuspersysclkasshownin thetablebelow the 32bit program counter value is output serially on the tdo pin the ejtag hardware can also be configured to use additional tpc pins to output the program counter 2 4 or 8 bits at time thereby reducing the number of clock cycles required to output the full pc value the tdo signal represents the l east significant bit of the program counter tpc1 while additional tpc pins tpc82 contain the additional bits if configured in that manner use the lconfig option ejtag_tpc_m to specify the number of pins you want to dedicatetooutputtheprogramcounter to support multiprocessor debugging with daisychaining tap controllers muxing tpc1 with tdo is necessary see section822 multiprocessor debugging afterprogramcontrolflowchangesitcantakeupto32clockcyclestooutp utthe new value of the program counter therefore it is possible for program flow to change while ejtag is still shifting out the previous program counter ejtagejtag_dclk_nsingleissue dclksysclksingleissue ofpcstset sdualissue dclksysclkdualissue ofpcstset s 11 1 1 na n 21 2 2 11 2 31 3 3 na n 41 4 4 12 4lexra 6stage products user guide revision 50 112 lexra incconfidentialhastwooperatingmodesthatdeterminehowtheprogramcountertracebehaves in these situations in realtime mode you truncate the old program counter and output the new program counter instead in nonrealtime mode the processor pipeline stalls while the old program counter output completes in either ca using more pins for the pc trace output reduces the likelihood of stalls or truncations ifyouusehardwarelowoverheadvectoredinterruptsthetpcpinsoutputa4bit code with the most significant bit set to 1 to indicate which one of the eigh t hardware interrupt vectors numbered 8 through 15 has been taken when the exp code is output on the pcst pins for other exceptions the 4bit code wi th themostsignificantbitsetto0hasthestandardvalueonitsthreeleastsigni ficant bits if your ejtag probe vendor does not support this lexra specific extension to 4 bits or ifyou do not use hardware vectored interruptsyou may set the lconfig option ejtag_xv_bits to 3 to disable the 4bit code in that case nly the standard 3bit code is used when the exp code is output if the 4bit code is disabled and hardware vectored interrupt is taken the nmireset 3bit code i s used if the configuration of the processor includes support for mips16 the lconfig optionejtag_pc_isabitisusedto determinethenumberofbitstobe usedfor the pc trace pc that is driven serially on the tpc lines when the jmp code outputsonthepcstpins the ejtag specification states thatonly 31bit pc bits 311 should b output on the tpc lines by systems that are capable of executing code compressed 16bit instructions mips16 isa mode systems that are not capable of executinginmips16modeusea30bitpcbits312somedebugsoftware that uses pc trace information from an ejtag probecan make good use of the isa mode supplied as bit 0 of the pc this parameter supports such debug software byenablinga32bitpcforsystemsthataremips16capableforthesesystems if this parameter is setto yes then bit 0 is the first bit to be output n the tpc linesand has thevalue 1 ifthe targetofthejmp typeinstructionisi n mips16 isa mode and has the value 0 otherwise this usage of bit 0 is consistent with itsuseinthe epcregisterandasthetargetofajrinstruction note this parameter is ignored if the processor configuration is not capable of executing mips16 mode instructions in that case 30bit pc bits 312 is always used for output on the tpc lineslexra inc confidential 113lexra6stageproductsuserguide revision 50 thecorrespondencebetweenthesevaluesandtheactualwidthoftheoutputpc isshowninthet ablebelow thesettingofthisoptionisbasedontheprobeand debuggerbeingusedcheck withtheprobevendorforinformationonhowthisfeatureissupported 82 designingwithejtag 821 singleprocessordebugging when designing system with only one lexra processor follow the diagram belowforejtagconnectionsseeyourejtag probevendorforspecificej tag headerpinoutinformation the warm reset resetn is connected to the ejtag header to allow the processortoboot from the probethusallowing software developerstheabilit yto debugtheirresetvectordependingonthedesignofthesoctheremayalsobe desire to reset peripheral logic when the warm reset is asserted if this is the casewireresetnintoyourcoldresetlogicmips16capable pcwidthbits ejtag_pc_isabit 30bits312 dontcare yes 31bits311 yes 32bits310 yes dclk tpc82tdotpc1trst pcst110clk tdi tmsresetncresetn lx2peripheralperipheralpoweronreset to ejtag probelexra 6stage products user guide revision 50 114 lexra incconfidentialdepending on the setting ofejtag_tpc_m and ejtag_dclk_n in the lconfig form certain bits of the tpc and pcst busses will have to be connected to the ejtag header ejtag_tpc_m controls the number of tpc pins that are used to serially output the pc trace information when change in execution occurs ie jump branch exception at the chip level connect these pins according to thetablebelow the setting of ejtag_dclk_n specifies the number of sets of the 3bit pcst that are required at the chip level connect these signals by following the tabl below an ejtag probe model is provided to check these connections see section828ejtag customerprobemodel 822 multiprocessorde bugging in order to facilitate multiprocessor debugging feature not supported by the ejtag 200specificationlexra worked with embedded performanceincepi to come up with an extended and improved ejtag specification currently epi hastheonlyprobes that are tested and verified to supportthese featurescheck withyourprobevendorforcompliancy to minimize complexity and io resources multiprocessor debugging can be achieved with only single ejtag tap interface this is made possible by dai sy chaining the ejtag tap controllers for each lexra processor this soluti on enables independent simultaneous control of each processor with the same pinoutasthesingleprocessorconfigurationejtag_tpc_m pinstoconnect 1 tdotpc1 2 tpc2tdotpc1 4 tpc42tdotpc1 8 tpc82tdotpc1 ejtag_dclk_n pinstoconnect 1 pcst20 2 pcst50 3 pcst80 4p cst110lexra inc confidential 115lexra6stageproductsuserguide revision 50 in order to allow seamless operation with external probes lexras ejtag tap controller chain must have register stages between it and the external probe any multiplexing of the external pins must be set such that there is direct connectiontoandfromthelexratapcontrollerchainwhile usingejta g as shown in the figure above the tap controllers are daisy chained together suchthatthetdofrom thefirstprocessorisconnectedtothetdiofprocess or2 andthetdoofprocessor2isconnectedtothetdiofprocessor3etcthetdo ft h s tp r c s s ro nt h ec h i sc n n c t dt ot h et d op i ft h ee j t g probe thetapcontrolsignalsclktmsshouldfanoutfromtheirrespectivetople vel pins to each tap controller that isthey should be broadcasted to each tap on thechain thesignaltrstisremovedsothatthechiplevelpincountstaysthesamewhen tdotpc1 is demuxed tpc1 is added to the tpc82 bus resulting in tpc81 with the removal of trst the ejtag probe must be configured to generateatapresetbyassertingtmsfor5clockperiods the demuxing of tdotpc1 is done via the lconfig option jtag_trst_is_tpc the demuxing is necessary to avoid confusing the tap chainwhenoneoftheprocessorsisinpctracemodeandoutputtingdataonitsdclk tpc81tdo pcst110clk tditmsresetncresetn processor3poweronreset to ejtag probeperipheral peripheral toalltaps processor4processor2 processor1 tditdi tdi tdi tdo tdotdo tdolexra 6stage products user guide revision 50 116 lexra incconfidentialtpc pins the ejtag probe will need to be configured to accept the tpc1 signal via the trst wire on its ejtag cable epi configuration this may requireajumperchangeontheprobecabling as shown in the previous figure the pc trace signals from each processor are muxed into single set of pc trace pins that connect to the ejtag probe header various ways to control the mux can be used but it is common to map the mux select to register accessible by the system bus using the debugger software the ejtag probe can dma to the system bus to change the mux selectionfrom oneprocessortoanother due to the single set of pc trace pins going to the ejtag probe only one processorcan be running pctraceatanygiven timebeforeenablingpc trace in the debugger be sure to switch the pc trace mux to the correct processor whilepctraceisbeingcapturedbytheejtagprobethetapchaincanbestill be used by the other debuggers communicating to the other processors on the tap chain 823 clocking there are two clock domains in the ejtag circuitry jtag_clock and sysclk the maximum frequency of jtag_clock is 40mhz check with your probe vendor the two clocks can be asynchronous the ejtag design in theprocessorcontainsthesynchronizingcircuitryneededtopreventme tastability and other problems involving signalscrossing clock domains the ejtag dclk output is synchronized to the sysclk therefore it does not represent an additionalclockdomain the multipleclockdomainshave implicationsforbothgatelevelsim ulationsand scantestingthereforeithelpstoknowwheretheclockdomaincrossingsoccur for gatelevel simulations you usually need to modify the sdf standard delay format for annotating simulation models with timing entries of the cell i nstances below to remove the setuphold time checks this prevents unknow ns from propagatingthroughthesimulation the following registers are the synchronizing flops at the boundaries of each clockdomainlexra inc confidential 117lexra6stageproductsuserguide revision 50 fromjtag_clocktosysclkdomain lx1ejtagejtag_controlecr_probeenreg_d1_r lx1ejtagejtag_controlecr_pcasidreg_d1_r lx1ejtagejtag_controljtagbreakset_toggle2edgetoggle_d0_r lx1ejtagejtag_controlpctraceclr_toggle2edgetoggle_d0_r lx1ejtagejtag_controldmaset_toggle2edgetoggle_d0_r lx1ejtagejtag_controltifset_toggle2edgetoggle_d0_r lx1ejtagejtag_controltofclr_toggle2edgetoggle_d0_r lx1ejtagejtag_controlpraccclr_toggle2edgetoggle_d0_r fromsysclktojtag_clockdomain lx1ejtagejtag_controljtagbreakclr_toggle2edgetoggle_d0_r lx1ejtagejtag_controlpctraceset_toggle2edgetoggle_d0_r lx1ejtagejtag_controldmaclr_toggle2edgetoggle_d0_r lx1ejtagejtag_controltifclr_toggle2edgetoggle_d0_r lx1ejtagejtag_controltofset_toggle2edgetoggle_d0_r lx1ejtagejtag_controlpraccset_toggle2edgetoggle_d0_r 824 usingthelexraejtagtapcontroller the lexra processor includes an ieee 11491 compliant tap controller if you enable ejtag you must use lexras tap controller if you dont implement ejtagyou havetheoption ofusinglexrastapcontroller to enablethe tap controller set the lconfig parameter jtag exportthe tap controller is instantiated as tap in the lx1 module the five jt ag pins tdi tdo tclk trst and tms appear as ports to the lx2 module if you enable ejtagyou can use the tap controller to shiftdata in and outofthe app ropriate ejtagcontrolanddataregisters the tap controller implements the sample bypass and idcode instructionsyoumaywanttousethetap controllertoimplementothe rfunctions like boundary scan control internal scan control and extest to make this possibleyou canoutputkeysignalsfrom thetap controllerstatemac hinetothe lx2 module boundary by setting the lconfig parameter jtag export_extended when you choose this option lconfig brings the pins definedinthetablebelowtothe lx2boundary decode the tap instructions on the jtag_ir bus as follows when you select jtagejtag_extendeditisuptoyoutoimplementthe italicizedinstru ctions new instructions can be defined using one of the four user defined opcodes reservedforthispurposelexra 6stage products user guide revision 50 118 lexra incconfidential825 resetissues using ejtag you have several ways of resetting the processor the jtag tap controllerandtheejtagcontrollogic coldresetusingcresetn warmresetusingresetn tapresetusingtrst softwareresetofcore softwareresetoftapextest 5h00 idcode 5h01 sample 5h02 ejtag_implementation 5h03 intest 5h04 hiz 5h05 clamp 5h06 bypass1 5h07 ejtag_address 5h08 ejtag_data 5h09 ejtag_control 5h0a ejtag_all 5h0b ejtag_pctrace 5h10 userdefinedinstruction0 5h18 userdefinedinstruction0 5h19 userdefinedinstruction0 5h1a userdefinedinstruction0 5h1b bypass 5h1flexra inc confidential 119lexra6stageproductsuserguide revision 50 8251 coldreset the cresetn pin asserts cold reset or poweron resetwhen you assert this pin low the hardware resets the processor tap controller and the ejtag trol logic including the breakpoint match logic the processor begins to fetch instructionsfromlogicaladdress 0xbfc0_0000 afteryoudeassertcresetn since cresetn resetsthe breakpointcontrol logicyou cantuse cresetn alo ne to debug boot code using ejtag for example it will not be possible to set breakpoints or singlestep through the boot code you must use the warm reset forthatpurpose 8252 warmreset the warm reset resetn resets the processor core along with the lmi lbc coprocessors and custom engines the only ejtag registers not affected are the probe_enable and the processor_reset bits connect resetn to the ejtag probe forexample byusingthewarmresetfunctionejtagcangainimmediatecontol of the processor after reset this is done by the ejtag probe asserting the probe_enable bit and then issuing warm reset the ejtag control logic indicatestotheprocessorthattheejtagprobeispresentandthuschangingthe reset vector to 0xff20_0000 instead of the normal 0xbfc0_0000 t h processorwill thendownloadrealbootcodethroughtheejtagprobe 8253 softwarereset there is software reset of the core that behaves like the warm reset enable it bysetting bit16 oftheejtagcontrol registerto1andthensetitto 0todeas sert reset you can also reset the tap controller and the ejtag control logic without resettingeithertheprocessororthebreakpointlogicthethreewaystodoitare asserttrst signalunlessconfiguredformultiprocessordebug set jtag_tms signal to 1 for minimum of five jtag_clock cycles setbit7ofthecop0debugregisterto1lexra 6stage products user guide revision 50 120 lexra incconfidentialdepending on you how you configure the connection of the ejtag probe to the lexra tap controller and whether the implementation supports multiple processorsonasingletapchainvarioussettingsinthedebuggerandprobewill need to be specified these settings define the correct method for the probe to usetoresettheprocessorand accompanyingejtagandtap controller 826 gatecountperbreakpoint the number of gates required per breakpoint varies depending on the type of breakpointyouselectinstructionbreakpointsonlyanalyzeanaddressmatcha nd are the leastcostly in terms of areadata bus breakpoints are the mostcostl as theyhaveboth addressanddatamatching instruction breakpoints are the most useful if you set breakpoint at an instruction address the breakpoint exception occurs before the instruction completes you can set data breakpoints on matching eitheraddressordatathe proces sor checks for breakpoint matches during either cached or uncached data fetches data breakpoints are useful for analyzing loadstore operations the processor takesthebreakpointexceptionafterthesubsequentinstructioncompletes instruction breakpoints require approximately 1k gates per breakpoint data bus breakpointsontheotherhandrequireapproximately2kgatesperbreakpoint 827 memoryaddressing we reserve portionsofthemips addressspace forthe ejtag probe and debug registers the ejtag probe addresses including the debug exception handler occupy the address space from 0xff20_0000 through0xff2f_ffff t h debug control and breakpoint registers occupy the address space from 0xff30_0000 through0xff3f_ffff when the processor is in debug mode thesememorylocationsaremappedto theejtag probespaceand theejtag debug control and breakpoint registers respectively access to these r egisters is validonlywhentheprocessorisindebugmode when the processor is not in debug mode these memory locations default to uncached system memory in kseg2 therefore do notuse these memory locationsforsystemdeviceslexra inc confidential 121lexra6stageproductsuserguide revision 50 828 ejtagcustomerprobemodel to help customers validate the ejtag connections between the processors andthechiplevelpinslexraprovidesanejtagprobemodeltestbench t his model and testbench used with the chip level netlist verify the connectiv ity of all pc trace and tap signals including daisychained tap controllers see the lx_hometestbedreadmeprobecust file that comes with the probe modelfordetailedinformationonhowtouseit 83 implementationissues 831 specialrequirements the pctrace signalspcst and tpccan onlychangewithin 2nswindow from the rising edge of the dclk signal check with the ejtag probe manufacturerforanychangestothisspecification because ofthis tight timing requirement you need to pay special attention to the timing relationship between dclk pcst and tpc including tdo depending ontheconfigurationsynthesisconstraintsandtargetasiclibrary youmayneed tomodifythesynthesizednetlistinordertomeetthistimingrequirem ent this timing requirement is only necessary if dclk is running at its maximum frequencyof100mhzthepctraceprobesamplespcstandtpctdoonthe falling edge of dclk so this timing specifications gives the probe 3 ns f setup and 3ns of hold time on these signals relative to dclk therefore this timing requirementcanberelaxedifdclk isrunningslowerthan100mhz 832 unimplementedfeaturesfromejtagspecification lexras ejtag implementation supports the required features of revision 20 0 oftheejtagspecificationitdoesnotimplementthefollowingoptionalfeat ures complexbreak processorbreak databreakenhancements ejtagmemorymapinnormalmodelexra 6stage products user guide revision 50 122 lexra incconfidential memoryoverlay dmaoperationabortrequest indicationofdebugmodebyhardwaresignal supportforaddressspaceidentifierasidinbreakorpctrace 833 implementedoptionalfeaturesfromejtagspecification the processor implements the following optional feature from revisio n 200 of theejtagspecification debugexceptionvectorinnormalmemory profilingbydmareadofpcasidlexra inc confidential 123lexra 6stage products users guide revision 50 chapter9 testability the lexra cores are designed for testability and complies with dft design for testabilityrulesinadditionthelexracoreincludesvariousoptionstosy nthesize teststructuresin thedesignautomatically youcanconfigurethreeteststructures internalscan amemoryscancollar ramtestaccessinterface the internal scan is based on full scan muxed flipflop scan architecture if selected scan insertion runs automatically during lexra synthesis the scan architectureincludesspecialfeaturestoalloweasyintegrationintoyouras ic an optional memory scan collar provides additional observability and controllability of the lexra core logic in the shadow of the instruction and dat cache rams it allows combinational atpg engine to achieve high fault coveragewithblackboxedmemoriesnotprovidedbylexra the ram test access interface also called the ram bist interface allows external logic such as bist engine to directly access the pins on the rams therebysimplifyingthetestingofcachetagand storerams youconfiguretestabilityjustasyoudoallotheroptionsusingthe lconfig formchapter 9lexra 6stage products users guide revision 50 124 lexra incconfidential91 internalscan 911 scanmethodologyoverview the lexra core includes scripts for scan insertion and atpg scan is in serted using designcompiler xp from synopsys during normal logic synthesis during scan insertion all the scannable flipflops are replaced with their sca n equivalent assuming muxed flipflop architecture lssd architectures are not supportedbythelexraprovidedscripts thereare3possibleapproachestoscananda tpgwiththelexracore scan insertion and atpg performed at the lexra core level using this approach scan insertion is done during the logic synthesis of lexracorethe lconfig optionsforscaninsertionaredescribedin thischapter whilelogicsynthesisisdescribedin detailinchapter11 synthesizing the lexra cpu lexras provided atpg scripts can be used to perform atpg at the lexra core level this approach is recommended for most customers especially when multiple lexra coresareinstantiatedinthedesign scan insertion done at the lexra core level with atpg done at the whole chip level using this approach scan insertion is done during the logic synthesisofthe lexra processorthe lconfig optionsfor scan insertion are described in this chapter while logic synthesis is described in detail in chapter 11 synthesizing the lexra cpu this approach can simplify the overall design flow by reducing the number of steps in the atpg process the customer must still ensure that they maintain complete controllability on the clock and reset pins on the lexra core the full list of signals is shown in section914 internal scan interface please note that it is not possible to use lexras atpg scripts when performing atpg at the chip level also note that if many lexra cores are instantiated performing atpg at the chip level may exceed the capacityoftheatpgedatools whole chip scan insertion and atpg using customer provided scan insertion methodology and scripts using this approach the lexra core is synthesized with scan insertion disabled scan insertion and atpg are performed at higher level of the customers design database this approach can simplify the overall design flow bylexra inc confidential 125lexra 6stage products users guide revision 50 reducing the number of steps in the scan insertion and atpg processes the customer must still ensure that they maintain complete controllability on the clock and reset pins on the lexra core the full list of signals is shown in section914 internal scan interface please note that it is not possible to use lexras scan insertion or atpg scripts when performing scan insertion at the chip level also note that if many lexra cores are instantiated performingscaninsertionoratpgatthechiplevelmayexceedthe capacityofthescantestandatpgedatools when performing scan insertion at the lexra core level the user can specif the numberofscanchainsandthecrossingofclockdomainsusing lconfig when using the lexra provided atpg scripts the user can specifythe degree f controllabilityandobservabilityontheiosignalsofthelexracoretherearetw optionsavailabletotheuser worstcase assumption in which only the scan in scan enable clock reset and test signals are controllable and only the scan out signals are observableunder thisscenario logic between the input signals and their destination flipflop and logic between the source flipflopsandoutputsignalsarenottestable bestcase assumption in which all of the lexra core ios are controllable and observable while this scenario provides the best fault coverage it does require the use of scan isolation collar around the lexra core the design and implementation of this scan collaristheresponsibilityofthecustomer refer to section95 testability statistics for details on testability stat istics under bestandworstcase conditions 912 internalscanoptions youcanconfigurethelexracorewithorwithoutinternalscan the lexra supported scan architecture is full scan muxed flipflop methodology you can specify the number of scan chains to be 124 or 8 the synthesis tool createstheappropriatenumberofscanportsinthertlcodewheretheseports arenot connectedandhooksupthescan chainsinthesynthesisflowlexra 6stage products users guide revision 50 126 lexra incconfidentialyou can also specify whether all flipflops within the same scan chain mus t be in the same clock domain if you allow mixed clocks within scan chain design compilertm inserts lockup latches in the scan chain between clock domains separateclockdomainstypicallyhaveseparateclockdistributiontreeswhil ethe clock skew within the same clock domain can be tightly controlled with care ful designmethodologyitismuchmore difficultto control clockskew between c lock domainsthereforelockuplatcheswhichtypicallyoperateonthenegative edge of the same clock as the leading flipflop are needed to avoid potential clock skewproblemsbetween separateclockdomainsthe lockuplatchhastheeff ect of delaying the transition of the scan output of the leading flipflop by onehalf clock cycle thereby providing sufficient hold time to the scan input of the trailing flipflop multiple clocks per chain give testcompiler more flexibilit to create balanced scan chains resulting in shorter maximum scan chain length and thereforereduced testtime 913lconfig options thefollowing lconfig optionsconfigurethelexracoretohavescanchains tocontrolinsertionoftestabilityportsandscaninsertionduringsynth esisselect scan_insertyesno if you select yes as the scan_insert option scan will be inserted in the core as well as in the optional mac lbc and ejtag if selected and their scan enable and chains will be broughtout to the lx2level turning on scan insertion will also resultinthefollowingpinsbeingexportedoutsideof lx2 if you select as the scan_insert option scan insertion will be disabled during logic synthesis scan signals will appearattheboundaryof lx2sen scanenable scaninputoneperscanchain sout scanoutputoneperscanchain tmode testmodesignallexra inc confidential 127lexra 6stage products users guide revision 50 tocontrolhowmanyscanchainsareinsertedinthelexra core lx2levelset scan_num_chai ns12348 1onescanchainwillbepresentinthecore 2t woscanchainswillbepresentinthecore 3three scanchainswillbepresentinthecore 4fourscan chainswillbepresentin thecore 8eightscanchainswillbepresentinthecore tospecifywhetheryouwillallowmultipleclocksperscanchainset scan_mix_clocksyesno choose yes if you would like to allow the scan chains to cross clockboundaries choose if you do not want scan chains to not cross clock boundaries notethatthelexracorehasupto3clockdomainsdependinguponconfiguration sysclk busclk and jtagclk if you set scan_mix_clocks to you must ensure that you specify enough scan chains with the scan_num_chainsoptions 914 internalscaninterface we designed the lexra processor so that you can get high fault coverage by controllingandobservingasmallsubsetoftheiopinsofthe lx2boundary the worst case fault coverage number as shown in section952 example assumesthatthetesthardwarehasaccessonlytothefollowingpinslexra 6stage products users guide revision 50 128 lexra incconfidentialnisthevaluescan_num_chains selects the tmode or test mode signal is used to configure the lexra core for testability for example in configurations that use an asynchronous rese t the resetsignalsmustbegatedoffbytmodesothattheasynchronousresetcanbe explicitly controlled during atpg otherwise spurious resets could occur during scan chain shifting or scan capture the lexra core uses tmode to gate off asynchronousresetstmodeisalsousedtoenablethememoryscancolla r refertosectionsection973resetdistributionforfurtherinfo rmationregarding resetsignalsandtheirimpactontestinput sysclkf freerunningsystemclockonlypresentifsleepis selected input busclkf freerunningbusclockonlypresentifsleepis selectedandlbc_sync_modeis asynchronous input sysclk gatedsystemclock input busclk gatedbusclockonlypresentiflbc_sync_mode isasynchronous input jtag_clock clockforjtagandejtag input jtag_trst_n reset signalfor jtagandejtag input resetn standardreset signal input cresetn powerupresetsignal input jtag_reset bufferedversionofejtagresetdomain input tap_reset_n bufferedversionoftap resetdomain input reset_d1_r_n bufferedresetforsysclkclockdomain input reset_d1_br_n bufferedresetforbusclkclockdomain input sen scanenable input tmode testmode input sinn10 scaninbus output soutn10 scanoutbuslexra inc confidential 129lexra 6stage products users guide revision 50 915 scanenabledistribution the scan enable signal senis global signalsen requiresproper distributi on and buffering while it is rare for the scan chain to run at the full system clo ck speeditisnecessarytoensurethatthescanenablesignalisproperlybufferedo r the design rule constraints of the asic or cot library will be violat ed the followinglconfig optionscontrolthe bufferinganddistributionofscanenable sen_distglobal local_bufferednone choosing global causes global scan enable signal to be distributed throughout the core buffers will be placed on scan enable except optionally at the lx2module level refer to sen_buffersoptiondescriptionbelowchoosethisoptionif you prefer to use your own clock distribution scheme for scan enable choosing local_buffered causes the scan enable signal to be buffered at each module boundary during scan synthesis choose this option if you prefer to have synthesis buffer the scanenablesignalforyou choose noneonlyifyousetscan_insert tobeno sen_buffers lx2externalnone choosing lx2causes special buffer for scan enable signal to be placed in the lx2module boundary the module will be calledlx2_senbuf it will be necessary to replace this module with your own clock buffer during final synthesis of the lx2 module choose this option only if you choose global for sen_distandyouwishtobufferscanenableinside lx2rather thanatthefullchiplevel choosing external results in buffers being placed inside thelx2module boundaryforscanenablechoosethisoptionif you select local_buffered for scan_dist alternatively you can choose this option if you set scan_dist to global and you wish to buffer scan enable at the full chip level rather thanatthe lx2level choose noneonlyifyousetscan_insert tobenolexra 6stage products users guide revision 50 130 lexra incconfidential92 memoryscancollar 921 scancollaroverview most atpg tools model ram and rom memories as black box elements as resultanycombinatoriallogiconthe ram inputsand outputswill be untestable resultinginlossoffaultcoveragetypicallythecoveragelosscanbe asmuchas 35 dependinguponthe cacheandlocalmemoryconfiguration therefore the lexra core includes an optional memory scan collar which providesthe ability to observethe output of the logiccone connectedto theram inputs and to control the input of the logic cone connected to the ram outputs the structure of the memory scan collar includes an observability flip flop that captures the signals between the logic internal to the lx1module boundary and theraminputsthisflipflopwhichisscannableisalsousedtocontrolt heinput ofa21mux whichresidesbetweenthe ram outputsandthe internal logic cone insidelx1 you can only implement the memory scan collar when you configure the lexra corewithinternalscanthememoryscancollardoesinduceasmallareapenalty andalsoaddsa21muxinthecriticalpathoftheramoutputsthertlinclu des the scan collar in the lx0c between the lx0andlx1levels of the lexra hierarchy the memory scan collar does not provide test access to the ram pins themselves such access is provided by the separate ram bist interface described later in this chapter also the memory scan collar does not prov ide controllability or observability of the inputs and outputs of the lx2module boundary such controllabilitymustbe provided by an external scancollar which isnotprovidedbylexra 922lconfig option to control whether the memory scan collar is included setthe following opti on in lconfig scan_sclyesno yes is only valid if you configure the lexra core for internal scan when you specify scan collar it provides coverage onlexra inc confidential 131lexra 6stage products users guide revision 50 all memories in your configuration note that the scan collar is providedonallofthememoryinterfacesincludingstoreandtag rams it is not possible to individually select which rams are isolatedusingthescancollar bychoosingnonomemoryscancollarwillbeinserted 923 scancollarinterface synthesisautomaticallymergesthescancollarwithexistingscanc hainsforother blocks therefore the scan collar synthesis and atpg is completely tra nsparent tothecustomerthescancollaritselfisnotfaultedduringatpg 93 ramtesting 931 ramtest to assist in the testing of the onchip instruction and data memories speci fic to the lexra core lexra provides an optional ram test port called the ram bist interface the ram bist interface logic resides with the memory scan collar inside t he lx0cmodule the ram test logic is implemented using 21 mux on all of the ram cell inputs one input of the mux is the normal signal between the lexra core and the ram input the other input of the mux is signal external to lx2 whichisdrivenbythecustomerstestlogictheoutputofthemuxgoesdirectl yto the ram input themuxselectisasignalexternal to lx2which is also drivenby the customers test logic the ram outputs are also brought out to the lx2 moduleboundarysothattheexternal testlogiccanobservethem the ramscan be testedina varietyofwaysoncethe bist interface isenabled although the most common method is to use an onchip bist engine lexra doesnotprovideanyspecialvectorstotesttheramnordoeslexraprovidethe bist logic itself users should consult directly with their memory vendor or foundryregardingspecificramtestrequirementsandtheproperimplementation ofanybistlogic selecting the ram bist interface does result in 21 mux to be placed in the critical path on the ram inputs it is safest to test the rams while you hold t he restofthecoreinresetthroughtheassertionofresetnorcresetnlexra 6stage products users guide revision 50 132 lexra incconfidential932lconfig option to specifya module providingaccessfor memory testing in the lexra process or set ram_bist_muxyesno you can set testing forrams whether ornot you have implemented scan chains andscancollars 933 ramtestinterface the pins of the ram test interface are described in detail in the product datasheetatypicalconfiguration wouldincludethefollowingpins the rbc_sel signal is used to control which memory is being tested only one memoryisselectedfortestatanygiventimeasthereisonlyonesetofi nterface pinsonthe lx2boundaryinput rbc_sel70 selectsmemorytotestseebelow input rbc_we writeenabletoselectedmemory input rbc_re readenabletoselectedmemory input rbc_cs chipselecttoselectedmemory input rbc_addr150 addressbitstoselectedmemory input rbc_datawr630 writedatabustoselectedmemory output rbc_datard630 readdatabusfromselectedmemory rbc_sel70 memoryselected 10000000 imem 01000000 dmem 00100000 datacachedatastore 00010000 datacachetagstore 00001000 instructioncachetagstoreset 1 00000100 instructioncachedatastore set1 00000010 instructioncachetagstoreset 0 00000001 instructioncachedatastore set0 00000000 nonerambist inactivelexra inc confidential 133lexra 6stage products users guide revision 50 please note that the above encoding for the rbc_sel pins are subject to change for the latest encoding please refer to the product datasheet the aboveencodingsareprimarilyintendedforillustrativepurposes both the rbc_addr and rbc_sel vector are fixed width matter whatthe user configuration if customer configuration does not implement spec ific memory for instance dmem the behavior of the ram test hardware is undefined when rbc_sel6 is active it should be always assigned logic 0 similarlythe numberofrbc_addrbits in use in each memory dependson the memory configuration the customer is responsible for tying the highorder bits inactive some memories do not use the full complement of data bits and you need to maskthem the bist ate or dma engine needs to write and read the tag bits through rbc_data_wrn1 and rbc_data_rdn1 where n is the width specified intheram requirementsummary for example for the icache tag bits for set 1 indicated by tag store andlru flagin the table the width is 25 bits the bist ate or dma engine needs to write them through rbc_data_wr251 and read them through rbc_data_rd251 formoredetailsonmemoryrequirementsseechapter4localmemory 94 atpgvectors 941 atpgoverview lexra provides atpg scriptstogenerateinternal scan vectorsusing tetramaxtm fromsynopsys to achieve the highest possible fault coverage using the lexra core it is recommended that scan insertion and atpg is done using the provided scripts using the provided scripts also provides the user with modular method of performing dft such methodology can alleviate problems with eda tool capacity that can occur if scan insertion and atpg are done flat at the to p level alsothisapproachalsosimplifiesfaultisolationinproductiont estlexra 6stage products users guide revision 50 134 lexra incconfidentialatpg can be run at either the lx1orlx2module boundaries most users will prefer to run atthe lx2module boundary as that is the natural division between the lexra core and the customer logic in some cases however the ram architectureassumedby lx2maynotmatchthatprovidedbytheramvendorin which case additional customer logic is required inside the ram wrappers for example the only ram available may be asynchronous lexra cores require synchronous rams lexras synthesis scripts do not synthesize logic insid the ram wrappers therefore it will not incorporate any such logic into the scan chaininsuchcasesitisdesirabletoperformatpgatthe lx1moduleboundary insteadoflx2 regardless of the chosen module boundary there are 2 conditions under which atpg may be run best case and worst case under best case conditions controllability and observability of all the module ios are assumed under wors t case conditions minimal controllability and observability is assumed in either case controllability and observability is assumed for those signals li sted in the table in section914 internal scan interface if any of the signals listed in section914 internal scan interface are uncontrollable or unobservabl it will not be possible to use lexras atpg scripts nor will it be possible to generate vectorsthatresultinhighfaultcoverage tosummarizethefourconditionsunderwhichatpgmaybe run lx2_best assumes complete controllability of all of the ios at the lx2 module boundary for such an assumption to be true an external scan collar around all of the module ios must be implementedbythecustomer lx2_worst assumes controllability and observability only for the module ios listed in the table in section914 internal scan interface lx1_best assumes complete controllability of all of the ios at the lx1 module boundary for such an assumption to be true an external scan collar around all of the module ios must be implemented by the customer additionally use of lexras memory scancollarisrequiredrefertosection92memoryscancollarfor informationonthememoryscancollar lx1_worst assumes controllability and observability only for the module ios listed in the table in section914 internal scan interfacelexra inc confidential 135lexra 6stage products users guide revision 50 lexras atpg scripts do not generate test vectors for the rams inside the lx2 moduleboundary 942 atpggenerationprocess togeneratescantestvectorsusingatpgpleaseperform thefollowingsteps 1 edit your lconfig form to configure the lexra core for scan you must set scan_insert option to be yes additionally it isrecommendedthatyousetscan_scltoyes 2 runregressionsimulation 3 synthesize the core to the lx2level orlx1if atpg is to be done at the lx1level lexra recommends that atpg be performedatthe lx2moduleboundary 4 check the synlx2chk_logslog file for errors or warnings if none are present and synthesis results are satisfactoryyoucanproceedtoatpggeneration 5 go to the usertech directory and create file called lib_tmax this file must contain pointer to the standard cell l i b r r yt ob eu s db yt t r m x ne x m p l eo ft h i sf i l ew i l l containthecommand readnetlistpath_to_librarylib_namevnoabortlibrary 6 inthe atpgdirectoryyou willsee4directories lx2_best lx2_worst lx1_best lx1_worst choose the directory that matches the conditions under which you plan torunatpgforexample cdlx2_best 7 the atpg process is makefile driven to create the atpg vectorssimplytype makeatthecommandlinelexra 6stage products users guide revision 50 136 lexra incconfidentialthe atpg process itself is twostep process first testcompilertmis run to check the scan design rules and generate the control files for tetramaxtmt h following filesare produced lx2_atpg_scanorder the scan order file derived from the verilog netlist locatedat synlx2lx2hv lx2_atpgtpf thet estprotocolfileusedbyt etramax lx2_atpgspf thesignalprotocol fileusedbytetramax lx2_atpgautoxp thedetailedlistingofthescanchains lx2_scanscrlog the logfilefromtestcompiler the output of testcompiler will show some scan design rule violations these canbegroupedintotwocat egories nonscanned elements the jtag tap controller is not scanned therefore there will be violations being reported thesecanbeignored falling edge flipflops there are 2 falling edge flipflops in the design one drives the tdo output of the jtag tap controller the second generates the dclk output when pc_trace optioninejtag isselectedbothcanbeignored as rule you can ignore the reported design rule violations unless your f ault coverageafteratpg isunexpectedlylow once testcompiler completes tetramax is run to generate the scan vectors in mostcasesthetwostepswillcompleteinone makestepsoitwillbeinvisibleto the user in some cases the script may abort after running testcompiler if this shouldoccursimplyrun makeagaintoruntetramax thefollowing filesare createdbytetramax lx2_atpg_patv the scan test vectors along with testbed that loads thescanchainwit hthetestpatternsinap arallelformat lexra inc confidential 137lexra 6stage products users guide revision 50 lx2_atpg_pat_sv serial scan testbed that simulates the serial shiftingin and outof the scan chainonly16scan vectorsare simulated serially faultsau faultsud list of untestable and undectectable faults as reportedbytetramax lx2_atpg_tmaxlog logfileproducedbyt et ramax currently the atpg script only produces verilog based test vectors if diff erent vectorformatsaredesiredyoushouldrerunatpg 8 type makeclean attheunixcommandprompttodeletetheold files 9 editthefile lx2_atpg_tmaxscr andlook forthe line exitforce prior to this line add the following command which will create tssi vectors write patterns lx2wglformatwglinternalreplace this will create the file lx2wgl which will create patterns in tssi formatotherformatsinclude ftdl fujitsu tdl stilieee p14501 stil99 ieeep14500 tdl91titdl91 testgensunrise tstl2toshibatstl2 10 rerunthemakefile script makelexra 6stage products users guide revision 50 138 lexra incconfidential95 testabilitystatistics 951 overview the testability results after atpg will vary based on number of factors including producttypelx4189lx4280lx5180lx5280lx8000 productoptionssuchasmacejtaglbcortlb configuration options including cache sizes use of coprocessors or custom engines reset methodology synchronousvsasynchronous testabilityoptionssuchastheoptional memoryscancollar if lexra does the porting and layout of the design lexra may add special enhancements to improve area or performance suchaslatchbased registerfilesortristatemuxes due to the wide variety of options available it is not possible to guarantee specific level of fault coverage for the design most configurations should see at least90faultcoveragewiththemajorityexceeding95faultcoverage 952 example the following example illustrates the fault coverage results for particul ar configuration of the lx4189 again results will vary with configuration th illustratedconfigurationoptionsfromthe lconfig formareshownbelow productlx4189 product_typertl regfile_techflop technology custom testbed_env chip reset_typeasynchronous reset_distglobal sen_dist global sen_buffersexternal sleepyes reset_buffersexternallexra inc confidential 139lexra 6stage products users guide revision 50 clock_buffersexternal ram_clock_buffersno cop1none cop2none cop3none ce0 ce_hl ce1none m16_supportyes mem_line_ordersequential mem_first_worddesired mem_granularitybyte system_interfacelbus lbc_wbuf4 lbc_rbuf 2 lbc_rdbypass yes lbc_sync_mode synchronous line_size 4 icache16k_1 dcache 16k_1 imemnone iromnone imem_is_romno dmemnone lmi_data_granularitybyte lmi_range_sourcehardwired lmi_ram_arbno jtagexport_extended ejtag yes ejtag_inst_break2 ejtag_data_break 1 jtag_trst_is_tpcyes pc_trace export ejtag_dclk_n2 ejtag_tpc_m 1 ejtag_xv_bits4 ejtag_pc_isabityes scan_insertyes scan_mix_clocksyes scan_num_chains8 ram_bist_muxyes the results of this configuration are shown in the table below both with nd withouttheoptionalmemoryscancollararoundthecacheramslexra 6stage products users guide revision 50 140 lexra incconfidentialin this configuration the memory scan collar improves fault coverage by close t 2 it is also apparent that the difference between best and worst case atpg conditionsisonlyabout05forthisconfiguration 953 interpretingatpgresults tetramax produces log file lx2_atpg_tmaxlog the conclusion of this log fileincludesatablethatshowsthetestabilityresultsanexamplelog fileisshown belowfromlx2_worstscan_sclyesconfigurationfrom theabovetable collapsed stuck fault summary report fault class code faults detected dt 137044 detected_by_simulation ds 100860 detected_by_implication di 36184 possibly detected pt 590 atpg_untestablepos_detected ap 590 undetectable ud 2895 undetectableunused uu 2 undetectabletied ut 1389 undetectableblocked ub 778 undetectableredundant ur 726 atpg untestable au 1470 atpg_untestablenot_detected an 1470 not detected nd 3 notobserved 3 total faults 142002 test coverage 9873 fault coverage 9672 atpg effectiveness 10000 somedefinition ofthetermsisinorderlx2_worst lx2_best nomemoryscancollarscan_sclno 951 957 memoryscancollarpresentscan_sclyes 967 974lexra inc confidential 141lexra 6stage products users guide revision 50 detected faults are faults that were detected by the atpg vectorsa detectedfaultisonethatcausesahard1vs0failure duringpatternchecking possibly detected faults are faults that cause an x value to propagatetotheoutput notdetected faults are faultsthatthe atpg tool failed to cover whengeneratingvectorsthisnumberisnormallyverylow undetectable are faults that do not propagate any hard 1 vs 0 failuresduring patterncheckingthesefaults are typicallyeither not controllable eg an input pin tied to vdd are not observableeganunusedoutputofcell untestable faults are faults for which the atpg tool cannot generate known good reference model these faults are commonly caused by nonscannable flipflops or blackbox modelssuchasmemories fault coverage is the ratio of detected and possibly detected faultsto thetotalnumber offaultsin thedesignthisisthemost conservativedefinitionoffaultcoverage test coverage is similar to fault coverage except that the undetectable faults are removed from consideration this definitionislessconservativethanfaultcoverage atpg effectiveness removes all untestable and undetectable faultsfromconsiderationitisusedtoindicatehowcompletethe atpgpatternstestthefaultsthatcouldbedetected customers should refer to the tetramax documentation for detailed descript ions ofthese faultclasses 96 tapcontroller we have designed the lexra tap controllerwhich is required for implementation of the ejtag option and optional in other configurations to act as the only tap controller in chip lexra provides an extended interface that allows the lex ra tap to control your boundary scan register and implement four of your proprietaryinstructionswiththisinterfaceitispossibletouseo neormoreofthe proprietaryinstructionstocontroltheinternalscanchainsinsidethelexr acorelexra 6stage products users guide revision 50 142 lexra incconfidentialsee chapter 8 ejtag for the specification of the interface and relevant lconfig options 97 additionalconsiderationsforresetandclockdistribution like the distribution of scan enable there are several options for the di stribution and buffering of clock and reset while strictly not testability featur the distributionofthesesignalscanaffecttheoverallteststrategy 971 clockdistribution the following pins on the lx2module boundary are used for clocking the lexra core sysclk is the main processor clock if sleep mode is enabled thisclockisgatedbythesleep modesignal sysclkf is the freerunning version of sysclk this pin exists only if sleep mode is enabled the sysclkf domain clocks the wakeup circuitryinsidethesleepmodelogic busclk is the clock for the lbc and is present only if lbc_sync_mode is asynchronous this clock is gated by thesleepmodesignalifsleep modeisenabled busclkf is the freerunning version of busclk this pin exists only if sleep mode is enabled the busclkf domain clocks the wakeup circuitryinsidethesleepmodelogic jtag_clock istheclockforthejtagtapcontrollerandsomeof the ejtag logic it is used only if jtag is set to export or export_extendedthisclockdomain isnotgatedbysleep sl_sleepsys_r is used to indicate that the core has entered sleep mode this signal is synchronized to sysclk and exists only if sleep is set to yeslexra inc confidential 143lexra 6stage products users guide revision 50 sl_sleepbus_br is used to indicate that the core has entered sleep mode this signal is synchronized to busclk and exists only if lbc_sync_mode is asynchronous and sleep is set toyes additionallythefollowing lconfig optionscontrolclockbuffering clock_buffersexternal lx2 settingthisparameter to externalcausesthe clock inputsto propagate directly from the lx2module boundary to the individual clocked elements in the design buffering is done inside the lexra core this is the recommended setting if this option is set and sleep mode is set to yes please refer to section972 sleep and clock distribution for details on properclockdistribution settingthisparameterto lx2will causespecialclockbuffersto be instantiated inside the lexra core these clock buffer modules are used as nonsynthesizable place holders which must be replaced by the technology specific clock buffers availablefrom yourasicorcot vendor most users prefer to control clock distribution at the toplevel of the design s setting this parameter to external will work for most technologies if you s et this parameter to lx2and sleep is not enabled the following clock buffer cells willbeinstantiated lx2_sysclkbufbufferforsysclkdomain lx2_busclkbuf clock buffer for busclk domain only if lbc_sync_modeisasynchronous lx2_jtagclkbufclockbufferforjtag tap controller if however sleep is set to yes the following clock buffers are instantiate d instead lx2_slsysclkbuf buffer for sysclk domain also gates sysclkwithsleepsignallexra 6stage products users guide revision 50 144 lexra incconfidential lx2_slsysclkfbufbufferforsysclkfdomain lx2_slbusclkbuf clock buffer for busclk domain also gates busclk with sleep signal used only if lbc_sync_mode isasynchronous lx2_slbusclkfbuf clock buffer for busclkf domainused only iflbc_sync_modeisasynchronous lx2_jtagclkbufclockbufferforjtag tap controller in addition to the main clock buffers there is an lconfig option for the clock signalsonthecacherams ram_clock_buffersyesno setting this parameter to causes the sysclk signal to route directly to the clock pins on the cache and local memory ramsthisistherecommendedsettingformosttechnologies setting thisparameter to yes will cause special clockbuffersto be placed inside the lmi modules these clock buffer modules are used as nonsynthesizable place holders which must be replaced by the technology specific clock buffers available from yourasicorcot vendor depending upon your configuration if you set ram_clock_buffers to be yesthefollowingclockbufferswillappearinthe lmi_icache module ic_ramclkbufbufferfor instruction cache ram clock used only ificacheisenabledin lconfig iw_ramclkbuf buffer for instruction memory ram clock used only if imemisenabledin lconfig ir_ramclkbuf buffer for instruction rom clock used only if iromisenabledin lconfig depending upon your configuration if you set ram_clock_buffers to be yesthefollowingclockbufferswillappearinthe lmi_dcache modulelexra inc confidential 145lexra 6stage products users guide revision 50 dc_ramclkbuf buffer for data cache ram clock used only if dcacheisenabledin lconfig dw_ramclkbuf buffer for data memory ram clock used only if dmem isenabledin lconfig 972 sleepandclockdistribution ifsleepmodeisenabledclockdistributionrequiresmoreattentionthesleep logicrequiresthatthesysclkandbusclkdomainsbedisabledwhen thecore enters sleep mode however the freerunning clocks sysclkf and busclkfmuststillcontinuetotogglesothattheycanclockthewakeup l ogic if thelconfig option clock_buffers is set to lx2 the gating logic for syclk and busclk domains occurs inside the 2 clock buffer placeholders in lx2lx2_slsysclkbuf andlx2_slbusclkbuf t h ed s i g ft h s ec l c k buffersandthegatinglogicistheresponsibilityoftheuser if thelconfig option clock_buffers is set to external the sleep mode signals sl_sleepsys_r and sl_sleepbus_br will be exported out oflx2theusermustthenusethese2signalstogatetheirincomingclocksthe gatedclocksignalsarethenconnectedtosysclkandthebusclkinputs under circumstances should the free running clocks sysclkf and busclkf be gated with the sleep mode signal or deadlock condition will result these free running clocks are used to clock the wakeup logic inside thelexracore 973 resetdistribution reset of the lexra core is complex there are several domains pins and lconfig optionscontrollingresetand itsdistributionandbuffering there are as many as four reset domains in the lexra core logic clocked by sysclk logic clocked by busclk the ejtag logic clocked by the tap clock andthetapcontrolleritself the tap and ejtag domains are similar when the tap controller is reset it immediately enters the test_logic_reset state the ejtag logic is re set onecycleafterthetapcontrollerhasentereditstest_logic_resetstatelexra 6stage products users guide revision 50 146 lexra incconfidentialthefollowing signalpinson lx2boundarycontrolthe resetofthecore cresetn cold reset also called poweron reset this is the primary reset of the core when asserted all 4 reset domains are reset when the core comes out of reset it will fetch instructions from theresetvector 0xbfc0_0000 resetn warm reset when asserted only the sysclk and busclk domains are reset this reset pin allows an ejtag probe to reset the core without resetting all of the ejtag logic which is useful in software debug also if an ejtag probe is present the core will fetch instructionsfrom the ejtag probe when itcomes out of reset there is also software warm reset which is accessible onlythroughtheejtagprobe jtag_trst_n the jtag tap reset the tap controller can also be reset through the assertion of jtag_tms high for 5 clocks so the use ofthis pin isoptionalfinally there isa software resetofthe tapcontrollerwhichisaccessible onlythroughtheejtagprobe therearethree lconfig optionsthatcontrolreset reset_type asynchronoussynchronous this parameter controls the type of reset flipflop that will be synthesized some asiccot libraries use asynchronous resettable flipflops others use synchronous resettable flops and others use both this setting is normally determined by customer design methodology and library vendor with either setting the reset will be disabled during scan shiftingwhen set to asynchronous the reset will be disabled by tmode whichistypicallyassertedinboth scanshiftandcapturelexra inc confidential 147lexra 6stage products users guide revision 50 reset_dist globallocal_bufferedlocal_sampled whensettoglobalaglobalresetsignalisroutedtothereset pins ofallthe flipflops in all resetdomainsnologicor buffering is placed on the reset signal when set to global the incoming reset signal will not be synchronized to any clock domain it is recommended that the customer synchronize the deassertion of reset to sysclk if this parameter is set to globalandreset_typeissettoasynchronousalso the use of an asynchronous lbc lbc_sync_mode set to asynchronous is not recommended when this parameter issettoglobal when settolocal_bufferedthe incoming resetsignal will be resynchronized to the appropriate clock domain using 2 stage synchronizer and then distributed throughout the rest of the core during synthesis buffers will be placed on the reset signalsastheyentereachmoduleboundary when set to local_sampled the incoming reset signal will be resynchronized to the appropriate clock domain using 2 stage synchronizer and then distributed throughout the rest of thecoretheresetsignalwillthenbereclockedateachmodule boundarythissetting doessimplify thetiming analysisofreset and is recommended for highperformance designs the only disadvantage to this setting is an area penalty and an increase inlatencyduringtheresetsequenceitself the resetdomainsinsidethe lexra corearecomposedoflogical functionsoft he 3 main reset pins plus various software resets controlled by ejtag the reset_dist module generates the actual reset signals based on the states of the resetpinsandsoftwareresetvalues itisthese generatedresetsnotthe3 reset pins listed above that propagate throughout the registers of the designtherefore these generated resets must be buffered the buffering of theseresetsignalsiscontrolledthroughtheuseofthereset_buffe rsoption inlconfiglexra 6stage products users guide revision 50 148 lexra incconfidentialreset_buffersexternal lx2 whenclock_buffersissetto lx2specialclockbufferplaceholdercellsare instantiated inside the lx2module boundary these placeholders must be replacedbyeitherahighdriveclockbufferorbuffertreepriortosynth esisoflx2 theresetbuffersinside lx2areasfollows lx2_rstd1rbuf this buffer distributes reset to the flipflops clocked by sysclk logical combination of cold and warm resetcresetnandresetnalsotriggeredbyejtagsoftware reset lx2_rstd1brbuf this buffer distributes the reset to the flipflops clocked by busclk logical combination of cold and warm resetcresetnandresetnalsotriggeredbyejtagsoftware reset lx2_rstjtagbuf this buffer distributes the reset to selected registers inside ejtag triggered only when tap controller enterstest_logic_resetstate lx2_rsttapbuf this buffer distributes the reset domain to the tap controller triggered by the 3 conditions for tap reset trst_nassertiontms1for5clocksortapsoftwarereset additionally if the reset_dist option is not set to global the followin g bufferswillalsoappear lx2_rstpwrbuf buffered version of the cresetn not synchronized to any clock this domain is used to reset asynchronoushandshaking logicinside the ejtag module and toresetthetap lx2_rstpwrd1buf buffered version of cresetn synchronized tobusclknotusedatthistime if reset_buffers is set to external instead the reset signals are assumed to be buffered externally since the reset signals are generated deep insidethelexracoreitbecomesnecessarytooutputthegeneratedres etsignals fromlx2 and to create input pins for the buffered signals therefore the following signalswillappearatthe lx2moduleboundarylexra inc confidential 149lexra 6stage products users guide revision 50 reset_d1_r_n_o thegeneratedversionoftheprimarycore resetsignalalogicalcombinationofcresetnresetnandthe ejtag software reset synchronized to sysclk an output of lx2 note signal is not synchronized to sysclk if reset_distglobal reset_d1_r_n the buffered version of reset_d1_r_n_o resets core flipflops clocked by sysclkani nputtolx2 reset_d1_br_n_o the generated version of the primary core reset signal logical combination of cresetn resetn and the ejtag software reset synchronized to busclk an output oflx2 note signal is not synchronized to busclk if reset_distglobal reset_d1_br_n thebufferedversionof reset_d1_br_n_o resets core flipflops clocked by busclkaninputto lx2 reset_pwron_c1_n_o the generated version of the poweron reset signal used to reset asynchronous logic inside ejtag and thetap controller logicalequivalent ofcresetn synchronized to sysclkan outputof lx2notesignal isnot presentifreset_distglobal reset_pwron_c1_n thebufferedversionof reset_pwron_c1_n_o not preset if reset_distglobalaninputto lx2 reset_pwron_d1_lr_n_o the generated version of the poweron reset signal used to reset asynchronous logic inside ejtag and thetap controller logicalequivalent ofcresetn synchronized tobusclkanoutputof lx2notesignalisnot presentifreset_distglobal reset_pwron_d1_lr_n the buffered version of reset_pwron_d1_lr_n_o not present if reset_distglobalaninputto lx2 jtag_reset_o generated version of ejtag reset signal logically asserted one cycle after the tap controller enters test_logic_reset state used to reset registers in ejtag clockedbyjtag_clock anoutputof lx2lexra 6stage products users guide revision 50 150 lexra incconfidentialjtag_reset buffered version of jtag_reset an input to lx2 tap_reset_n_o generated version of tap reset asserted whenever jtag_trst_n or cresetn is asserted when tms is asserted high for 5 clock cycles or when the tap software resetisenabledbytheejtag probeanoutput lx2 tap_reset_n buffered version of tap_reset_n_o an inputtolx2 it is the responsibility of the user to ensure proper buffering exists between th generated and buffered versions of the reset signals listed above also lexras atpg scripts assume that the input signals listed above are completely controllable failure to provide controllability of these buffered reset inputs wil l seriouslydegrade testabilitylexra inc confidential 151lexra 6stage products users guide revision 50 chapter10 usingtherundvtregressionenvironment lexrartlreleasesinclude rundvtandtheregressiontestsuitethatlexrauses to validate the processor configuration this test suite is used to verify the customized rtl against specific user configuration of the lexra processor rundvtand the lexra testbed are not designed to be the primary means of validatingthe entireasic applicationnor doesit easilyintegrateperipheralsand bus agents develop software drivers or do other asic development work modifications are permitted however lexra does not support the extended rundvtenvironmentfortheentire asicdevelopment rundvtis software utility automating the simulation of self checking asse mbly and c tests within verilog simulation environment it automates the s imulation of the regression suite using test lists each test list is simple perl script this script calls rundvtsubroutines that associate configuration information with specifictestnamesection104workingwithtestlistsgivesmored etails rundvtallows commands to be given to the simulator many command line options can override rundvts default behavior see section1031 standard commandline options for the most common and useful options and section1032 advanced options for more advanced features thus simulati ng the configured core in the provided testbed with rundvtrequires minimal changes rundvtisordinarilyusedtoverifythe lconfig options withinthelexra testbed after configuration has been chosen additional tests may be written to c heck specific features inthelexracoreasciidebugtracing and gate levelsimulati on are supportedthese are described in section106 generating ascii traces in the simulation outputand section 126 gate level simulationoverall rundvt providesmorethansufficientresourcestorunregressiontestsonthelexra corechapter 10lexra 6stage products users guide revision 50 152 lexra incconfidential101 rundvtsimulators rundvtcurrentlyofferssupportforthefollowingverilogsimulators vcs verilogxl ncverilog lexramayaddsupportforotherpopularverilogsimulatorsinupcomingreleases 102 setup refer to section chapter 1section lexra development environment for rundvtandperlinstallationsetups 103 usingthecommandlineoptions therundvtscript is generic front end for various verilog simulators rundvt automates regression testing by providing complete interface to the stbed verilogmodulethe rundvtcommandlineoptionsincludemanyofthetestbeds features rundvt passes command line options it doesnt recognize to the verilog simulator in the same order that it sees them this allows verilog command line options top level verilog modules or gate level netlists to be passed t the simulator thegetoptlong perl package and rundvtsprocess_verilog_args subroutine parse the rundvtcommandsfor more information on the operation oftheperlpackageseethedocumentationinthe lsdk asspecifiedbelow lsdkdirperlhtmllibgetoptlonghtml therundvtscript contains summary of the options it supports lexra often enhances the script between product revisions so there may be some differences it is recommend that new features are checked by invoking rundvt withthehelpoptionlexra inc confidential 153lexra 6stage products users guide revision 50 rundvthelp rundvtis insensitive to the order of options tests or verilog command line arguments with the exception of help this option must be the first argument afterrundvt rundvthelpoptionstesttestlist verilogcommands 1031 standardcommandlineoptions thissectiondescribes themost common command line options theyareuseful whenusing rundvtasameansofperformingbasicvalidationofthecurrentrtl configuration rundvts mostcommonuse rundvtsupportsthefollowing oftenusedcommandlineoptions rundvttesttestlist one or more tests or test lists files automating the simulation of mul tiple tests may be specified test source code should be placed in the lx_home tests directory assembly test files should have sextension and c programs should have cextension test lists should be placed in the lx_home regression directory and be given plextension see section1033 passing tests to rundvt through the command line for more information on howrundvtknows which command line arguments are tests examples of differenttestarguments rundvtregressionpl rundvtfrom_regressionlogicalsadds rundvtfrom_regressionhellocoption description help displaysusage testtestlist runsthespecifiedtestortestlist verilogcommands commandsoptionsorargumentsexternalto rundvtlexra 6stage products users guide revision 50 154 lexra incconfidentialrundvtverilogcommandstesttestlist rundvtpasses any unknown commands to the verilog simulator by default rundvtusessynopsysvcsforverilogsimulation examples of verilog commands are relative paths plusargs and defines to verilog files in the example below rtl_mon is verilog macro definition and trace_all is aplusarg rundvtregressionpldefinertl_montrace_all rundvtpassesseveralcompileroptionssuchas lvcompilelogmupdatev cliincdir to the vcs compiler by default the only way to change these arguments is to editrundvt for more information on the cli and verilog acc routines see the vcs man pages mupdate causes vcs to create csrcsubdirectory containing makefile and c objects related to the verilog compilation fo r use in incrementalcompile rundvtsimvcsncvvxl testtestlist vcs ncverilog or verilogxl simulators can be specified with rundvtfrom the command line r undvts default verilog simulator is vcs when invoking vcswith rundvtsimvcs is not required noteonlycertainverilogsimulatorspermitplusargs the default verilog simulator arguments assumed by rundvtmight not be correct for your environment if the simulator is not listed above and th default verilog simulator arguments are not correct for the simulator then rundvtmust beeditedtosupportit see regressioninpfiles for more information about the files used in veril og compilationspecificallylx_homeregressioninpfilesoption description vcs synopsysvcs ncv ncverilog vxl verilogxllexra inc confidential 155lexra 6stage products users guide revision 50 1032 advancedoptions lexra developers are the principal users of advanced command line options as described in this section these options are useful in tracing or debugging suspectedproblem inthertl lexra reserves the right to add or remove options for the latest documenta tion onavailablecommandlineoptionsplease usetheonlinehelp rundvthelp rundvtnomaketesttestlist stopsrundvtfromcompilingtestprogramsifthisoptionispresent rundvtwill not call the lx_hometestsmakefile to compile the test programs into testbin asciibinaryfileformat rundvtwillexpecta testbin fileto beavailableinthe lx_hometestsobj directorywhenthisoptionisused rundvtnoruntesttestlist tests are performed this option lists the tests that rundvtwould run it showstheindividualtestfilenameinatestlistfile rundvttoolsstringtesttestlist the test or testlist is compiled and simulated in lexras testbed for s pecific software tool chain other than the specified default the specified defaul t for software compiler and execution target is defined in lx_hometests toolsmk file which is generated by lconfig software tool chains supported areshownbelow softwaretoolchainoptions string description lsdk lexrasoftwaredeveloperskit lsdkmips16 lexrasoftwaredeveloperskitmips16 ghs greenhills ghsmips16 greenhillsmips16lexra 6stage products users guide revision 50 156 lexra incconfidentialrundvtsimasympass2 testtestlist in addition to vcs ncv and vxl the simoption also compiles and simulatestestsinlexras testbed fortheinstruction setsimulators rundvtsimoptsstringtesttestlist thesimopts isusedinconjunctionwith simfornonverilogsimulatorsthe simopts string option passes nonverilog simulator options to the simulator the example below instructs the pass2 simulator to displ ay the log to stdoutinsteadofafile rundvtsimpass2simoptsv2 specificoptionsforthenonverilogsimulatorscanbedisplayedusing rundvthelpsimnonverilogsimulator perlsimifplhelp perlsimifplsimifnonverilogsimulator help rundvttop filetesttestlist overrides the default top level verilog modules and passes one verilog file from the command line to the verilog simulator rundvtuses one pair of verilog top level modules lx_hometestbedtestbedv andlx_homechip topchipv s tt h elconfig option testbed_env to chip in lx_home userlxform file for customized top level simulation specify the top verilogmodulenameusingthe topoptionasintheexamplebelow rundvttopyour_top_filevoption description asym instructionsetsimulationdebugger pass2 cycleaccurateinstructionsetsimulatorlexra inc confidential 157lexra 6stage products users guide revision 50 rundvtnotop filetesttestlist stopsrundvtfrom adding the default top level verilog modules to the verilog simulatorscommandlineandallowsfora differenttoplevelmodule rundvtnotoptop1vtop2vtopnvlogicals rundvtsim_onlytesttestlist when using vcs the default verilog simulator this option stops rundvtfrom calling vcs verilog compiler this feature assumes that the vcs simv executable already exists in the regression directory and runs the simulations usingthisexecutable rundvtgen_onlytesttestlist when using vcs the default verilog simulator this option stops rundvtfrom callingsimv the verilog simulator executable it will only compile this feature calls the vcs simulator without the roption that causes simvto execute immediatelyfollowingasuccessfulcompilation rundvtquiettesttestlist stopsrundvtfromprintingverbosemessagestostandardoutput rundvtnottytesttestlist stopsrundvtfromprintingofnearlyall messagestostandardoutput rundvtcontinuetesttestlist rundvtcalls the verilog simulator many times with different command line options depending on the nature of the tests in test files or test lists if rundvt encounters an error within verilog simulation with specified verilog com mand line options it will finish that simulation with error messages subsequent simulation calls within the rundvt test list will not occur rundvtexits regression testingwithanerrormessagesimilartotheoneshownbelowusing continue optionallows rundvttocontinueandfinish regressiontestingofalltestslexra 6stage products users guide revision 50 158 lexra incconfidentialvcs simulation report time 87026000ps processortime 1110secondsdatastructuresize184mb friapr131149242001 inforundvt resultsofsimulation inforundvt pass1fail0 inforundvt executioncomplete errorrundvt expected2totalpassesbutobserved1 errorrundvt totalpass1 errorrundvt totalfail0 rundvtbatchtesttestlist when using vcs 60 the batch command configures the verilog compilationflagsforfaster simulation byturningoffcli rundvtgatessynxxxxxxhvtesttestlist allows verilog to compile and run gate level simulation all hierarchical references which are made by the verilog testbed are disabled this is done automatically with gates option which invokes nopeeking rundvt gatesadds file called lx_homeusercustomtechgatef which includes the asic cell librariesseesection 126gate level simulation rundvtnopeekingtesttestlist this option is also invoked as part of gates hierarchical references are disabled by removing definelocal_mon in the verilog testbed see section 1061 tracing through hierarchical references rundvtseedtesttestlist sets the random seed number with either the number from the command line or the default time ored with process id rundvtpassesthisnumbertothe verilog testbed where it becomesthe initial seed for 16bitrandom number generator the verilog testbed uses this random number generator during internal lexra testingtorandomizethebehaviorofanicachepreloaderandtodefinerandom valuesforexported lconfig optionslexra inc confidential 159lexra 6stage products users guide revision 50 rundvtnopstest causes the test object to be loaded into the memory model with 0 to 3 words of offsetfromthe textsegment default0 some assembly tests can be arbitrarilyrelocated withoutthe lsdk tool chain re linking them the nopsfeature allows internal lexra testing of assembly tests the verilog testbed loads the test at four different word offsets causing cac he linecrossingsbetweeneveryinstructionandthe next the tool chain must relink all c programs and assembly programs that use the jaljalrorjinstructionorthelapseudoinstructionaswellasanyteststha t arenotrelocatabletorelocatethemthereforeforthesetypesoftest sonlyuse zeronopstoavoidrecompilation rundvtexact_nopstesttestlist sets the number of nops in front of the test object the number of nops can be specifiedfrom 0to3thetestonlyrunsonceoffsetinmemorybynops rundvtpmontest boots pmon and runs tests as pmon client applications the verilog testbed loads the pmon object into system memory at virtual address 0xbfc0_0000 overwritingthedefaultinitialization code trap_bev1s andreset_pgms rundvtpmonpath pathtest allows to load pmon from different directory location other than the default defaultlsdkdirpmonbuildlx4x80upmonbin rundvtload filehexaddress test loads an ascii binary file into the memory model at the virtual address the testbed loads this file into the memory model in the verilog testbed usi ng the readmemb verilogsystemcalllexra 6stage products users guide revision 50 160 lexra incconfidentialrundvt compiles the assembly program using the lx_hometests makefile it puts the resulting asciibinary file into lx_hometestsobj in the example below file named myfiles exists in the testsdirectory and hasbeencompiled rundvtload myfilebin0x00500000 rundvtsethex addresshexdatatesttestlist setsawordofdataatthevirtualaddressspecifiedintheverilogtestbedmemory model rundvtscriptasciibinaryfile testtestlist loads pmon script file into system memory at virtual address 0xa040_0000 thisfeaturecanbeusedtwoways if the pmon script has been compiled into an asciibinary provide thefullpathofthecompiled asciibinaryscriptfile thelx_hometestsmakefile observes that the ascii binary script file already exists and does not compile the file the makefile appends 32 bits of zerostothecompiledasciibinaryscriptfiletheyserveasastring terminator img2binmyscriptscr myscriptbin echo00000000000000000000000000000000myscriptbin rundvtpmonscriptmyscriptbin put the pmon script in the lx_hometestspmonusr directory andletrundvtconvertit rundvtconverts the pmon script file into an ascii binary rundvtcalls lx_hometestsmakefile from the lx_hometestsobj directory thereforemakethepathtothefileapathrelativetothe lx_hometestsobj directory the pmon script file must be placed in the lx_hometestspmonusr directory for example lx_hometestspmonusrbpscriptscr rundvtexpects the target to be the compiled pmon script file instead of the source rundvtpmonscriptpmonusrbpscriptbinlexra inc confidential 161lexra 6stage products users guide revision 50 rundvttrap_bev1filetesttestlist specifiesafileforthetestbedtoloadat0xbfc0_0100forthebev1 trapha ndler other than the default trap bev1 file default lx_hometestssystem trap_bev1s rundvttrap_bev0filetesttestlist specifies file for the testbed to load at 0x8000_0000 for the bev0 tra p handler other than the default trap bev0 file default lx_hometestssystem trap_bev0s rundvtresetfiletesttestlist specifiesafileforthetestbedtoloadat0xbfc0_0000 theboot vectorotherthat the default reset program default lx_hometestssystem reset_pgms rundvtwatchhexphysicaladdress watch_stoptest definertl_mon thewatchoption causesthe lx_hometestbedlmonv module to watch for aphysical instruction address on the internal processor bus lbusorcbus when the module seesthe addressiteither enablesasciitracesif the rundvt watch_trace 0xff is present or calls stopif therundvtoption watch_stop ispresentandprintsamessage thewatch_stop option is used in conjunction with watch hex address when invoked and when the address in simulation matches hex address then the testbed will call the stopverilog system call default is stop theseoptionsrequires definertlmon option rundvtwatch0x40400038watch_stop testdefinertl_mon databasetagzl 348 processorid 0000c401 instaddrwatchpoint 0x40400038detectedenablingtrace stopattime19357500scopetopsyslx_baselx2lmonwlmoninst_monitorfile testbed lmonvline1500 cli_0lexra 6stage products users guide revision 50 162 lexra incconfidentialrundvtwatch_maskhex testdefinertl_mon the default mask 0xffffffff is logically anded with the current address this allow the testbed to watch only for the hex address clearing any mask bit s allows the testbed to watch for range of addresses for example the address rangewatchformask0xffff0000isfrom 0xffff0000to0xffffffff rundvt watch 0x40400038 watch_mask 0xfffffff0 watch_stop test definertl_mon instaddrwatchpoint 0x40400030detectedenablingtrace stopattime14457500scopetopsyslx_baselx2lmonwlmoninst_monitorfile testbed lmonvline1500 cli_0 instaddrwatchpoint 0x40400034detectedenablingtrace stopattime14467500scopetopsyslx_baselx2lmonwlmoninst_monitorfile testbed lmonvline1500 cli_1 instaddrwatchpoint 0x40400030detectedenablingtrace stopattime19337500scopetopsyslx_baselx2lmonwlmoninst_monitorfile testbed lmonvline1500 rundvtwatch_tracehextestdefinertl_mon thewatch_trace hex is used in conjunction with watch hex address whenthe verilog simulatorreachesa watchpointlmon overwrites the monpathmontrace verilogvariablewhichenablestheasciitrace 0xff is equivalent to trace_all for more information on ascii traces see section106generatingasciitracesinthesimulationoutput rundvtwatch0x40400038watch_trace 0xfftestdefinertl_mon databasetagzl 348 processorid 0000c401 instaddrwatchpoint 0x40400038detectedenablingtrace 19362500m000 data0x404087b4wr c1111mem hit0x00000000 19367500m000 inst 0x4040003crd c1111mem hit0x0043082a 19372500m000 data0x404087b8wr c1111mem hit0x00000000 19372500m000 sys0x404087b0wr c1111mem 0x00000000 rundvtttexthex testtestlist set the text segment code location make the hex address logicaladdress default 0x0040_0000lexra inc confidential 163lexra 6stage products users guide revision 50 rundvtdrambasehexaddresstestdefinertl_mon overrides the dmem settings lconfig normally sets rundvtinstructs the testbed to use hierarchical assignments to set the dmem base address which mustbeaphysicaladdress rundvtdrambase0x4040800test definertl_mon rundvtirambase hexaddresstesttestlist setsthe imem baseaddressthehexaddressmustbeaphysicaladdress rundvtload_imemtestdefinertl_mon instruction data is directly loaded into the local instruction memor from main memory at simulation start the test program does not have to wait for the simulatortoloadinstructiondatafrommainmemorytoimemthroughth esystem busthisoptionworksonlywithrtlmodelsinlexrastestbench rundvtfrom_regressiontest this option ensures that the test being simulated is from the regressionpl file whichcontains thelistofvalidtests rundvtfrom_regressionldst_stresss rundvtfromtesttestlist allows subset of tests in the testlist to be simulated from testlist the simulator will start from the test file as specifiedthe last test can be specified withto test ifthelasttestis notspecifiedthenthe simulatorwillruntests untilthelasttestin thetestlistinthe rundvtlogfilelistofteststh atareskippedis displayed rundvtfromldst_stresssregressionpl rundvtlog irundvt skipping loadstore219becauseitisbeforefromstarting p ointlexra 6stage products users guide revision 50 164 lexra incconfidentialrundvttotesttestlist allows subset of tests in the testlist to be simulated from testlist the simulator will start from the beginning of the test listand end when i t reaches the end of test as specified with to the first test can be specified with from testi ntherundvtlogfilelist of teststhatareskippedisdisplayed rundvttoldst_stress5dsregressionpl rundvtlog irundvt skipping ldst_segments231becauseitisafterto ending point rundvtfromtesttotesttestlist combinationofboth fromandtomaybeusedtorunasubsetofthetestlist rundvtfromldst_stressstoldst_stress5ds regressionpl rundvtfromtestlist allows subset of tests in the testlist to be simulated from testlist the simulatorwillstartfromtheasspecifiedthelasttestcanbespeci fiedwithto ifthelastisnotspecifiedthenthe simulatorwill runtestsuntil the lasttest in the testlist before using this option the testlist must have been simulated at least once the for the corresponding test from the testlist is found in the rundvtlog rundvtlog irundvt run_test ldst_stresss 2210x00400000nops3 irundvt run_test ldst_stress2s 2220x00400000nops3 irundvt run_test ldst_stress3s 2230x00400000nops3 irundvt run_test ldst_stress4s 2240x00400000nops3 irundvt run_test ldst_stress5as2250x00400000nops3 irundvt run_test ldst_stress5bs2260x00400000nops3 irundvt run_test ldst_stress5cs2270x00400000nops3 irundvt run_test ldst_stress5ds2280x00400000nops3lexra inc confidential 165lexra 6stage products users guide revision 50 rundvttotestlist allows subset of tests in the testlist to be simulated from testlist the simulator will start from the beginning of the test listand end when i t reaches the end of as specified with to the first test can be specified with from beforeusing this optionthe testlist musthave been simulated atleastonce the forthecorrespondingtestfromthetestlistisfound intherundvtlog rundvtfrom221to 228regressionpl 1033 passingteststorundvtthroughthecommandline it is sometimes necessary to use tests outside of lexras regression suite doing so is an advanced option if necessary writing and adding new tests to the standardregressionsuiteisallowed in examining its own arguments rundvtmust be able to differentiate among tests test lists rundvtoptions and similar commandline options it compares its arguments against the supported options then compares all other arguments to one of assembly tests c programs or lists of tests finally it passe s all unrecognizedargumentstothetargetsimulatorascommandlineoptions forexample rundvtregressionseed8228definertl_montrace_all rundvtfirststripsawaytheoptionsitknowsabout seed8228 rundvtrecognizes the type of file by its extension s assembly program ccprogramor plrundvttestlistifthe file exists rundvthandlesit appropriately rundvtchecksalltheoptionsagainstthefileswithintheregressionandthetests directoriesifacorrespondingfiledoesnotexist rundvtpassestheoptiontothe verilogsimulator forexample rundvtregressionlexra 6stage products users guide revision 50 166 lexra incconfidentialit tries the three extensions pl s c and finds lx_homeregression regressionpl regressionpl is test list namely the comprehensive list of all the tests underthelx_homeregression directory forexample rundvtdefinertl_mon ittriesthethreeextensionsplscandfailstofind lx_homeregressiondefinertl_monpl lx_hometestsdefinertl_monc lx_hometestsdefinertl_mons thenrundvtpassesdefinertlmon directly to the verilog simulator as commandline option forexample rundvttrace_all ittriesthethreeextensionandfailstofind lx_homeregressiontrace_allpl lx_hometeststrace_allc lx_hometeststrace_alls thenrundvt passestrace_all directly to the verilog simulator as commandlineoption ifrundvtencounters test list like regressionpl it executes the file as perl programusingthe require directive ifrundvtidentifies an option as standalone test like logicals rundvt triestocall maketocompiletheassemblyand cprograms cdtestsobjoptlsdkbinmakefmakefilelogicalbinlexra inc confidential 167lexra 6stage products users guide revision 50 rundvtcan detectasciibinary filesatthe rundvtc omm an dl in t he bin file path should be specified so that rundvt c nl dt h ef i l ei n t ot h ev r i l g simulator rundvthomeyour_workfoobin rundvtyour_workfoobin lexra does not recommend using relative path to an ascii binary file on rundvt command line rundvtcalls thelx_hometestsmakefile from within the lx_hometestsobj directory referencing the directory where testsarelocatedforexample rundvtmyfilesfoobin themake programreports makenothingtobedoneformyfilesfoobin if the binary file does not exist relative to the lx_hometestsobj directory rundvtreturnsthefollowingerror cdtestsobjoptlsdkbinmakefmakefile foobin makenoruletomaketargetfoobin stop etestloadercallmakecompilehasfailed512 thenomake optionstopsthecalltomake rundvtnomakefoobin 104 workingwithtestlists rundvtprovides single interface for running test lists andor tests at the rundvtcommand line before running tests within test list rundvtwill determineifthetestmatchestheconfigurationrestrictionsspecifie dinthetestlist against the current configuration contained within lx_homeinclude lxr_symbolsvh when tests are added to the rundvtcommand line they will always belexra 6stage products users guide revision 50 168 lexra incconfidentialexecuted regardless of the configuration this presents the opportunity for regression tests to fail falsely when they do not match the current configuration refer to the lx_homeregressionregressionpl test list to learn the configuration dependencies of regression tests to prevent false failures see section1042 running tests at the rundvt command line for further information 1041 testlistfileformat test list file contains perl code invoking the run_test subroutine that the rundvtscript defines testlist file can only contain legal perl code if th ere aresyntaxerrorsinatestlistfile rundvtfailswithsyntaxerrors irundvtfoundtestlisttestlist testlistpl semicolonseemstobemissingattestlistline syntaxerrorattestlistlinenearrun_test you can put any legal perl code in test list the most common command is therun_test subroutine run_testtestnamenopslconfigverilogargstestbase the first four arguments must be used the testbase is optional as well as any newerargumentsinthe run_test list testname the name of the test with the source file extension s or c the makefile compiles tests into the lx_hometestsobj directory it may mangle the binaryfilenamestoletonetestproducemultiplebinaries nops the nops argument to run_test sets the number of times to loop through the testwithinsertionof0to3nopsatthebeginningofthecodethiscausesth etest tostartatdifferentmemoryoffsetsanotherperlsubroutine run_test_raw letsthetestrunonlyoncewiththespecifiednumberofnopsthisissim ilarto exact_nopslexra inc confidential 169lexra 6stage products users guide revision 50 lconfig if the test depends on one specific configuration simple expression can be composed to prevent the test from running in an unsupported configuration the operator precedence from highest to lowest is and using these operatorsrequiretheargumentstobeenclosedbetweendouble quotes run_testhelloc 0notnvxce0ce_macce0ce_macd x0or1 verilogoptions each test can be set to run in its required specific configurations the veril og options field contains string with any number of verilog command line opt ions eachuniquestringmaycause additionalverilogcompilations definecld_busclkratio3to1trace_all testbaseoptional this argument specifies the text segment that determines where the programisloadedinsystemmemoryleavingitblankindicatesthet estdoesnot require relinking to be relocatedifitrequireslinking then place recompile in thisargumentcprogramsmustalwaysberecompiled 1042 runningtestsatthe rundvtcommandline lexra bundles the lx_homeregressionregressionpl test list with the regression suite to automate the simulation most regression tests depend n specificlconfig configuration rundvtruns tests that match the configuration inthelx_homeincludelxr_symbolsvh fileoption description cexce_dvt applythistestifceisce_dvt cexce_dvtcece_mac applythistestifeitherce_dvtorce_mac cexce_dvtcece_mac applythistestifce_dvtandnotce_maclexra 6stage products users guide revision 50 170 lexra incconfidentialwhen running tests from the rundvt command line there are such guarantee the pm3_icnts assembly regression test is designed to test some features ofthe coprocessor performance counters this can onl be run if thelconfig formselectedcoptc3onthecoprocessor3portinadditionnops hast obesett ozero run_testpm3_icnts0cop3coptc3 ifusingrundvt pm3_icnts onthecommandlineitrunsthetestregardlessof theconfigurationwhichmightresultinfalsefailuresorfalsepassesif testsareto be executed from the command line use the from_regression option this will allow rundvtto check against lx_homeincludelxr_symbols to ensure that the tests are valid for the particular lconfig option and to ru n the test properly 105 simulationflow therundvtscript provides communication mechanism between perl and the verilog simulation environment without using pli rundvt encodes commands and puts them in the lx_homeregressiontestloaderhex file which the lx_home testbedtestbedv module interprets during simulation this provides robust oneway communication between perl and verilog the commands in testloaderhex appear in verilog format in the testloadervh file thetestloaderhex file is read into memory array within the lx_hometestbedtestbedv module if rundvtcomposes commands which exceed the bounds of the memoryarray errors will result the following verilog code fragment is in lx_hometestbedtestbedv i t defines memory test list which the testbed loads with lx_home testloaderhex regtest_length1test_listmaxtests1 106 generatingasciitracesinthesimulationoutput the lexra bus monitor module lx_hometestbedlmonv can be enabled during verilog simulation to generate ascii debug traces the lx_home testbedtestbedv determines which signals to trace with verilog plusargs subset of traces requires that the verilog macro rtl_mon be defined thereforeonlyusethem forrtlsimulationlexra inc confidential 171lexra 6stage products users guide revision 50 monpathmontracemontraceitestplusargstrace_inst trace_all thetrace_all option enables the tracing of the internal icache bus the internaldcachebusandthesystembusthesetracesareenabledindividuall with the following plusargs trace_inst trace_data and trace_system hereisasampleoutputgeneratedbythe trace_all option 13620000m000data0xbfa00020wrc1111mem hit0x ffffffff 13630000m000inst0x00400018rdc1111mem hit0x3442aaaa 13657800m000sys0x1fa00020wrc1111mem 0x9fa020e8 13760000m000inst0x0040001crdc1111mem hit0x3c03 ffff 13770000m000inst0x00400020rdc1111memmiss0xad00000c thefollowing tabledefinesthelabelsusedintheexample type label description time decimalnumber timestampproducedbythetimeverilogsyste m task idtag identifieswhichprocessorisbeingtracedina multiprocessorsystem amultiprocessorsystem requirestestbed_envexample m000 processorm00thread0 notethreadisalways0insinglethreadprocessor m103 processorm10thread3 tracedomain identifieswhichfieldistraced inst instructioncachebus data datacachebus sys lexrasystem bus address hexadecimal numberifthetracedomainisinst ordatathenthisfieldis alogicaladdress otherwiseitisaphysicaladdress operation rd read wr write cachetype c operationstocachedaddressspaces u operationstouncachedaddressspacelexra 6stage products users guide revision 50 172 lexra incconfidentialtrace_pipemdefinertl_mon this option traces the mstage of the pipeline and disassembles the ins tructions inpipeainsuperscalerproductspipebisalsodisplayed singleissueprocessor 13787500m000pipeamwretire0x9fa0211037bd0008orispspx0008 13792500m000pipeamwretire0x9fa021148fbd0000 lwspx0000sp 13867500m000pipeamwretire0x9fa021183c1cbfa0 luigp0xbfa0 13872500m000pipeamwretire0x9fa0211c379c000c origpgpx000c 13877500m000pipeamwretire0x9fa021208f9c0000 lwgpx0000gp 13917500m000pipeamwretire0x9fa0212400000000sll00x00bytelanes 1111 busoperationsaccessingafullword 000100100011 010010001100busoperationsaccessingbytesorhalfwords memory cachedoruncachedtransactioncorrespondingto addressesinsystemmemory ram transactionmappingtoalocaldramoriram memory rom transactionmappingtoalocalirammemorywhen usingthelconfigoptioniram_is_romyes status hit indicatesthatthedatarequestedbytheinstructionis inthecacheorthattheinstructionisperformingan uncachedtransaction miss thecachelinecorrespondingtotherequested addressisnotpresentininstructionordatacache forwritetransactionsthedataiswrittentosystem memory validonlyforsystembustransactions forwritetransactionsalwaysappears forreadtransactions meansdataisinvalidand theprocessordisregardsit rdy thedataisvalidandthelbc isreadingorwritingit data hexadecimal numberdataonthebustype label descriptionlexra inc confidential 173lexra 6stage products users guide revision 50 in the sample output below note that pairs of instructions are grouped using underscores _ the output below shows program order rather than one pipe alwaysfirst dual issueprocessor 11580000m000pipebmwnotvld 11580000m000pipeamw retire_0x00400004_34210020oriatat0x0020 11590000m000pipeamw dualretire0x00400008ac3f0000 sw rax0000at 11590000m000pipebmwdualretire0x0040000c_240a0001 addiut200x0001 11600000m000pipebmwretire0x00400010 254a0001addiut2t20x0001 11600000m000pipeamwnotvld 11730000m000pipebmwnotvld 11730000m000pipeamwretire0x00400014_254a0001addiut2t20x0001 11740000m000pipebmwdualretire0x00400018254a0001 addiut2t20x0001 11740000m000pipea_mwdualretire0x0040001c_10000001 beq 000x0001 11750000m000pipeamwsquash0x004000200002000dbreak00v0 11750000m000pipeb_mwnotvld thefollowingtabledefinesthelabelsusedinbothexamples type label description time decimalnumber thetimestampproducedbythetimeverilog systemtask idtag identifieswhichprocessorisbeingtracedina multiprocessorsystem amultiprocessorsystem requirestestbed_envexample m000 processorm00thread0 notethreadisalways0insinglethreadprocessor m103 processorm10thread3 pipeline indicateswhichpilelineisexecutingwhatinstruction the_characterdenotesgroupingwiththeprevious instructionieexecutedinparallel pipea executesloadstorecop0andaluopcodes pipeb executesmultdivandaluopcodeslexra 6stage products users guide revision 50 174 lexra incconfidentialtrace_exceptiondefinertl_mon the processor triggers this trace output when it takes an exception the current state of the cop0 registers are displayed in hexadecimal in addition co unt of allexceptionsisdisplayedat theendofsimulation 6390000m000xcpn0xbfc00180epc0x0040001ccause0x00000024 status0x00400000 countofexceptions int exccode00 bev0 0bev1 0 mod exccode04 bev0 0bev1 1 tlbl exccode08 bev0 0bev1 11 tlbs exccode0c bev0 0bev1 9 adel exccode10 bev0 0bev1 0code notvld theindicatedpipedoesnotcontainavalid instructioninvalidinstructionsaregeneratedbythe corewheneverthecodebeingexecuteddictatesthat bothpipescannotexecuteinparallelbecauseof datadependenciesetc retire theinstructionintheindicatedpipecompleteswhile thereisaninvalidinstructionintheotherpipe squash theinstructionintheindicatedpipeissquashed whilethereisaninvalidinstructionintheotherpipe dualretire theinstructionsinbothpipescompletesuccessfully halfretire theindicatedpipehasitsinstructioncompleted whiletheotherpipeincursahalfsquash the indicatedpipecarriestheolderinstruction halfsquash theindicatedpipehasitsinstructioninvalidated squashedbyanexception theotherpipeincurs ahalfretiretheindicatedpipecarriesthe newerinstruction dualsquash bothpipeshavetheircurrentinstructioninvalidated becauseanexceptionistakenbytheolderpipe address hexadecimal numberinstructionlogicaladdressprogramcounter data hexadecimal numberinstructiondataopcode instruction instruction disassembledinstructionandoperandstype label descriptionlexra inc confidential 175lexra 6stage products users guide revision 50 ades exccode14 bev0 0bev1 0 sys exccode20 bev0 0bev1 0 bp exccode24 bev0 0bev1 0 ri exccode28 bev0 0bev1 0 ov exccode30 bev0 0bev1 27 tlbl exccode08 utl0 0utl1 0 tlbs exccode0c utl0 0utl1 0 trace_regwrite definertl_mon traces changes to register state used in combination with trace_pipem providesoneofmostusedfeaturesofasourcecodedebugger m000gpr 130w1a 10 t2 wr 0x55555555 m000gpr 131w1a 20 s4wr 0x00001001 m000gpr 132w1a 11 t3wr 0xaaaaaaaa m000gpr 133w1a 20 s4wr 0x00001002 m000gpr 134w1a 12 t4 wr 0x00000000 m000gpr 135w1a 20 s4wr 0x00001003 m000gpr 136w1a 13 t5 wr 0x00000000 m000gpr 137w1a 20 s4wr 0x00001004 m000gpr 138w1a 10 t2 wr 0x55555555 thefollowing tabledefinesthelabelsusedintheexample type label description idtag identifieswhichprocessorisbeingtracedina multiprocessorsystem amultiprocessorsystem requirestestbed_envexample m000 processorm00thread0 notethreadisalways0insinglethreadprocessor m103 processorm10thread3 gpr generalpurposeregister portactivity w1a or w2awritetoport1or2fromlega registernumber hexadecimal identifiestheregisternumberbeingaddressed registername t2s4etc identifiestheregisterbyitsconventionalmnemonic namebeingaccessed operation wr write data hexadecimal writedatalexra 6stage products users guide revision 50 176 lexra incconfidentialtrace_memread state ofthememorymodel aretracedwith trace_memread plusarg m mem 0x1fa02020 rd 0xad00000c m mem 0x1fa02024 rd 0xad000010 m mem 0x1fa02028 rd 0xad000014 m mem 0x1fa0202c rd 0x3c08bfa0 trace_memwritedefinertl_mon changes in the state of the memory model are traced with trace_memwrite plusarg m mem 0x1fa00004 wr 0x9fa02000 m mem 0x1fa00000 wr 0x00400000 m mem 0x1fa00460 wr 0x00000010 m mem 0x1fa0000c wr 0x00600000 trace_lbus traces the lbus activities including master and target devices addr ess data andcommands 10640100bus0lbusselstall 10645100bus0lbuslastdata target0010 data0x00000000 10800100bus0lbusaddr master0001 addr0x1fa02120 cmd0x30 10805100bus0lbusselstall 10810100bus0lbusdata target0010 data0x25080008 10815100bus0lbusdata target0010 data0x3c08bfa0 10820100bus0lbusdata target0010 data0x35080230 10825100bus0lbuslastdata target0010 data0xad000000 10840100bus0lbusaddr master0001 addr0x1fa00030 cmd0x4b lexra supports many types of traces for complete description of all vailable tracespleasesee lx_hometestbedlmonv lexra inc confidential 177lexra 6stage products users guide revision 50 1061 tracingthroughhierarchicalreferences to control hierarchical references only verilog macros can be used lexra has defined convention where several levels of references are allowed these optionsaremainlyusedwithrtlnetlistsbecausesynthesizedgatelevel netlists will not have the same name references as the rtl netlists rtl_mon and local_monwill notworkin gatelevelsimulation definelocal_mon this symbol is added to the verilog compiler by default by rundvtin order to allow limited amount of peeking without local_mon only the syste m bus may be monitored the testbed will attempt to peek into lx2 but not deeper this may be used with gate level netlists below lx2level however tests may fail when simulating with both behavioral and gate level netlists especiall critical timingatthebehavioralgateboundaries definertl_mon rtl_monpermitsanysignalinthedesigntobeexaminedbelow lx2hierarchy code can be seen where rtl_mon will enable hierarchical references in lx_hometestbedlmonwv ifdefrtl_mon wire70procnumlx0pathcfg_procnum elsenotrtl_mon wire70procnum8h0 endif the different modes of hierarchical references are summarized in the following table with the various rundvtoptions allow hierarchical referencesaddfgateftov erilog compiler rundvtdefault yes addgates yes fileswithhvvovm yes custom_filesyes yesdefault yes sim_techyes yesdefault yes addnopeeking yesdefault adddefinelocal_mon yes yesdefaultlexra 6stage products users guide revision 50 178 lexra incconfidential1062 sparsememorytracing a4gbsystemmemorymodelsparsememoryvisincludedin lx_home testbedt helx_hometestbedtestbedv loadsanasciibinaryfile intothesystemmemoryfortestingtheverilogmacrosbelowenableinfor mationaltraces definesparsememory_trace the sparse memory model uses single level hash toprovide fastaccessto the memory pages the dump function will be invoked when the sparsememory_trace is defined it will display the state of the hash linked list ofcollisionpoolrecordsbacksupthehash allocatingpage key00001045tag40405400page00001f00 allocatingpage key00001046tag40405800page00002000 allocatingpage key00001047tag40405c00page00002100 allocatingpage key00001048tag40406000page00002200 allocatingpage key00001049tag40406400page00002300 allocatingpage key0000104atag40406800page00002400 allocatingpage key0000104btag40406c00page00002500 allocatingpage key0000104dtag40407400page00002700 hash00001044 tag40405000page00001e00count 354 hash00001045 tag40405400page00001f00count 255 hash00001046 tag40405800page00002000count 255 hash00001047 tag40405c00page00002100count 255 hash00001048 tag40406000page00002200count 388 hash00001049 tag40406400page00002300count 354 hash0000104a tag40406800page00002400count 407 hash0000104b tag40406c00page00002500count 255 definesparsememory_trace_hit tracereadandwritehitstohash hit page key0000047etag405ffc00page00003400 hit page key00000015tag1c000000page00003600 hit page key00000015tag1c000000page00003600 hit page key0000047etag405ffc00page00003400 hit page key0000047etag405ffc00page00003400 hit page key00000015tag1c000000page00003600 hit page key00000015tag1c000000page00003600 hit page key0000047etag405ffc00page00003400lexra inc confidential 179lexra 6stage products users guide revision 50 definesparsememory_trace_verbose traceeveryreadandwriteaccessestothesystemmemorymodel get_memory1fa00120memory0000074800000000 get_memory1fa000a4memory0000072900000000 get_memory1fa00124memory0000074900000000 get_memory1fa000a8memory0000072a00000000 get_memory1fa00128memory0000074a00000000 get_memory1fa000acmemory0000072b00000000 get_memory1fa0012cmemory0000074b00000000 get_memory1fa00230memory0000078c00000000lexra 6stage products users guide revision 50 180 lexra incconfidentiallexra inc confidential 181lexra 6stage products users guide revision 50 chapter11 synthesizingthelexracpu 111 overview thelexradatabasecomeswithacomplete synthesisenvironmenttosetu pthis environment for your design only few files need to be modified example modifications are library name and location cpu clock speed ram timing information we provide default values for several parameters and you can change them to gain more control over the provided synthesis script section112 setting up the synthesis environment explains the requi red and optionalsetups section113 running synthesis explains how to synthesize the database an d section114 synthesis output files explains the output files generated by th synthesissession you can configure the rtl code to synthesize to gates at the push of button this provides highquality synthesis results there are backend optimiza tions that are not practical to automate consequently lexras synthesis procedure is not stepbystep set of instructions to get from rtl to silicon sec tion115 considerationsdiscussesthesetopics the final section116 structure of the synthesis environment goes into more detailabouthowthe lexramakefiledriven synthesisenvironmentworks 112 settingupthesynthesisenvironment thisdiscussesthe threefilesyouneedtomodifytocustomizeyourenvi ronmentchapter 11lexra 6stage products users guide revision 50 182 lexra incconfidential synopsys_dcsetup dont_usescr techvarsscr 1121 synopsys_dcsetup youneedtocustomizethefilelx_homeusertech synopsys_dcsetup which is created after lconfig is run this file specifies the synopsys library files to use and the search path to the files besuretoaddramlibrariestoyourlink_librarylist thetechdirectory as shown above is link created by lconfig it points to the directoryspecifiedbythefollowingvariableinthe lconfig form technologycustom usuallytechnologywill be settocustom and thus the techdirectorywill point to the customdirectory however if synthesis to multiple technologies is required using the same lexra databasemodifying the technology variable to custom_my_name and rerunning lconfig willrelink the techdirectory to the new directory custom_my_name this helps in managing the databasewhensynthesizingtomultipletechnologies you can also use this file to set default values on dc_shell variables for all blocks in the rtldatabase forexample you can specify bus_naming_style ordefine_name_rules in this file all dc_shell scripts in the environment usethisfile notethe synthesis methodology writes out netlist for each block at each levelofthehierarchyandreadsthatnetlistwhensynthesizingthenextlevelofthe hierarchy this requires that the bus naming style be consistent between the rtl and the synthesized netlist therefore we recommend that you do not change dc_shell variables such as bus_naming_style or define_name_rules if you change them you must maintain the consistency describedaboveorthehierarchicalmakeprocesswillnotbesuccessf ullexra inc confidential 183lexra 6stage products users guide revision 50 parameterstoset 1122 dont_usescr you may customize the file lx_homeusertechdont_usescr t h i sf i l allows you specify cells in the synthesis library that the synthesis tool may not use donotremovethesetwo set_dont_use statementsinthe dont_usescr file set_dont_use standardsldbdw01_addrpl standardsldbdw01_addsubrpl standardsldb dw01_subrpl set_dont_use standardsldbdw01_incrpl standardsldbdw01_incdecrpl standardsldb dw01_decrpl these commands prohibit design compiler from using designware ripplecarry implementations of adders subtractors addsubs incrementers decrementers and incdecs many versionsofdesign compilerhave trouble swapping out suc h cells when faster implementation is needed to meet timing constraints therefore it is often difficult to get good timing results without prohibiti ng these designwareparts when scan_insertnothe synthesis tool maytake advantage of scan flops toimplementlogicthatrequiresamuxfollowedbyanonscanflop ifyourgoalis to insert scan postsynthesis this will cause problem one way to avoid the problem in this case is to set_dont_use on scan flops this can be done usingthefollowingexampleasaguide ifscan0 set_dont_usetechlibsdffhqx1 set_dont_usetechlibsdffhqx2 set_dont_usetechlibsdffhqx4 variable requiredoptional example link_library required link_library techdb target_library required target_librarytechdb search_path required search_pathsearch_pathpath_to_library_file symbol_library optional symbol_librarytechsdblexra 6stage products users guide revision 50 184 lexra incconfidential1123 techvarsscr oumustcust omizethefile lx_homeusertechtechvarsscr the filetechvarsscr offers you many variables for controlling the synthesis environment you need to set some variables but frequently the default settings aretherightones below are tables of available variables the first table displays the variables ou must customize to get the synthesis scripts to run without errors the second table displays the variables whose default values the synthesis scri pt can run withouterrors variablesneedingcustomizing variable function techlib synopsystechnologylibrarynamenotafilename bcopcond bestcaseoperatingconditionforcheckingholdtime violationsnotusedatthistime wcopcond worstcaseoperatingconditionin techlib for optimizingsetupviolations clkperiodbusclkperiod jtagclkperiod1sysclkbusclkandjtagclkclockperiod dcell basicdrivingcelllikesize1orsize2inverterfor calculatingstandarddriveofinputsignal dcellpin outputpinon dcell maxareascale variableforscalingthesynopsysmax_arealimitfrom theoriginalreportedarea maxfanoutv2 limitsfanoutonportsofeachmoduleisafloatingpoint numberwhichisanintegralmultipleof10 ram_dcache_data_index_setup3setuptimefrompositiveedgeofclocksysclkfor addressbusondcache ram_dcache_data_we_setup3 setuptimefrompositiveedgeof clocksysclkforwrite enableondcache ram_dcache_data_wr_setup3 setuptimefrompositiveedgeof clocksysclkforwrite databusondcache ram_dcache_data_rd_delay3 readaccessdelayfrompositiveedgeofclocksysclkto validoutputonmemoryfordcachelexra inc confidential 185lexra 6stage products users guide revision 50 t h r ea r i xp s s i b l et p so fr m sa n do n et p eo fr nt h x r ac p u core choosing 2way set associative instruction cache will cause mul tiple instancesof instructioncachedataandtagramsram_dcache_data_re_setup3 setuptimefrompositiveedgeofclocksysclkforread enable ram_dcache_data_cs_setup3 setuptimefrompositiveedgeofclocksysclkforchip select rom_irom_inst_index_setup setuptimefrompositiveedgeofclock sysclkfor addressbusonirom rom_irom_inst_re_setup setuptimefrompositiveedgeofclock sysclkforread enable rom_irom_inst_cs_setup setuptimefrompositiveedgeofclock sysclkforchip select rom_irom_inst_rd_delay readaccessdelayfrompositiveedgeofclocksysclk to validoutputoniro m 1 clkperiod is the system clock period busclkperiod is the bus clo ck period and jtagclkperiod is the jtag clockperiodthelexralbc hasanoptionala synchronous interfacethat operates correctly with any bus clock frequency relative t system clock fre quencytomakethesynthesistoolworkeffectivelysetthesevariablessothatt heirratiois small integer for example busclkperiodclkperiod 1 2 4 8 2 many synthesis libraries model fanout restrictions poorly for example t hey may model fanoutforinput pinsexactlyastheydocapacitanceorforoutputpinsexactl yastheydo drive strength thesynthesis tool using only this information provide s poor ability to trolfanout thelexrasynthesisenvironment thereforeputsadefault max_fanoutattribute on all cellsoutputpins specifically executingthe lib_fanoutscr scriptputsadefault max_fanout attribute on all library cellsoutput pins the default is maxfanout v this meansthatnocellcandriveanodewithafanout_loadexceedingmaxfanoutvw ithout causingamax_fanoutdesignruleviolationthusthemaxfanoutvvariable providesan efficient wayforyoutocontrolthefanoutinthedesign 3 thesevariablesdescribetimingcharacteristicsofthememoriesfor thesynthesistoolthis tableshows them for the dcache data ram only the techvarsscr file provides the same parameters forthe instruction cache store instruction ca che tagdatamemory dmem notags andinstructionmemoryimem notagseachtypeof ramhas six parameters theirnamingstyleisconsistent withthosethedcachehasinthe table dcache_data dcache_tag dram_data icache_inst icache_tag iram_inst irom_instvariable functionlexra 6stage products users guide revision 50 186 lexra incconfidentialeachramhassixtimingparameters theiromhasfourtimingparameters thetechvarsscr variable names are the concatenation of the string ram_ or rom_ the memory name and the parameter name variablesnotneedingcustomizingindex_setup we_setup re_setup cs_setup wr_setup rd_delay index_setup re_setup cs_setup rd_delay ram_dcache_data_index_setup ram_dcache_data_we_setup ram_dcache_data_re_setup ram_dcache_data_cs_setup ram_dcache_data_wr_setup ram_dcache_data_rd_delay variable function techlib2 synopsystechnologylibrarynameforasecondlibrary optional techname locallibrarynameusefulforcustomizingscriptsnotinuse rptclkperiod rptbusclkperiod rptjtagclkperiod1reportclockperiods reporttimingusestheseforsystemclockbus clockandjtagclock rptmax argumenttosynopsyscommand report_timing max_path rptworst argumenttosynopsyscommand report_timing worstlexra inc confidential 187lexra 6stage products users guide revision 50 iodelayscale2 scalingfactorfor input_delay andoutput_delay valuesdo notmodifyshouldbe clkperiod10 lxdebug setto1forverboselogginginsynthesislogfile clkmuncert busclkmuncert jtagclkmuncertminusuncertaintyappliedtosystemclockbusclockandjtagclock formodelingclocktreeeffectsbeforelayoutcomputingclockedge times useminusuncertaintywhencheckingsetupmaximum pathdelays iteffectivelyshiftstheclockedgetotheleftmaking theclockedgeearlier larger uncertaintyimpliestightersetup constraints clkpuncert busclkpuncert jtagclkpuncertplusuncertaintyappliedtosystemclockbusclockandjtagclock for modelingofclocktreeeffectsbeforelayoutcomputingclock edgetimes useplusuncertaintywhencheckingholdminimum pathdelays it shiftstheclockedgetotherightmakingit later largeruncertaintyimpliestighterholdconstraints rptclkmuncert rptbusclkmuncert rptjtagclkmuncertsameasclkmuncert busclkmuncert and jtagclkmuncert butforthereportclocks rptclkpuncert rptbusclkpuncert rptjtagclkpuncertsameasclkpuncert busclkpuncert and jtagclkpuncert butforthereportclocks clkhperiod busclkhperiod jtagclkhperiod rptclkhperiod rptbusclkhperiod rptjtagclkhperiodhalfperiodforsysclk busclk jtagclkandcorrespondingreport clocks default is50dutycycle critrange criticalrangeforcompilecommand specifiesamarginofdelay for pathgroupsinoptimization acriticalrangeof00meansthatonly themostcriticalpathstheoneswiththeworstviolationare optimized foranonzerocriticalrangenearcriticalpathswithin thatamountoftheworstpatharealsooptimizedifpossible defaultcriticalrangeis10oftheclockperiod settozeroor smallportionof clockperiodtimesinceit hasalargeimpact on runtimes 1 the synthesis tool frequently produces better timingresults when the timing is overcon strainedaccuratestatictiminganalysisrequirestheactualclockperi odandclockuncer taintycurrently the positiveuncertainty is increased to overcon strainthe synthesis tool for each clockthere is clock period clkperiod and areporting clock period rpt clkperiodbydefaultallreportingclockperiodsareequaltotheactual clockperiod 2 constraints are based on 10ns clock the fileconstraintstempl atecontains this straintdataoneachport theseconstraintsarescaledlinearlyfordiff erentclockfrequen ciesintheconstraintfiles io_con the scale factor by default is iodelayscale clkperiod10 variable functionlexra 6stage products users guide revision 50 188 lexra incconfidential1124 usingpredefinedtechnologies if you use one of the technologies lexra has already defined setting up the synthesisenvironmentrequiresonlythefollowingsteps 1 set the lconfig option technology and run lconfig on theeditedform 2 customize the synopsys_dcsetup dont_usescr n d techvarsscr f i l s t h r ei nt h lx_homeusertech directory 1125 synthesiswireloadmodels wire load models are controlled by the synthesis variables synwlm dp wlm and dwwlm found in techvarsscr andmodulescrtemplate files settingthesevariablesto autocausesthesynthesistooltoautomaticallyselect the synopsys library specific wire load model for the module being synthesized basedonthewire_load_selectionfunctioninthelibrary setting the three variables to modulewlm will allow the use of unique wire loadmodelforeachmoduleinthedesign notea module signifies one of the major modules in the lexra rtl hierarchy these modules manytimes willcontainsubmodules when using modulewlm the name of the wireload model must be named module_wirelib this option allows you to use layout tool generated wireload models to achieve better synthesis results you will need to create module_wirelib file for each synthesized module that is there is directorylx_homesynmodule for each major module in the lexra rtl hierarchy if using modulewlm each directory must contain file module_wirelib you can confirm which wire load models were used in synthesisbylookingat the timing_realrpt file setting synwlmdpwlm and dwwlm to model name allows the use of single wireload model for all modules this will look for the file model_name_wirelib notedo not change synwlm in the following four files lx0scrtemplate lx0cscrtemplate lx1scrtemplate lx2scrtemplate synwlm must be set here to zero lexra included wireload model because the routing parasitics normally handled by the wireloadmodelareincludedintheconstraintsfileio_rptcon forthesemoduleslexra inc confidential 189lexra 6stage products users guide revision 50 113 runningsynthesis tosynthesizetheentire lexracpu set up the synthesis environment by updating the following three filesasdescribedintheprevioussection synopsys_dcsetup dont_usescr techvarsscr verifyyoursetupbysynthesizingasmallblock cd lx_homesynblock_namemake forexample cdlx_homesynreset_distmake synthesize lexra processor at either the lx1orlx2level of the hierarchy cd lx_homesynlx2make 114 synthesisoutputfiles eachsynopsysscriptwritesoutthefollowingfiles blockhv hierarchicalverilognetlist blockdb synthesizeddatabaseinsynopsysdatabaseformat timing_realrpt timingreportusingrealconstraints using rptclkperiod and rptbusclkperiod constraint_realrpt constraintviolationreportusingrealreport constraints designrpt check_design output portrpt verboseinformationonportconstraints pin_timingrpt timingreportonioportsonly blockautoxp scanpathreport onlywhenscan_insertyes blocktpf testprotocolfileonlywhenscan_insertyes testrpt outputofcheck_testonlywhenscan_insertyeslexra 6stage products users guide revision 50 190 lexra incconfidential115 considerations 1151 synthesizingclocktrees during initial synthesis treat clocks as ideal and dont try to force synth esis to create the clock trees for you having synthesis create the clock buffer tree produces poor results since the tool has layout information to work with instead use backend tools to create clock trees based on layout and timi ng constraints lexrassynthesisscriptsmodeltheclockdistributiontreeasifitwered rivenbyan ideal driver infinite drive strength the synthesis environment does provide parametersfor modeling clock uncertaintyinterms ofplus and minusuncertainty of the arrival of the clock edge use these parameters see section1123 techvarsscr with the synopsys command set_clock_skew in thesyn optscr fileasfollows set_clock_skewideal delay0 minus_uncertaintyclkmuncert plus_uncertaintyclkpuncert findclockclock we recommendthatyou notmodifythe default valueswhich are percentagesof theactualclockperiod 1152 backendandipoconsiderations your first synthesis ideally results in netlist without any timing r design rule violationsthenextdesignphaseistofloorplanandorplaceandroutethenet list after this step your design is likely to have timing andor design rule vi olations because the layout tool provides you with actual wire parasitic resistance and capacitance you have to resynthesize the netlist incrementally using backannotated data from thebackendflowunlesstheviolationsareacceptablethiskindofitera tion performing incremental resynthesis based on backannotated data is often called ipo inplace optimization in the synthesis level or eco engi neering changeorderinthelayoutlevellexra inc confidential 191lexra 6stage products users guide revision 50 itisverycomplicatedtocreateagenericautomatedandstillefficientip ooreco synthesis flow and it is beyond the scope of the synthesis environment p rovided bylexrasomeconsideration in theinitialsynthesismayhelp laterwhen you do eco oripotypesofoptimizations beconservativebutnottoolimitedwhenspecifyingconstraints consider disabling set_dont_use strong drive cells in the synthesis so you havethem available foripooptimization ifthe vendorstechnologylibrary has poorwireload modelsconsidergenerating custom wireload models from floorplan and place and route then re synthesizefromscratchusingthe newlygeneratedwireloadmodels model clock tree uncertainties as accurately as possible in initial synthe sis but useset_clock_skew propagated_delay with backannotated sdf data whendoingipoorecotypesofoptimization 1153 reorderingscanchains lexras synthesis environment inserts and connects scan chains if you set the scan_insert option you usually reorder the scan chains in the backend basedonlayoutconsiderations scan chain reordering as well as the ipoeco loop outlined in the previous section is hard to make generic automated and still efficient it is beyond th scope of lexras synthesis environment you must recreate atpg vectors if you reoptimizethescanchains 1154 libraryrecommendations the lexra cpu is generic technology independent rtl design that does not relyonanyspecificlibrarycomponents foroptimalsynthesisresultswerecommendthatthelibrarycontains cellswithmanydifferentdrivestrengthsperlogicfunction scanflipflops arichselectionofwireloadtables several different operating conditions or different library files for differentoperationconditionsietypicalslowfastlexra 6stage products users guide revision 50 192 lexra incconfidential116 structureofthesynthesisenvironment when you run lconfig it reads your form and sets up your environment for bothsimulationandsynthesis thesynthesisfilesresidein the lx_homesyn block directories after lconfig is run the lconfig script figures out if you have technology specific files for synthesis for example ram wrappers sleep clock buffers etc based on finding vfiles in the lx_hometech directories if these files exist lconfig creates appropriate links to them from theappropriate syndirectory whenitlocatesyourtechnologyspecificfile lconfig displaysthemessage usingtechnologyspecificfilepathnameforsynthesis f re x m p l i ft c h n l g yi ss tt oc u s t ma n dy ua r eu s i n ga1 k dcache you create the ram wrapper lx_homechipcustom sram_dc_data_256x32v t h elconfig script then creates link in the lx_homesynlx2 directory sram_dc_data_256x32vchipcustomsram_dc_data_256x32v when you synthesize the lx2module the synthesis script reads the linked file for certain modules ram wrappers for example lconfig issues an error messageifitisunabletolocate thetechnologyspecificfiletouse fors ynthesis prior to running lconfig there are synblock directories the lconfig scriptcreates the synblock directoriesandcopiesthe blockfiles blockscrtemplate filesfromsynsyntrol tothem the lconfig script reads the blockfiles file and your form and creates the following files in each synblock directory that needs to be synthesized for yourconfiguration thelconfig script then creates makefile in the unused synblockmakefile synopsys_dcsetup linktotechnologyspecificfile chk_logs linktoscript todetect problemsinsynopsyslogfile include linktoincludedirectory blocks_subsscr listofverilogsubmodulesreadbysynthesisscriptlexra inc confidential 193lexra 6stage products users guide revision 50 directories so if you stumble into one of these by accident the m akefile tells youthatthisconfigurationdoesntusethat block constraint information for each block is located in the file constraintstemplate the lconfig script and the synthesis makefile use the information in constraintstemplate to create the module level constraintfilesrequriredforsynthesis synmoduleio_synthcon in addition to set_input_delay andset_output_delay constraints and set_false_path timing exceptions the module level constraint files include set_load commands to add load attribute to specified value on all output ports and internal nets that connect to output ports of synthesized bblocks thereare five load values out_load_w1 out_load_w5 specifiedin thelx_homeusertechtechvarsscr fileforexample out_load_w1 001 loadassignedbymk_syn_con smallestconnection out_load_w2 002 loadassignedbymk_syn_contypicalnearbyconnection out_load_w3 005 loadassignedbymk_syn_coninbetweenishconnection out_load_w4 010 loadassignedbymk_syn_con typicalfarconnection out_load_w5 020 loadassignedbymk_syn_con biggestconnection thebuild_constraints scriptcalled bythesynthesismakefilechecksthe blocks in the hierarchy to ensure that the constraints are consistent between levelsof hierarchy eachmakefile doesthefollowing change directory to synsyntrol and calls the local makefile withanargumenttoprovidethe desiredfunctionality thisfunctionalityincludescommandsthat runbuild_constraints to create blockdata file containingtheiotiming runmk_syn_con on the blockdata file to get io_synthrptcon synthesisconstraintfiles runsvppontheblockv filetogeneratealocal blockv file without any ifdef logic since the synthesis tool may not be able to parsethislexra 6stage products users guide revision 50 194 lexra incconfidential for subblocks not synthesized separately runs vppto generate localsubblockv file iftheblockscrtemplate file exists runs vppto create the configurationspecific blockscr synthesis script the blockscr filesetssomevariablesandincludesothersynthesis commandscripts runsdc_shell on theblockscr file and write the results to thescreenandtothe blockscrlog file runs the script chk_logs after the synthesis job is complete and writespotentialproblemsto thescreenandto chk_logslog togetstartedwithsynthesisafteryour lconfig formis completerun lconfig andtrysynthesizingasmallblock cdlx_homesynreset_dist make ifyoudonthaveanyproblemsyoucantrysynthesizingahighlevelblock cdlx_homesynlx2 make you can run make n to see what commands makewants to run without executingthemoryoucanrun makend toseeexplanationsaswell mostofthetargetsinthemakefilesdependon synsyntrolblockvh that arewrittenby lconfigthereforewhenyoumodifyaformandrerun lconfig the makefile will know that it only has to update blocks where the configuratio n haschangedlexra inc confidential 195lexra 6stage products users guide revision 50 chapter12 simulationguidelines there are special simulation requirements for lexras processors the rtl code uses standard coding techniques and single edge clocked flip flops engineers have simulated synthesized gate level netlists with numerous third party libraries for example artisan tsmc 025 µm 018 µm and 013 µm aspec ibm 025 µm faraday umc 025 µm nurlogic ibm 025 µm and stmicroelectronics025 µm nevertheless this chapter offers several useful notes on simulation iss ues users mayencounter 121 verilog the syntax of verilog options may differbetween each verilog simulat or verilog xl ncverilog and vcs all accept verilog simulation options using the same syntax 1211 verilogmacrodefinitiononsimulatorcommandline if the user wanted to define verilog macro for use by all verilog files then the following syntaxwouldbeusedtodefinea macrocallexample commandlinesyntax defineexample verilogusage ifdefexample conditionallyenabledcodeatcompiletime endifchapter 12lexra 6stage products user s guide revision 50 196 lexra incconfidential1212 verilogsystemfunctiontestplusargs the testplusargs function looks for the existence of user defined plu sarg at runtime commandlinesyntax example verilogusage iftestplusargsexample begin conditionallyenabledcodeatruntime end 1213 verilogsimulatorspecificoptions for more information anduseofthese options refer to the simulator users guide acommonexampleistherioptioninvcs rundvtrifrom_regressionlogicals the compileroption automaticallystartsthevirsim waveform viewandgraphi cal simulationcontrolfollowingasuccessfulverilogcompilation 122 rammodels the ram behavioral models shipped with lexra s processor include event filters for eliminating the race conditions these conditions can result when s imulating the processor gate level netlists with ram behavioral models be aware of the potential for race conditions when simulating with ram behavioral models not supplied by lexra see the information provided in the lexra behavioral rams foundinthe lx_homechip directory there is wide range of quality across library vendors structural ram models some dont support back annotation with delays from sdf others cant turn off post layout timing lexra has experienced numerous difficulties getting the structural models integrated into the simulation environment therefore it is recommended to test the vendors ram models as early as possible the ram wrapper for the vendor rams should be pin compatible with the tsyncram_example model that lconfig generates the model is found in lx_homechipcustom directoryafterrunning lconfiglexra inc confidential 197lexra6stageproductsuser s guide revision 50 when connecting vendor specific ram models to the lexra processor be careful ofuninitialized contents x s since they can cause problems in simulation in the lexra simulation environment these problems can be diagnosed pretty quickly because it has checkers to warn the user that something in the ram interf ace is xseesection44usinglibraryvendorsram modelsformoredetails 123 reset when simulating the core outside of the lexra regression environment ensure thatthe resetsignalduration is at leastten timeslonger than the syste m clock or bus clock period this allows the processor to exit reset properly while the processorand lbc are held in resetthe lbus maybe used byother peripheral suchasi2cloadingbootstrapcodeintosdram the normal bootsequence occursafter reset is deasserted ifthere are caches thecachecontrollersinitializethetagsforicacheanddcachethistakesone cycle per cache line the cache with the largest number of lines determi nes the numberofcyclessinceicacheanddcachetagsareinitializedin parallel the tag initialization is completed before the first instruction is fetched dditional cyclesarerequiredforthe instructionrequesttopropagatetolbusthereforeit will take the largest of number of dcache lines or icache lines plus some additionalcyclesbeforethefirstinstructionfetchactivityisseenonlbus the first instruction fetch for normal operation begins at the reset vector 0xbfc0_0000 this location usually contains the starting address of the user s resetroutine orbootup codethebootcodecancopyanotherprogram orrtos to memoryafter itfinishescopyingto memorythe program can jump to the new programinmemory 124 testbedmodels allofthetestbedmoduleslexrasuppliessampletheirinputsontherisingedgeof the clock and update their outputs on the falling edge of the clock this avoids potential race conditions between the processor and the testbedeven when the processorissimulated at the gate level it is recommended that anynew testbed modules the user creates should follow this approach this will also make gate simulationswithtimingprobablyfailiftestedatspeedlexra 6stage products user s guide revision 50 198 lexra incconfidential125 libraries itisrecommendedthattheuserfollowsthelibraryvendorssimulationguid elines addanysimulatorcommandline argumentsrecommended bythe libraryvendor tothetechnologyspecificgate file running rundvt gates addsf user customgatef tothesimulatorcommandline 126 gatelevelsimulation it is strongly recommend that simulation with post layout timing and gate leve l netlistareperformedthey shouldpasstheregressiontestsalthoughtheentire regression suite does not have to be run subset of the regression testlist may be specified by using fromandto rundvt options see 1032 advanced options do not run gate level simulation at high frequencies eg too close to the s ta verifiedspeedsince thegatelevelsimulationmodelsandtimingsarenotexactly the same as the sta models otherwise critical timing on behavioralgate boundarywillcausesimulationto fail there are several steps to take when using rundvtto run regression testing on the synthesized gate level design in the file lx_homeusertechgatef ensuretheappropriateverilogfilesarepresentincludingtechnologyspecifi crams whereapplicableforexamplein gatef vlibrarytsmcartisanc018aciscverilogtsmc18_lxr_udp_dffv vlx_homechipcustomra1sh_512x20v notimingchecks nospecify by default in the way the netlists are setup the synthesized netli sts entered on the command line will override the vfiles since the vfiles are treated as library files to ensure that rtl models are used in the gate level simula tion comment out the lx0lx0clx1andlx2inpfilesinlx_homeregression vcsinpfiles forexamplein vcsinpfiles fboardinpfiles f chipinpfiles f lx0inpfiles flx0cinpfiles f lx1inpfiles f lx2inpfiles ftm_lbusinpfileslexra inc confidential 199lexra6stageproductsuser s guide revision 50 ftestbedinpfiles fsysteminpfiles to run the regression testing on gate level netlist use gatesoption which will includelx_homeusercustomgatef for asic cell libraries and nopeeking optiontodisablehierarchicalreferencesinthetestbed rundvtgatesnopeeking your_pathsynthesized_netlisttest 1261 backannotation verilog simulators support sdf for timing back annotation to run the gate vel simulation with real annotated timings in lexra s testbed environment there are several additional steps that must be taken verilog simulators do not support dspf in the filelx_homeusertechgatef comment out the last two lines so the simulator can backannotate the timing and do timing checks eg set up hold v librarytsmcartisanc018aciscverilogtsmc18_lxr_udp_dffv v lx_homechipcustomra1sh_512x20v notimingchecks nospecify inthefilelx_homesystemcontrolv thefollowingneedstobefixed 1sdffile name 2 toplevel module hierarchical reference the level at which sdf is annotated 3logfilename makesurethesdffileisinthe lx_homeregression directory forvcs cdlx_homeregression rundvt gates options systemcontrolv compsdf maxdelays sdfverboseneg_tchklexra 6stage products user s guide revision 50 200 lexra incconfidentialvcs will have top level module control in addition to the normal topsys and testbedcompsdf tells vcs to use compiled sdf if compsdf is not used thenvcs will needanadditional file sdftabthefile sdftab is notreco mmended becauseitis difficult to createand causesvcs to runslower maxdelay s tells vcs to use the max delays in the sdf file other options are typdelays or mindelays neg_tchk dependsonthespecificsdforlibrary forverilogxl thecompsdf argument is not needed because verilogxl is interpreted verilogxlexecutablemustbecompiledwiththesdf annotatorincludedi tdoes not come this way on the installation cd from cadence however most sites havebuilt it this way checkthelogfiletomakesuretheannotationtakesplacethebiggestsou rceof errors is the hierarchical reference in lx_homesystemcontrolv referto verilogxl or virsim for the correct reference for example to back annotate n lx1sdffilethecontrolfileismodifiedasshownbelow controlv modulecontrol initial begin displayannotatingtopsyslx_baselx2lx1usings mindelaystypdelaysmaxdelays sdf_annotatelx1sdftopsyslx_baselx2lx1lx1_sdflog tool_control end endmodule controlv tosimulateatspeedmodifylx_homeincludelxr_symbolsvh forexample definesysclk_period88nsclockperiod125mhz thedefaultissysclk_period50 50nsperiod20mhzlexra inc confidential 201lexra6stageproductsuser s guide revision 50 127 asynchronousmodelbc when using the lbc in asynchronous mode simulating at the gatelevel with post layout timing annotation and synchronizing flipflops in the lbc generates s t u pt i m ev i l t i n s w h nat i m i n gv i l t i c c u r s m s tf l i pf l pm d l s produce unknown values which corrupt the simulation this is unavoidable becauseoftheasynchronousrelationship betweenthe systemclockandthe bus clock this problem can be neutralized by copying the flip flop model to new cell disabling the unknown value generated on timing violation and repl acing thesynchronizinginstanceswiththenewcell 128 runtimelimitations when running regression tests run only one simulation at time per regression directory do not rerun lconfig during simulationotherwise the simulation mayfail s ince rundvtmay recompile the models to run certain tests for simultaneous simulationscreateaseparatedirectoryforeachsimulationrun lconfig mayreportsynthesissetuperrorsifthetechnologyfileshavenotbeen completelysetupbutrtlsimulationmaystillworklexra 6stage products user s guide revision 50 202 lexra incconfidential