lx4280 data sheet lexra inc release 19 may 9 2001 lexra proprietary and conﬁdentialmay 9 2001 lx4280 lexra proprietary confidential release 19 lx4280 data sheet revision 13 for rtl release 19 this document is proprietary and confidential to lexra inc copyright 2001 lexra inc all rights reserved mips mips16 mips abi mipsii mipsiv mipsv mips32 r3000 r4000 and other mips common law marks are trademarks andor registered trademarks of mips technologies inc lexra inc is not associated with mips technologies inc in any way smoothcore radiax and netvortex are trademarks of lexra incmay 9 2001 lx4280 lexra proprietary confidential i release 19 table of contents 1 lx4280 product overview 1 11 introduction 1 12 lx4280 processor overview 2 13 system level building blocks 3 131 smmu 3 132 local memory interface 3 133 coprocessor interface 4 134 custom engine interface 4 135 lexra bus controller 4 136 building block integration 4 14 rtl core smoothcore 4 15 eda tool support 5 2 lx4280 architecture 7 21 hardware architecture 7 211 module partitioning 7 212 six stage pipeline 8 22 dual issue 8 221 instruction fetch 8 222 instruction analysis and select logic 8 223 mips16 9 23 ralu data path 9 231 overview 9 232 assignment of instructions to pipe pipe b 10 24 system control coprocessor cp0 11 25 lowoverhead prioritized interrupts 12 3 lx4280 risc programming model 15 31 summary of mipsi instructions 15 311 alu instructions 16 312 load and store instructions 17 313 conditional move instructions 17 314 branch and jump instructions 18 315 control instructions 19 316 coprocessor instructions 19 32 opcode extension using the custom engine interface cei 20 321 cei operations 20 322 interface signals 20 33 memory management 21 34 exception processing 21 341 exception processing registers 23 342 exception processing entry and exit 24 35 the coprocessor interface ci 24 36 power savings mode 24 4 mips16 27 41 mips16 instructions 27 42 mode switching 30 43 exceptions 30 44 delay slots 30may 9 2001 lx4280 lexra proprietary confidential ii release 19 5 lx4280 local memory 31 51 local memory overview 31 52 cache control register cctl 32 53 instruction cache icache lmi 33 54 instruction memory imem lmi 35 55 instruction rom irom lmi 36 56 direct mapped write through data cache dcache lmi 37 57 scratch pad data memory dmem lmi 38 6 lx4280 system bus 41 61 connecting the lx4280 to internal devices 41 62 terminology 41 63 bus operations 42 631 singlecycle read 42 632 read line 42 633 burst read 43 634 singlecycle write 43 635 line write 43 636 burst write 43 64 signal descriptions 44 65 lbus commands 44 66 byte alignment 45 67 lexra bus controller 45 671 lbc commands 45 672 lbc write buffer and outoforder processing 46 673 lbc read buffer 46 674 transfer descriptions 47 675 single cycle read with waits 48 676 single cycle read with target wait 49 677 line read with waits 49 678 line read with target waits 50 679 line read with initiator waits 50 6710 burst read 51 6711 singlecycle write with waits 51 6712 singlecycle write with waits 52 6713 burst write with waits 52 6714 burst write with target waits 53 6715 burst write with initiator waits 53 68 lbc signals 54 69 arbitration 55 691 rules 55 692 lbc behavior 55 610 connecting devices to the bus 55 7 lx4280 coprocessor interface 57 71 attaching coprocessor using the coprocessor interface ci 57 72 coprocessor interface ci signals 57 73 coprocessor write operations 58 74 coprocessor read operations 58 75 coprocessor interface and pipeline stages 59 751 pipeline holds 59 752 pipeline invalidation 59may 9 2001 lx4280 lexra proprietary confidential iii release 19 8 lx4280 ejtag 61 81 introduction 61 82 overview 61 821 ieee jtagspecific pinout 62 83 single processor pc trace 62 831 pc trace dclk debug clock 63 832 pc trace pcst program counter status trace 63 833 pc trace tpc target program counter 63 834 dual pipe pc trace 63 835 singleprocessor pc trace pinout 64 836 vectored interrupts and pc trace 64 837 demultiplexing of tdo and tdi during pc trace 65 9 integer multiplydivideaccumulate optional 67 91 summary of instructions 67 92 macdiv instruction overview 68 93 opcodes for standard mode 32bit mac instructions 69 94 opcodes for mips16 16bit mode mac instructions 70 95 nonstandard instruction descriptions 71 96 multiplier pipelining 73 97 accessing hi and after multiply instructions 73 98 divider overview and register usage 74 appendix alx4280 lconfig forms 75 a1 configuration options for the lx4280 processor 75 appendix blx4280 port descriptions 77 appendix c lx4280 pipeline stalls 85 c1 stall definitions 85 c2 instruction groupings 85 c3 dual pipe issue rules 86 c4 m16 32bit instructions 86 c5 nonsequential program flow issue stalls 87 c6 loadstore rules 87 c7 loadstore ops stall matrix 89 c8 mac ops interlock matrix 89 c9 mvcz stall 90 c10 immu stalls 90 c11 cache miss stalls 91 c12 nonsequential program flow issue stall pipeline diagrams 91 c13 loadstore stall pipeline diagrams 92 c14 mac ops interlock pipeline diagram 94 c15 mvcz stall pipeline diagrams 94 c16 cache miss pipeline diagrams 94may 9 2001 lx4280 lexra proprietary confidential iv release 19 may 9 2001 lx4280 lexra proprietary confidential v release 19 list of tables table 1 eda tool support5 table 2 assignment of instructions of pipe pipe b10 table 3 cp0 registers11 table 4 prioritized interrupt exception vectors13 table 5 alu instructions16 table 6 load and store instructions17 table 7 conditional move instructions17 table 8 branch and jump instructions18 table 9 control instructions19 table 10 coprocessor instructions19 table 11 custom engine interface operations20 table 12 custom engine interface signals20 table 13 smmu address mapping21 table 14 list of exceptions22 table 15 mips i instructions not supported by mips1628 table 16 mips16 instructions that support mips i28 table 17 new mips16 instructions29 table 18 pcrelative addressing29 table 19 local memory interface modules31 table 20 icache configurations33 table 21 icache ram interfaces34 table 22 imem configurations35 table 23 imem ram interfaces35 table 24 irom configurations36 table 25 irom rom interfaces37 table 26 dcache configurations38 table 27 dcache ram interfaces38 table 28 dmem configurations39 table 29 dmem ram interfaces39 table 30 line read interleave order43 table 31 lbus signal description44 table 32 lbus byte lane assignment45 table 33 lbus commands issued by the lbc46 table 34 lbc interface signals54 table 35 coprocessor interface signals57 table 36 ejtag pinout62 table 37 ejtag ac characteristics62 table 38 ejtag synthesis constraints62 table 39 singleprocessor pc trace pinout64 table 40 singleprocessor pc trace ac characteristics64 table 41 summary of macdiv instructions67 table 42 16bit multiply and multiplyaccumulate instructions71 table 43 32bit multiplyaccumulate instructions72 table 44 lx4280 processor port summary77 table 45 instruction groupings for stall definition85 table 46 loadstore ops stall matrix89 table 47 cycles required between mac instructions90may 9 2001 lx4280 lexra proprietary confidential vi release 19 may 9 2001 lx4280 lexra proprietary confidential vii release 19 list of figures figure 1 lx4280 processor overview2 figure 2 superscalar processor core module partitioning7 figure 3 superscalar instruction issue9 figure 4 lexra system bus diagram41may 9 2001 lx4280 lexra proprietary confidential viii release 19 may 9 2001 lx4280 lexra proprietary confidential 1 release 19 1 lx4280 product overview 11 introduction this data sheet describes lexras lx4280 processor complete mips r3000class processor subsystem developed for ease of integration see figure1 on page2 the major subsystems are the cpu core local memory interfaces lmi and lbus controller lbc the technology includes optional interfaces to customerdefined coprocessors ci13 and optional customer extensions to the mips isa custom engine the local instruction memories and data memories may include fixed ram andor cache the sizes are configurable the lx4280 pipeline is dualissue sixstage architecture pipe executes data memory access and all mips instructions except multiply and divide operations while pipe b executes alu instructions and optionallymultiplyanddivideinstructionsthisapproachallowsaspeedupofupto30dependingonthe characteristics of the application just by recompiling the code in critical functions that are handcoded in assembly language the lx4280 can provide greater than 80 speedup over the singleissue lx4189 processor running at the same clock rate featuresintroducedinlexrasriscproductlinesupportsystemonchipsocdesignincludingcustomer defined coprocessors and customer extensions to the mips isa are standard in the lx4280 configuration options include extendedjtag ejtag support for debug and incircuit emulation ice lexras products include the same memory management stub smmu as the lx4189 because the lx4280 executes the mips instruction set wide variety of thirdparty software tools are available including compilers operating systems debuggers and incircuit emulators the assembler extensions and cycle accurate instruction set simulator iss are developed by lexra programmers can use offtheshelf c compilers for initial coding then replace performancecritical loops with optimized assembler code key features complete processor subsystem executes mips i isa except unaligned loads stores extensive thirdparty tool support dual instruction issue highperformance 6stage pipeline local instruction memory andor cache configurable sizes local data memory andor cache configurable sizes memory interface logic included system bus controller optional customerdefined coprocessors optional customerdefined instruction extensions supports ejtag draft 20 for debugging portable rtl model available as synthesizable rtl portable to any 025 µm 018µmor 015µm logic and sram process foundry partners include ibm tsmc and umcmay 9 2001 lx4280 lexra proprietary confidential 2 release 19 easy asic design single phase clocking fully synchronous design easy to interface system bus protocol supports popular eda tools easy rtl customization userconfigurable local memory reset method clock distribution userconfigurable ejtag breakpoints over 30 other configuration options interfaces for adding applicationspecific instructions 12 lx4280 processor overview the figure below shows the structure of the lx4280 processor figure 1 lx4280 processor overview mipsisaexecution thelx4280supportsthemipsiprogrammingmodeltwosourceoperandscanbe supplied and one destination update performed per cycle the second operand is either register or 16bit immediatetheinstructionsetincludesawideselectionofaluoperationsexecutedbytheralulexras proprietary register based alu the ralu also generates memory addresses for 8bit 16bit and 32bit register loads from stores to memory by adding register base to an immediate offset branches are based on comparisons between registers rather than flags and are therefore easy to relocate optional links following jump or branch instructions assist with subroutine programming the mips unaligned load and store instructions are not supported because they represent poor priceperformance tradeoff for embedded applications pipeline lx4280 instructions are executed by sixstage pipeline that has been designed so that all transactions internal to the lx4280 as well as at the interfaces occur on the positive edge of the processor clock twophase clocks are not used exception handling the mips r3000 exception handling model is supported exceptions include both instructionsynchronous trapsaswellashardwareandsoftware interruptsthestatusregistercontrolsthe interrupt mask and operating mode exceptions are prioritized when an exception is taken control is transferred to the exception vector the current instruction address is saved in the epc register and the exceptionsourceisidentifiedinthecauseregisterauserprogramlocatedattheexceptionvectoridentifiesinst ramicache ram inst lmi data lmi data ramdcache ramlx4280 cpu corecustom engine ci 13ceiinstruction bus addr data ctl data bus addr data ctl coprocessorslbcsystem bus denotes customer logicinst rommay 9 2001 lx4280 lexra proprietary confidential 3 release 19 thecauseoftheexceptionandtransferscontroltotheapplicationspecifichandlerintheeventofanaddress error exception the badvaddr holds the failing address coprocessoroperations thelx4280supports32bitcoprocessoroperationstheseincludemovestoand from the coprocessor general registers and control registers mtcz mfcz ctcz cfcz coprocessor loads and stores lwcz swcz and branches based on coprocessor condition flags bczt bczf the lexrasuppliedcoprocessorinterfacecansupportcoprocessoroperationsinasinglecyclewithoutpipeline stalls lx4280 provides excellent priceperformance and timetomarket there are two main approaches which lexra has taken to achieve this deliver simple building blocks outside the processor core to enable system level customizations such as coprocessors application specific instructions memories and busses deliver either fully synthesizable verilog source model or fully implemented hardcore called smoothcore for popular pureplay foundries section13 describes the building blocks and section14 describes the deliverable models 13 system level building blocks the lx4280 processor is designed to easily fit into different target applications it provides the following building blocks simple memory management unit smmu an optimized custom engine interface cei up to three coprocessor interfaces ci flexible local memory interface lmi that supports instruction cache instruction ram instruction rom data cache and data ram lexra bus controller lbc to connect peripheral devices and secondary memories to the processors own local buses the following sections discuss each of these system building block interfaces 131 smmu the lx4280 smmu is designed for embedded applications using single address space its primary function is to provide memory protection between user space and kernel space the smmu is consistent with the mips address space scheme for userkernel modes mapping and cacheduncached regions 132 local memory interface the lx4280s harvard architecture provides local memory interfaces lmis that support instruction memory and data memory synchronous memory interfaces are employed for all memory blocks the lmi block is designed to easily interface with standard memory blocks provided by asic vendors or by third party library vendors the lmis provide twoway set associative instruction cache interface and directmapped writethrough datacacheinterfacethetagcomparelogicaswellasacachereplacementalgorithmareprovidedaspartofmay 9 2001 lx4280 lexra proprietary confidential 4 release 19 the lmi one of the instruction cache sets may be locked down as unswappable local memory local instructionanddatamemoriescanalsobemappedtofixedregionsofthephysicaladdressspaceandinclude nonvolatile memory such as rom flash or eprom 133 coprocessor interface lexrasuppliesanoptionalcoprocessorinterfaceciforapplicationsrequiringthisfunctionalityuptothree cis may be implemented in one design the coprocessor interface eavesdrops on the instruction bus if coprocessor load lwcz or move to mtcz ctcz is decoded data is passed over the data bus into ci register then supplied to the designerdefined coprocessor similarly if coprocessor store swcz or movefrommfczcfczisdecodeddataisobtainedfromthecoprocessorandloadedintoaciregister then transferred onto the data bus in the following cycle the design interface includes data bus fivebit addressandindependentreadandwriteselectsforcoprocessorregistersandcontrolregistersthelx4280 pipeline and harvard architecture permit single cycle coprocessor access and transfer an application defined coprocessor condition flag is synchronized by the ci then passed to the sequencer for testing in branch instructions 134 custom engine interface the lx4280 includes custom engine interface cei that the application may use to extend the mips i alu opcodes with applicationspecific or proprietary operations similar to the standard alu the cei supplies the custom engine two input 32bit operands src1 and src2 one operand is selected from the register file depending on the most significant 6 bits of the opcode the second operand is either selected from the register file or is 16bit signextended immediate the opcode is locally decoded by the custom engine and following execution by the custom engine the result is returned on the 32bit result bus to the lx4280 to support multicycle operations stall input is included in the interface 135 lexra bus controller thelexrabuscontrollerlbcistheinterfacebetweenthelx4280andtheoutsideworldwhichincludes dram and various peripherals it is nonmultiplexed nonpipelined and nonparity checked bus to providetheeasiestbusprotocolfordesignintegrationontheprocessorsidethelbcprovidesawritebuffer of configurable depth to support the writethrough cache as well as the control for byte and halfword transfers on the peripheral side the lbc is designed to easily interface to industry standard bus protocols such as pci usb and firewire thelbccanrunatanyspeedfrom33mhzuptothespeedofthelx4280processorcoreinboththertl core and smoothcore 136 building block integration the lx4280 configuration script lconfig provides menu of selections for designers to specify building blocks needed number of different memory blocks target speed and target standard cell library next the configuration software automatically generates top level verilog model makefiles and scripts for all steps of the design flow for testability purposes all building blocks contain scan control signals the lexra synthesis scripts include scan insertion which allows atpg testing of the entire lx4280 core 14 rtl core smoothcore lexra delivers lx4280 as rtl core and smoothcore rtlcore forfullasicdesignsthertlisfullysynthesizableandscantestableverilogsourcecodeandmay 9 2001 lx4280 lexra proprietary confidential 5 release 19 maybetargetedtoanyasicvendorsstandardcelllibrariesinthiscasethedesignermaysimplyfollowthe asicvendorsdesignflowtoensurepropersignoffinadditiontotheverilogsourcecodeandsystemlevel test bench lexra provides synthesis scripts as well as floor plan guidelines to maximize the performance of the lx4280 smoothcore forcotdesignsthataremanufacturedatpopularfoundriessuchasibmtsmcandumc smoothcore port is the quickest lowest cost and best performance choice in this case the lx4280 has been fully implemented and verified as hard macro all data path register file and interface optimizations havebeenperformedtoensurethesmallestdiesizeandfastestperformancepossiblefurthermorethereisa scan based test pattern that provides excellent fault coverage during manufacturing tests 15 eda tool support lexra supports mainstream eda software so designers do not have to alter their design methodology the following is snapshot of eda tools currently supported table 1 eda tool support design flow tools supported simulation synopsys vcs cadence verilog xl cadence ncverilog synthesis synopsys design compiler static timing synopsys primetime dft synopsys tetramax pr avant apollo iimay 9 2001 lx4280 lexra proprietary confidential 6 release 19 may 9 2001 lx4280 lexra proprietary confidential 7 release 19 2 lx4280 architecture 21 hardware architecture 211 module partitioning the lx4280 processor core includes two major blocks the ralu register file and alu and the cp0 controlprocessortheraluperformsaluoperationsandgeneratesdataaddresseswhilecp0includes instruction address sequencing exception processing and product specific mode control the ralu and cp0 are looselycoupled and include their own independent instruction decoders figure 2 superscalar processor core module partitioningn z ov_a dbus1 data addrjump addresslink address pridexception processing logicpc and sequencercp0 and controlraluinstruction address and control instructions register file 32 x 32b r0 0 8p 4r4waddr_ra2addr_wa1 addr_ra1 addr_rb2addr_wb1 addr_rb1addr_wb2addr_wa2 alu cbs0cbs2 cbe0cbe2bypass datara2wa1 wa2 ra1 alu b cei0cei1 opaopb mac optionalwb1 wb2 rb2rb1 res1opaopb custom engine optionalres0may 9 2001 lx4280 lexra proprietary confidential 8 release 19 212 six stage pipeline the lx4280 has six stage pipeline the lx4280 icache and iram can fetch two 32bit instructions i0_i i1_i simultaneously following the superscalarinstructionbufferandissuelogicdescribedbelowtheinstructionsareissuedtopipebandpipe as appropriate to avoid degrading operating frequency the superscalar issue logic operates during the decode stage dstage of the pipeline support for fully synchronous memories in the lx4280 has the added benefit of isolating the processor logic from the customersupplied memories in the instruction cache thus facilitating integration of the lx4280 into soc designs as result of the dstage two cycle penalty is incurred on branch prediction failure vs the onecycle penaltyinthelx4180fivestagepipelinehoweverthelx4280sconditionalmoveinstructionscanbeused to avoid any wasted cycles in the control of realtime critical loops 22 dual issue 221 instruction fetch twoinstructionsarefetchedduringeachinstructioncacheaccessintheeventofacachemisstheprocessor willbestalleduntilthecachelinecontainingtherequestedinstructionsisretrievedintheeventthatonlyone instruction of fetched pair can issue the fetch will be stalled until the second instruction is issued to the pipeline instructionfetchesalwaysoccuronanaligned64bitaddressboundaryintheeventofabranchtoanodd32 bitaddressinthe64bitboundarybothinstructionsinthe64bitwindowwillbefetchedbutonlythesecond odd instruction will issue to the pipeline the first or even instruction will be ignored 222 instruction analysis and select logic the instruction analysis and select logic is located in the dstage of the pipeline during this stage the processor analyzes both instructions in fetched pair and determines which pipeline can execute the instructions for example if the first instruction in the pair i0 is an add and the second instruction i1is mac the processor will determine that i0 can be executed by either pipe or pipe b while i1 can be executedbypipebtheinstructionselectlogicwillthenissuei0topipeaandi1topipebsinceonlypipe b can execute the mac instruction if both instructions of the fetched pair can only be issued to one pipeline for example pair of mac instructionswhichcanonlyissuetopipebthetwoinstructionswillbeissuedseriallytheinstructionfetch will be stalled by one cycle until the second instruction has been issued to the pipeline if the result of the first instruction i0 is used by the second instruction i1 only one of the two instructions will issuethe secondinstructioni1 willissue in thenext cycleandtheinstructionfetchwill bestalled for one cycle until i1 has been issuedstage 1 i instruction fetch stage 2 d decode stage 3 s source fetch register file read stage 4 execution and address generation stage 5 m memory data select read data cache store and tags stage 6 w write back to register filemay 9 2001 lx4280 lexra proprietary confidential 9 release 19 223 mips16 themips16_nsignalindicateswhetherornotmips16codecompressionhasbeenenabledifsoeach32 bit fetch is interpreted as pair of 16bit instructions encoded according to the mips16 specification mips16 instructions are not dualissued but always issued to pipe it is expected that mips16 code compression is enabled for outer loop code where code density is more important than performance the criticalregisterfilereadaddressesformips16areresolvedduringthedstagesothatregisterfileaccessfor mips16 instructions as for 32bit mips instructions can begin on the rising edge of the sstage clock figure 3 superscalar instruction issue 23 ralu data path 231 overview thesuperscalarraludatapathisillustratedinthefigureoperationsaredividedbetweenpipeaandpipe binsuchawaythattheraluistheonlymajorsectionoftheprocessorwhichrequiresbothpipeaandb instructionscoprocessor0aswellastheoptionalcustomerdefinedcoprocessors13onlyrequirethepipe instruction to first approximation the superscalar ralu is doubling of the lx4180 ralu it includes an 8port 4r4w general register file with 4ports 2r2w assigned to pipe and 4ports 2r2w assigned to pipe b in each pipe one write port is dedicated to register file updates from the data bus loads mfcz cfcz mux instructions analysis logic instructions select logicmux mux mips16_n1 inst issue statev0v1 i0 i1 mux mux stall1i and iram ord_s_r ib_s_r to pipe b ia_s_r to pipe areg 32 32reg reg 1nop nop32 32 1 i1_i i0_i v_imay 9 2001 lx4280 lexra proprietary confidential 10 release 19 moves from coprocessor the remaining three ports 2r1w are available for the other operations assigned to that pipeas aresultloads can dualissuewith any macor aluinstruction without registerport access restriction each pipe has an alu and nearlyindependent control section differences occur in the assignment of operationstopipeaandpipebandinthepipelinefeaturestosupportsuperscalar thepipelinedifferences in the ralu to support superscalar issue are datamustbeforwardedfrompipeapipebtopipebpipeawhentheinputtoapipe b pipe execution unit requires result computed earlier in pipe pipeb the forwarding paths are illustrated in figure2 ifbothpipeaandpipeboperationswritethesameregistertheralucontrolexamines the instruction order and suppresses the write for the earlier instruction based on program order 232 assignment of instructions to pipe pipe b table2 lists the detailed assignment of instructions to pipe and pipe b pipe b is called the mac pipe becauseituniquelysupportsmultiplyaccumulateaswellasmultiplyanddivideoperationsthemacunit whichisattachedtopipebascustomengine0ce0includestheaccumulatorregistersincludinghiand and therefore also supports the move toandmove from operations which transfer data between these registers and the general register file pipe is called the loadstore pipe because it uniquely supports the load and store operations the coprocessor operations and all sequencing control instructions branches jumps are unique to pipe as result pipe b instructions are not routed to coprocessors the opcodes reserved for customer defined custom engine 1 ce1 are routed to pipe b since ce1 is attached to pipe b all alu operations are available in both pipe and pipe b as result performance is improved particularly in computationintensive programs and the design is simplified because major subblocks in alu and alu b are replicated the custom engine interface cei is available for customer proprietary operations in pipe b this allows the customer extensions to maintain high throughput since they can dualissue with load and store instructions which issue to pipe table 2 assignment of instructions of pipe pipe b pipe pipe b the loadstore pipe the mac pipe mips 32bit general instructionsmips32bitgeneralinstructions except ce1 custom engine opcodes multudivumfhimflo mthi mtlo madu msubu madh madl mazh mazl msbh msbl mszh mszlmultudivumfhimflo mthi mtlo madu msubu madh madl mazh mazl msbh msbl mszh mszl ce1 custom engine opcodes mips 32bit alu instructions note load or store instructionsmay 9 2001 lx4280 lexra proprietary confidential 11 release 19 24system control copr ocessor cp0 the system control coprocessor cp0 is responsible for instruction address sequencing and exception processing fornormalexecutionthenextinstructionaddresshasseveralpotentialsourcestheincrementoftheprevious address branch address computed using pcrelative offset or jump target address for jump addresses the absolute target can be included in the instruction or it can be the contents of generalpurpose register transferred from the ralu branches are assumed or predicted to be taken in the event of prediction failure two stall cycles are incurred and the correct address is selected from special backup register statistics from several large programssuggestthatthesestallswilldegradeaveragelx4280throughputbyseveralpercenthoweverthe net effect of the lx4280s branch prediction on performance is positive because this technique eliminates certain critical paths and therefore permits higher speed system clock if anexception occurs cp0 selects one of several hardwired vectors for the next instruction address the exception vector depends on the mode and specific trap which occurred this is described further in section34 exception processing the following registers which are visible to the programming model are located in cp0 table 3 cp0 registersmips 32bit control instructionsj jal jr jalr jalx syscall break all branch instructions all mfcz mtcz swcz lwcz mips16 instructions doubleword instructionsall mips16 instructions except multudivumfhimflo madh madl mazh mazl msbh msbl mszh mszlmultudivumfhimflo madh madl mazh mazl msbh msbl mszh mszl ejtag instructions deret sdbbp including mips16 sdbbp lexra control instructionsmtlxc0mflxc0 cp0 register number function badvaddr 8 holds bad virtual address if address exception error occurs status 12 interrupt masks mode selects cause 13 exception cause epc 14 holds address for return after exception handler prid 15 processor id readonly 0x0000c201 for lx4280 cctl 20 instruction and data memory controlpipe pipe b the loadstore pipe the mac pipemay 9 2001 lx4280 lexra proprietary confidential 12 release 19 epc status cause and badvaddr are described further in the section34 prid is readonly register that allows the customers software to identify the specific version of the lx4280 that has been implemented in their product the cctl register is lexra defined cp0 register used to control the instruction and data memories as described in section52 cache control register cctl the contents of the above registers can be transferred to and from the ralus generalpurpose register file usingcp0operationsunlikeregisterslocatedincoprocessors13theycannotbeloadedorstoreddirectly to data memory 25 lowoverhead prioritized interrupts thelx4280includeseightnewlowoverheadhardwareinterruptsignalsthesesignalsarecompatiblewith the r3000 exception processing model and are useful for realtime applications these interrupts are supported with three new lexra cp0 registers estatus ecause and intvec accessed with the new mtlxc0 and mflxc0 variants of the mtc0 and mfc0 instructions as with any cop0instructionacoprocessorunusableexceptionistakeniftheseinstructionsareexecutedwhileinuser mode and the cu0 bit is 0 in the cp0 status register the three new lexra cp0 registers are estatus 0 ecause 1 and intvec 2 and are defined as follows estatus lx cop0 reg 0 readwrite ecause lx cop0 reg 1 readonly intvec lx cop0 reg 2 readwrite estatus contains the new interrupt mask bits im158 which are reset to 0 so that none of the new interruptswillbeactivatedregardlessoftheglobalinterruptsignaliecip158forthenewinterruptsignals islocatedinecauseandisreadonlythesefieldsaresimilartotheimandipfieldsdefinedinther3000 exception processing model except that the new interrupts are prioritized in hardware and each have dedicated exception vector ip15 has the highest priority while ip8 has the lowest priority however all new interrupts are higher priority than ip70 the processor concatenates the program defined base address for the exception vectorswiththeinterruptnumberforformtheinterruptvectorasshowninthetablebelowtwoinstructions can be executed in each vector typically these will consist of jump instruction and its delay slot with the target of the jump being either shared interrupt handler or one that is unique to that particular interrupt31 24 23 16 15 0 0 im158 0 31 24 23 16 15 0 0 ip158 0 31 6 5 0 base 0may 9 2001 lx4280 lexra proprietary confidential 13 release 19 table 4 prioritized interrupt exception vectors when vectored interrupt causes an exception all of the standard actions for an exception occur these include updating the epc register and certain subfields of the standard status and cause registers in particulartheexceptioncodeofthecauseregisterindicatesinterruptandthecurrentandprevious mode bits of the status register are updated in the usual mannerinterrupt number exception vector 15 base 6b111000 14 base 6b110000 13 base 6b101000 12 base 6b100000 11 base 6b011000 10 base 6b010000 9 base 6b001000 8 base 6b000000 may 9 2001 lx4280 lexra proprietary confidential 14 release 19 may 9 2001 lx4280 lexra proprietary confidential 15 release 19 3 lx4280 risc programming model this section describes the lx4280 programming model section31 summary of mipsi instructions containsalistsummarizingallmipsioperationssupportedbythelx4280theseopcodesmaybeextended by the customer using lexras custom engine interface cei this capability is described in section32 opcode extension using the custom engine interface cei section33 memory management describes the simplified memory management unit smmu which is physically incorporated in the lx4280 lmi the smmu provides sufficient memory management capabilities for most embedded applications while ensuring execution of thirdparty mips software development tools thelx4280supportsthemipsr3000exceptionprocessingmodelasdescribedinsection34 exception processing thelx4280supportsallmipsicoprocessoroperationsthecustomercanincludeonetothreeapplication specific coprocessors lexra provides functional block called the coprocessor interface ci which allows thecustomerasimplifiedconnectionbetweentheircoprocessorandtheinternalsignalsofthelx4280the ci is described in section35 the coprocessor interface ci 31 summary of mipsi instructions the lx4280 executes mipsi instructions as detailed in the tables below to summarize the lx4280 executes mipsi instructions with the following exclusions the unaligned loads and stores lwl swl lwrswrarenotsupportedbecausetheyaddsignificantsiliconareaforlittlebenefitinmostapplications the following conventions are employed in the instruction descriptions encloses list of syntax choices from which one must be chosen encloses list of values that are concatented to form larger value n value replicates concatenates value n times value3 bits selected from value ra offset memory address computation and corresponding memory contents 4b0000 sized constant binary value 32h1234_5678 sized constant hexadecimal value expr b select if expr is true otherwise select bmay 9 2001 lx4280 lexra proprietary confidential 16 release 19 311 alu instructions table 5 alu instructions instruction description add rd ra rb addu rd ra rb addi rd ra immediate addiu rd ra immediaterd ra rb immediate add reg ra to either reg rb or 16bit immediate sign extendedto32bitsresultisstoredinregrdaddandaddi can generate overflow trap addu and addiu do not sub rd ra rb subu rd ra rbrd ra rb subtract reg rb from reg ra result is stored in register rd sub can generate overflow trap subu does not and rd ra rb andi rd ra immediaterd ra rb immediate logicaland of reg ra with either reg rb or 16bit immediate zeroextended to 32 bits result is stored in reg rd or rd ra rb ori rd ra immediaterd ra rb immediate logicalor of reg ra with either reg rb or 16bit immediate zeroextended to 32 bits result is stored in reg rd xor rd ra rb xori rd ra immediaterd ra rb immediate logicalxor of reg ra with either reg rb or 16bit immediate zeroextended to 32 bits result is stored in reg rd nor rd ra rb rd ra rb logicalnor of reg ra with either reg rb or zeroextended 16 bit immediate result is stored in reg rd lui rd immediate rd immediate 16b0 the 16bit immediate is stored into the upper half of reg rd the lower half is loaded with zeroes sll rd rb immediate sllv rd rb rard rb ra immediate regrbisleftshiftedby031theshiftamountiseitherthe5b immediate of the 5 lsb of ra result is store in reg rd srl rd rb immediate srlv rd rb rard rb ra immediate reg rb is rightshifted by 031 the unsigned shift amount is either the 5b immediate or the 5 lsb of ra result is stored in reg rd sra rd rb immediate srav rd rb rard rb ra immediate reg rb is arithmetic rightshifted by 031 the unsigned shift amount is either the 5b immediate or the 5 lsb of ra result is stored in reg rd slt rd ra rb sltu rd ra rb slti rd ra immediate sltiu rd ra immediaterd ra rb immediate 1 0 if reg ra is less than rb immediate set rd to 1 else 0 the 16bitimmediateissignextendedforsltsltithecompari is signed for slu sltiu the comparison is unsignedmay 9 2001 lx4280 lexra proprietary confidential 17 release 19 312 load and store instructions table 6 load and store instructions 313 conditional move instructions table 7 conditional move instructionsinstruction description lb rd offsetra lbu rd offsetra lh rd offsetra lhu rd offsetra lw rd offsetrard memoryra offset reg rd is loaded from data memory the memory address is computed as base offset where the base is reg ra and the offset is the 16bit offset signextended to 32 bits lb lbu addresses are interpreted as byte addresses to data memorylhlhuashalfword16bitaddresseslwasword 32bit addresses thedatafetchedinlblhlbulhuissignextendedzero extended to 32bits for storage to reg rd rd cannot be referenced in the instruction following load instruction sb rb offsetra sh rb offsetra sw rb offsetrarb memoryra offset reg rb is stored to data memory the memory address is computed as base offset where the base is reg ra and the offset is the 16bit offset signextended to 32 bits sbaddressesareinterpretedasbyteaddressestodatamem ory the 8 lsb of rb are stored sh addresses are interpreted as halfword addresses to data memory the 16 lsb of rb are stored instruction description movz rd rs rt rd rt 0 rs rd if the contents of general register rt are equal to 0 the general register rd is updated with rs otherwise rd is unchanged movn rd rs rt rd rt 0 rs rd if the contents of general register rt are not equal to 0 the gen eral register rd is updated with rs otherwise rd is unchangedmay 9 2001 lx4280 lexra proprietary confidential 18 release 19 314 branch and jump instructions table 8 branch and jump instructions instruction description beq ra rb destination bne ra rb destinationif cond pc pc 4 14 destination15 destination 2b00 else pc pc 8 where cond ra rb for eq ra ne rb for ne and desti nation is 16bit value for beq bne the instruction after the branch delay slot is always executed blez ra destination bgtz ra destinationif cond pc pc 4 14 destination15 destination 2b00 else pc pc 8 where cond ra 0 for ra 0 for gt and destina tion is 16bit value forblezbgtztheinstructionafterthebranch delayslotis always executed bltz ra destination bgez ra destinationif cond pc pc 4 14 destination15 destination 2b00 else pc pc 8 where cond ra 0 for lt ra 0 for ge and destina tion is 16bit value forbltzbgeztheinstructionafterthebranch delayslotis always executed bltzal ra destination bgezal ra destinationsimilar to the bltz and bgez except that the address of the instruction following the delay slot is saved in r31 regardless of whether the branch is taken j target pc pc3128 target 2b00 target is 26bit absolute the instruction following j delay slot is always executed jal target same as above except that the address of the instruction fol lowing the delay slot is saved in r31 jr ra pc ra the instruction following jr delay slot is always executed jalr ra rd same as above except that the address of the instruction fol lowing the delay slot is saved in rdmay 9 2001 lx4280 lexra proprietary confidential 19 release 19 315 control instructions table 9 control instructions 316 coprocessor instructions table 10 coprocessor instructionsinstruction description syscall the sys trap occurs when syscall is executed break the bp trap occurs when break is executed rfe causes the kuie stack to be popped used when returning from the exception handler see exception processing below sleep initiates lowpower standby mode this is lexra specific operation lexop see section36 power savings mode instruction description lwcz rcgen offsetra rcgen memoryra offset coprocessor z general reg rcgen is loaded from data mem ory the memory address is computed as base offset where the base is reg ra and the offset is the 16bit offset signextended to 32 bits rcgen cannot be referenced in the following instruction one cycle delay swcz rcgen offsetra rcgen memoryra offset coprocessor z general reg rcgen is stored to data memory the memory address is computed as base offset where the base is reg ra and the offset is the16bit offset sign extended to 32 bits mtcz rb rcgen ctcz rb rcconin mtczctcz the general register rb is moved to copro cessor z general control reg rcgenrccon rcgen and rccon cannot be referenced in the following instruction mfcz rb rcgen cfcz rb rcconin mfczcfcz the coprocessor z general control reg rcgenrccon is moved to the general register rb rb cannot be referenced in the following instruction bczt destination bczf destinationif cond pc pc 4 14 destination15 destination 2b00 else pc pc 8 where cond cpcondz true for bczt cpcondz false for bczf forbcztbczftheinstructionafterthebranch delayslotis always executedmay 9 2001 lx4280 lexra proprietary confidential 20 release 19 32 opcode extension using the custom engine interface cei 321 cei operations customers may add proprietary or applicationspecific opcodes to their lx4280 based products using the custom engine interface cei the new instructions take one of the following forms illustrated below and use reserved opcodes table 11 custom engine interface operations lexra permits customer operations to be added using the four 4 iformat opcodes and six 6 rformat opcodes listed in the table above other opcode extensions in future lexra products will notutilize the opcodes reserved above when the cei decodes newopi or newopr it must signal the core that custom operation has been executed so that the reserved instruction trap will not be taken multicycle custom operations may be executed by asserting cesel note the custom operation may choose to ignore the src1 and src2 operands supplied by the cei and reference customer registers instead results can also be written to an implicit customer register however unless d 0 is coded register in the core will also be written 322 interface signals table 12 custom engine interface signalsnew instruction description available opcodes newopi rd ra immed rd ra newopi immed reg ra is supplied to the src1 port of cei and the 16bit immediate sign extended to 32bits is supplied to src2 the result of the customers newopi is placed on the cei input port res and stored in reg rdinst3126 24 27 newopr rd ra rb rd ra newopr rb reg ra is supplied to the src1 port of cei and reg rb is supplied to src2 the result of the customers newopi is placed on the cei input port res and stored in reg rdinst3126 0 and inst50 5658 606263 signal io description src1310 output operand supplied to customer logic src2310 output operand supplied to customer logic res310 input result of customer logic supplied to core ceiop110 output instruction op and subop fields to be decoded by customer logicmay 9 2001 lx4280 lexra proprietary confidential 21 release 19 33 memory management thelx4280includesasimplifiedmemorymanagementunitsmmufortheinstructionmemoryaddress and the data memory address these units are physically located in the local memory interface lmi modulesthehardwiredvirtualtophysicaladdressmappingperformedbythesmmuissufficienttoensure execution of thirdparty software development tools table 13 smmu address mapping 34 exception processing thelx4280implementsthemipsr3000exceptionprocessingmodelasdescribedbelowfeaturesspecific to onchip tlb support are not included in the discussion below the term exception refers to both traps which are nonmaskable program synchronous events and interrupts which result from unmasked asynchronous events thelistbelowisnumberedfromhighesttolowestpriorityexccodeisstoredincausewhenanexception is taken note that sys bp ri cpu can share the same priority level because only one can occur in particular time slotcehalt input indicates that multicycle custom operation is in progress cesel input indicates that cei operation has been decoded virtual address space description mapped to physical address 0xff00_0000 to 0xffff_ffffejtag address space 16 mbyte uncached this address range is reserved for ejtag use only0xff00_0000 to 0xffff_ffff 0xc000_0000 to 0xfeff_ffffkseg2 1gbyte minus 16 mbyte addressable only in kernel mode cached0xc000_0000 to 0xfeff_ffff 0xa000_0000 to 0xbfff_ffffkseg1 05 gbyte addressable only in ker nel mode uncached used for io devices0x0000_0000 to 0x1fff_ffff 0x8000_0000 to 0x9fff_ffffkseg0 05 gbyte addressable only in ker nel mode cached0x0000_0000 to 0x1fff_ffff differentiated from kseg1 addresses with an internal signal 0x0000_0000 to 0x7fff_ffffkuseg 2gbyte addressableinkernelor user mode cached0x4000_0000 to 0xbfff_ffffsignal io descriptionmay 9 2001 lx4280 lexra proprietary confidential 22 release 19 table 14 list of exceptions exception priority exccode description reset 1 reset trap adel instruction2 4 address exception trap instruction fetch occurs if the instruction address is not wordaligned or if kernel address is referenced in user mode ov 3 12 arithmeticoverflowtrapcanoccurasa result of signed add or subtract opera tions sys 4 8 syscall instruction trap occurs whensyscallinstructionisexecuted bp 4 9 break instruction trap occurs when break instruction is executed ri 4 10 reservedinstructiontrapoccurswhen areservedopcodeisfetchedreserved opcodes are listed below cpu 4 11 coprocessor usability trap occurs when an attempt is made to execute coprocessor n operation and copro cessor n is not enabled adel data 5 4 address exception trap data fetch occurs if the data address is not prop erly aligned or if kernel address is generated in user mode ades 6 5 address exception trap data store occurs if the data address is not prop erly aligned or if kernel address is generated in user mode int 7 0 unmasked interrupt there are six 6 levelsensitive hardware interrupt request signals into the lx4280 core eachissynchronizedbythecoretothe lx4280 system clock in addition pro gram writes to cause98 are soft wareinitiated interrupt requests each of the eight 8 requests has an associ ated mask bit in status int is gener ated by any unmasked request when interrupts are globally enabledmay 9 2001 lx4280 lexra proprietary confidential 23 release 19 341 exception processing registers status coprocessor 0 general register address 12 cu cun 10 indicates that coprocessor n is usableunusable in coprocessor instructions bev bootstrap exception vector selects between two trap vectors see below im interrupt masks for the six hardware interrupts and two software interrupts kuie ku01indicateskernelusermodeinthelx4280usermodevirtualaddressesmusthave msb 0 in kernel mode the full address space is addressable ie 10 indicates that interrupts are enabled disabled the kuo ieo kup iep kuc and iec fields form threelevel stack hardware stack kuie signals the currentvalues are kuciec the previousvalues are kupiep and the oldvalues those before previous are kuoieo see section342 statusisreadorwrittenusingmtc0andmtf0operationsonresetbev1kuciec0theother bitsinstatusareundefinedthe0fieldsareignoredonwriteandare0onreaditisrecommendedthatthe user explicitly write them to 0 to insure compatibility with future versions of the lx4280 cause coprocessor 0 general register address 13 bd branch delay indicates that the exception was taken in branch or jump delay slot ce coprocessorexceptioninthecaseofacoprocessorusabilityexceptionindicatesthenumber of the responsible coprocessor ip interrupt pending each bit in ip70 indicated an associated unmasked interrupt request exccode the exccode listed above for the different exceptions are stored here when as exception occurs causeisreadorwrittenusingmtc0andmtf0operationstheonlyprogramwritablebitsincauseare ip10 which are called softwareinterrupts cause isundefinedatreset the 0 fieldsare ignored on write and are 0 on read epc coprocessor 0 general register address 14 epc is 32bit readonly register which contains the virtual address of the next instruction to be executed following return from the exception handler if the exception occurs in the delay slot of branch epc will hold the address of the branch instruction and bd will be set in cause the branch will typically be re executed following the exception handler badvaddr coprocessor 0 general register address 8 badvaddr is 32bit readonly register containing the virtual address instruction or data which3128 2723 22 2116 158 76 5 4 3 2 1 0 cu30 0 bev 0 im70 0 kuo ieo kup iep kuc iec 31 30 2928 2716 158 7 62 10 bd 0 ce10 0 ip70 0 exccode40 0may 9 2001 lx4280 lexra proprietary confidential 24 release 19 generated an adel or ades exception error 342 exception processing entry and exit when an exception occurs the instruction address changes to one of the following locations the kuie stack is pushed kuo ieo kup iep kuc iec before push kup iep kuc iec 0 0 after push whichdisablesinterruptsandputstheprograminkernelmodethecodeexccodefortheexceptionsource isloadedintocausesothattheapplicationspecificexceptionhandlercandeterminetheappropriateaction the exception handler should not reenable interrupts until necessary context has been saved to return from the exception the exception handler first moves epc to general register using mfc0 followed by jr operation rfe only pops the kuie stack kup iep kuc iec 0 0 before pop kup iep kup iep kuc iec after pop this example assumes that kuie were not modified by the exception handler therefore typical sequence of operations to return from the exception handler would be 35 the coprocessor interface ci designers may implement up to three coprocessors to interface with the lx4280 the contents of these coprocessors may include up to thirtytwo 32 32bit general registers and up to thirtytwo 32 32bit controlregisters thegeneralregistersmaybemovedtoandfromtheralusregistersusingmtczmfcz operationsorbeloadedandstoredfromdatamemoryusinglwczswczoperationsthecontrolregisters may only be moved to and from the ralus registers using ctcz cfcz operations lexra supplies simple coprocessor interface ci model allowing the customer to easily interface coprocessor to the lx4280 the ci supplies set of control address and data busses that may be tied directly to the coprocessor general and special registers the ci is described in more detail in section7 lx4280 coprocessor interface 36 power savings mode the operating system kernel can initiate power savings standby mode using the lexra specific sleepreset 0xbfc0_0000 other exceptions bev 0 0x8000_0080 other exceptions bev 1 0xbfc0_0180 mfc0 epc r26 r26 is temporary storage register in the ralu jr r26 rfemay 9 2001 lx4280 lexra proprietary confidential 25 release 19 instruction this holds the lx4280s internal clocks in the high state until an external hardware interrupt is received before executing the sleep instruction the kernel must ensure that the interrupt condition that will ultimately terminate standby mode has been enabled via the im field of the coprocessor 0 status register whenthesleepinstructionentersthewstagethestandbylogicstallstheprocessorandwaitsforthelbc to complete any outstanding processor initiated system bus operations after these are completed the standby logic holds the system and bus clocks high these are held high until an enabled interrupt is received when standby mode is terminated by an interrupt the standby logic allows the clocks to toggle the processor honors the interrupt by branching to the exception handler as is normally done for interrupt servicing because several instructions are held in the pipeline while the clocks are frozen prior to the interrupt the exception pc will not point to the sleep instruction but rather some later instruction typicallyakernelwouldenteranidleloopjustafterexecutingthesleepinstructionsotheinterruptwillbe serviced from the kernels normal idle interrupt service level the lx4280 takes minimum of 6 cycles after the sleep instruction enters the w stage to safely synchronize the initiation of standby mode ie hold the clocks in the high state two cycles are required terminate standby mode the processor is stalled during these periods thestandbylogicreceivesthefreerunningsystemandbusclocksandgeneratesgatedclocksfordistribution to the lx4280 the standby logic must use flipflops tied to free running clocks which results in about dozen loads on the free running clocks twopinssl_sleeping_randsl_sleeping_brareavailablefromthestandbylogicandareasserted highwhentheprocessorisinstandbymodethe_rpinisforuseinthesystemclockdomainandthe_br pin is for use in the bus clock domainmay 9 2001 lx4280 lexra proprietary confidential 26 release 19 may 9 2001 lx4280 lexra proprietary confidential 27 release 19 4 mips16 mips16 is an extension to the mips instruction set architecture isa that was developed to improve code densityespeciallyforsystemonchipsocdesignsinthesedesignsonchipinstructionstorageisoftena significant even dominant portion of the silicon component cost this is especially true for realtime applications because in order to meet realtime requirements instruction cache miss penalties cannot be tolerated and thus large portion of the instruction storage must be resident onchip mips16 provides set of 16bit instruction formats to encode the most common operations the key compromisesrequiredtoachieve16bitencodingincludeisomemipsiinstructionsarenotavailableii immediate widths are reduced iii only 8 of the 32 general registers may be directly addressed as result some operations cannot be executed in mips16 or require multiple mips16 instructions thus realistic programs need to include both mips16 and mips i instructions using mips16 where possible to save storageatsomecosttoperformance1modeswitchingbetweenmips16andmipsiisdiscussedbelowto permit occasional access to all 32 general registers without the overhead of mode switching mips16 providesmoveinstructions to move data between the mips16visible registers and the full general register set also to permit occasional use of 16bit immediates without mode switching mips16 provides the extend instructiontoallowafullwidthimmediateintwomips16instructioncyclesprogramsrequiring large register set or frequent fullwidth immediates should be compiled in mips i mips16 is difficult to program effectively at the assembler level this is because of the limited register set and the restricted size immediates in fact according to sweetman2 mips16 is not suitable language for assembly coding rather mips16 is viewed as compiler option which can be effectively applied to achieve significant code size reduction where performance is not critical 41 mips16 instructions this section describes the mips16 instructions with emphasis on the differences between mips16 and the 32bit mips isa the first table lists mips i instructions that are notsupported in mips16 the second table lists mips i instructions which are supported in mips16 in most cases these are specialized versions of the mips i instruction mips16 is compatible with mips i ii and iii iv or v the lx4280implements allmips16for32bitdataoperations3thetablelistsallmips16instructionstogether withthecorrespondingmipsiinstructionandthespecializationrequiredtoproducethemips16instruction other than smaller register set and smaller immediates the third table lists the several new instructions introduced by mips16 itisnotablethatmultudivuaresupportedinmips16mfhiandmfloarealsosupportedandare necessarytoaccesstheresultofmultuordivuhowevermthiandmtloarenotsupportedthese are used primarily to restore the state after exception handling and are used within the kernel typically in mips i 1 the mips16 performance penalty results from occasionally using two instructions where one mips i instruction would sufﬁce some of this penalty is recovered in applications where larger number of instructions per cache line reduces cache miss rate 2 see mips run dominic sweetman appendix d p 425 3 mips16includes16bitformatsforanumberofmipsiii64bitdoublewordoperationswhicharenotsupportedinthemipsiisamay 9 2001 lx4280 lexra proprietary confidential 28 release 19 table 15 mips i instructions not supported by mips16 table 16 mips16 instructions that support mips imips i not supported by mips16 assembler mnemonics coprocessor operations ctcz cfcz mtcz mfcz lwcz swcz bczt bczf copz unaligned loads stores lwl lwr swl swr arithmetic operations add addi sub conditional branches blez bgtz bltz bgez bltzal bgezal logical operations with immediates andi ori xori lui jump j miscellaneous syscall rfe mthi mtlo mips16 instruction mips i equivalent instructiona lbu ry offsetrx lhu ry offsetrx lw ry offsetrx lw rx offsetsp r29 base sb ry offsetrx sh ry offsetrx sw ry offsetrx sw rx offsetsp r29 baselw rx offsetbase base r29 sw rx offsetbase base r29 addiu ry rx immediate addiu rx immediate addiu sp immediate 1operand addiu rx sp immediate 2operand addu rz rx ry subu rz rx ry neg rx ry 2operandaddiu rt rs immediate rtrs addiu rt rs immediate rtrsr29 addiu rt rs immediate rsr29 subu rd rs rt rsr0 sltu rx ry r24 dest implied sltiu rx immediate 2op r24 destsltu rd rs rt rdr24 sltiu rt rs immediate rtrs cmpi rx immediate r24 dest implied cmp rx ry r24 dest impliedxori rt rs immediate rtr24 xor rd rs rt rdr24 and rx ry 2operand or rx ry 2operand xor rx ry 2operand not rx ry 2operand move ry r32 2operand move r32 ry 2operand li rx immediateand rd rs rt rdrs or rd rs rt rdrs xor rd rs rt rdrs nor rt rs rt rsr0 or rd rs rt rsr0 or rd rs rt rsr0 ori rd rs immediate rsr0 sll rx ry immediate srl rx ry immediate sra rx ry immediate sllv ry rx 2operand srlv ry rx 2operand srav ry rx 2operandsllv rd rt rs rdrs srlv rd rt rs rdrs srav rd rt rs rdrs multu rx ry divu rx ry mfhi rx mflo rxmay 9 2001 lx4280 lexra proprietary confidential 29 release 19 as noted earlier mips16 restricts the mips i directly addressable register set and immediate field another commonmips16restrictionisthattworatherthanthreeregisteroperandsarepermittedmips16provides number of instructions that are not found mips i as shown in table17 table 17 new mips16 instructions the pcrelative load lw is important to overcoming the drawback of smaller immediates in mips16 it allowsfull32bitimmediatestobeembeddedintheprogramandloadedintoregistersinasingleinstruction the addiu with pc operand is useful to support immediates embedded in the program the pc value referenced in lw or addiu depends on the context of the pcrelative instruction as shown in table18 table 18 pcrelative addressing extend is used to supply an extra 11bits of immediate it is used together with the restricted size immediatefieldofthenextinstructiontosupplyafullwidthimmediateextendcannotoccurinthedelay slot of jump it is not necessary for the assembly programmer to code extend instructions it will automatically be assembled by mips16 assemblers wherever the immediate is too large to be encoded in single mips16 instructionjal target jr rx jr ra jalr ra rx 2operand link r31jr rs rsr31 jalr rs rd rsr31 beqz rx offset 1operand bnez rx offset 1operand bteq offset implied operands btne offset implied operands b offset implied operandsbeq rs rt offset rtr0 bne rs rt offset rtr0 beq rs rt offset rsr24 rtr0 bne rs rt offset rsr24 rtr0 beq rs rt offset rsr0 rtr0 break if 32bit mips instruction is listed specialization beyond limited size register set and limited size immediates is required new mips16 instruction comment lw rx offsetpc load word with pcrelative address addiu rx pc immediate addiu with pc operand extend immediate supplies 11bit immediate for use in the following mips16 instruction jalx target jump to target store return in r31 and toggle the isa mode between mips16 and mips i context for pcrelative instruction pc value normal case nonextended pcrelative instruction not in jump delay slotpc of the pcrelative instruction pcrelative instruction with extended immediate pc of the extend instruction nonextended pcrelative in the delay slot of jumpjrjalrjalxextendedinstructions are not permitted in the delay slot of the jumppc of the jump instructionmips16 instruction mips i equivalent instructionamay 9 2001 lx4280 lexra proprietary confidential 30 release 19 another new instruction jalx is available in both mips16 and also in mips i on machines implementing mips16andisdiscussedbelowinmipsimachinesnotimplementingmips16thejalxopcode000111 causes an ri trap 42 mode switching mode is switched between mips16 and mips i in one of two ways 1 the instruction jalx target toggles the mode 2 the lsb of the general register rx in jr rx jalr rs rx in mips16 rsra causes the mode to be set to mips16 if rx0 1 to mips i if rx0 0 however the lsb of the instruction memory address from jrjalr is forced to 0 as consequence machines that implement mips16 never take adel exceptions on the lsb of the instruction address this is true regardless of whether the machine is operating in mips16 or mips i mode the mode bit is saved in the lsb of the link register in jal jalx jalr 43 exceptions upon exception the mode is automatically switched to mips i the mode is saved in the lsb of the exception pc epc epc0 0 indicates that the exception occurred while executing code in mips i modeepc01indicatesthattheexceptionoccurredinmips16modethetypicalprogramwillsavethe epc to general register and later return to the main program with jr instruction causing the proper isa mode to be restored 44 delay slots consistent with the mip16 emphasis on code density there are load delay or branch delay slots in other wordstheinstructionfollowingthebranchisexecutedonlyifthebranchisnottakenmips16 jumpsjal jalx jr jalr have single delay slot the same as in mips i for jumps the target address is always taken thus there is risk that the delay slot cannot be used to do useful work the instruction from the target can be moved to the delay slot if necessary for mips16 loads the instruction following the load can reference the loaded register as in mips ii this feature is present because the mips i compiler is not always successful in scheduling useful instruction in the delay slot and must occasionally resort to nop reducing code density this possibility is eliminated in mips16may 9 2001 lx4280 lexra proprietary confidential 31 release 19 5 lx4280 local memory 51 local memory overview thischapterdescribeshowmemoriesareconfiguredandconnectedtothelx4280usingthelocalmemory interfaces lmis this section provides brief summary of the conventions and supported memories section52 describes the control register that allows software control over certain aspects of the lmis the subsequent sections cover each of the lmis in detail this chapter also discusses configuration options and the ports that customers must access to connect application specific ram and rom devices that are used by the lx4280 lmis all of the signals between the processor core the lmis rams and the system bus controller are automatically configured by lconfig the lx4280 configuration tool lconfigalso produces documentation of the exact rams required for the chosen configuration settings and writes ram models used for rtl simulation thelmisconnecttoramsthatservicethelx4280processorslocalinstructionanddatabussesthelmis alsoprovidethepathwaysfromtheprocessortothesystembusthelx4280includesanlmiforeachofthe localmemorytypesthesizesoftheramsandromsarecustomerselectablethelx4280lmisdirectly support synchronous rams that register the address write data and control signals at the ram inputs the lmisalsosupplyredundantreadenableandchipselectlinesforeachramwhichmayberequiredforsome ram types roms may also be connected but may require customer supplied address register at the address inputs lexra supplies an integration layer for the lmis and the memory devices connected to them in this layer memory devices are instanced as generic modules satisfying the depth and width requirements for each specific memory instance the lconfigutility supplies summary of the memory devices required for the chosen configuration in most cases customers simply need to write wrapper that connects the generic module port list to technology specific ram instance inside the ram wrapper thelx4280isconfigurablefora163264or128bytecachelinesizethetagstoreramsizesshownin the tables of this chapter assume 16byte line size the documentation produced by lconfigindicates the required tag rams for the selected configuration options including the line size as general rule doubling of the line size results in halving the tag store depth thevalidbitswithintagstoresareautomaticallyclearedbythelmisuponresetthedatacacheimplements writethrough protocol caches do not snoop the system bus the lx4280 is configurable to work with rams with write granularity of 8 bits byte or 32 bits word byte write granularity results in more efficient operation of store byte and store halfword instructions table19 summarizes the lmis that can be integrated on the local busses table 19 local memory interface modules name description icache direct mapped or twoway set associative instruction cache imem instruction ram irom instruction rom dcache direct mapped data cache dmem data ram or rommay 9 2001 lx4280 lexra proprietary confidential 32 release 19 52 cache control register cctl cctl cp0 general register address 20 when reading this register the contents of the reserved bits are undefined when writing this register the contents of the reserved bits should be preserved changes in the contents of the cctl register are observed in the w stage however these changes affect instruction fetches currently in progress in the i stage and data load or store operations in progress in the m stage the iromon and iromoff bits of the cctl register control the and use of the optional local irom memory configured into the lx4280 when irom is present and the lx4280 is reset the lmi enables accesstotheiromatransitionfrom0to1oniromoffdisablestheiromallowinginstructionreferences to be serviced imem icache or the system bus transition from 0 to 1 on iromon enables the irom the imemfill and imemoff bits of the cctl register control the contents and use of any local imem memory configured into the lx4280 when the lx4280 is reset the lmi clears an internal register to indicate that the entire imem lmi contents are invalid when imem is invalid all cacheable fetches from the imem region will be serviced by the instruction cache if an instruction cache is present transition from 0 to 1 on imemfill causes the lmi to initiate series of line read operations to fill the imemcontentstheaddressesusedforthesereadsaredefinedbytheconfiguredbaseandtopaddresses oftheimemdescribedinsection54theprocessorstallswhiletheentireimemcontentsarefilledbythe lmi thereafter the lmi sets its internal imem valid bit and will service any access to the imem range from the local imem memory the time that an imem fill takes to complete is the number of line reads needed to fill the imem range multiplied by the latency of one line read assuming there is other system bus traffic transition from 0 to 1 on imemoff causes the lmi to clear its internal imem valid bit subsequent cacheable fetches from the imem region will be serviced by the instruction cache to use the imem again an application must reinitialize the imem contents through the imemfill bit of the cctl register theilockfieldcontrolssetlockinginthetwosetassociativeinstructioncachewhenilockis00or01the instructioncacheoperatesnormallywhenilockis10allcachedinstructionreferencesareforcedtooccupy set1thehardwarewillinvalidatelinesinset0ifnecessarytoaccomplishthiswhenilockis11linesinset 1 are never displaced ie they are locked in the cache set 0 is used to hold other lines as needed toutilizethecachelockingfeaturesoftwareshouldexecuteatleastonepassofcriticalsubroutinesorloops with ilock set to 10 after this has been done ilock should be set to 11 to lock the critical code into set 1 and use set 0 for other code the iinval and dinval fields control hardware invalidation of the instruction cache and data cache transition from 0 to 1 on iinval will initiate hardware invalidation sequence of the entire instruction cache likewisea0to1transitionondinvalwillinitiateahardwareinvalidationsequenceoftheentiredatacache the dmem if present is unaffected by this operation the hardware invalidation sequence for the instruction and data caches requires one cycle per cache line to complete depending on the circumstances software may be able to employ an alternative to full invalidation of the datacacheifasmallnumberoflinesmustbeinvalidatedsoftwaremayperformcachedreadsfromaliasesof318 7 6 5 4 32 1 0 reserved iromoff iromon imemoff imemfill ilock iinval dinvalmay 9 2001 lx4280 lexra proprietary confidential 33 release 19 thememorylocationsofconcernthisdisplacesdataintheaddressedlocationsofthedatacacheevenifthey do not encache the affected memory location anotheralternativeiftheaffectedmemorylocationhasanaliasinuncacheablekseg1spaceistosimply performanuncachedreadoftheaffectedmemorylocationsifthelocationisresidentinthedatacacheitwill be invalidated this method has the advantage of not displacing data in the cache unless it is absolutely necessary to maintain coherency note that write to kseg1 address has affect on the contents of the data cache with either of these two alternatives it is only necessary to reference one word of each affected cache line 53 instruction cache icache lmi the icache lmi supplies the interface for direct mapped or twoway set associative instruction cache attachedtothelx4280localbusthedegreeofassociativityisspecifiedthroughlconfigtheicachelmi participatesincacheableinstructionfetchesbutonlyiftheaddressisnotclaimedbytheimemmodulethe configurations supported by icache and the synchronous rams required for each are summarized in table20 theinstructionstoreforthetwowayicacheconsistsoftwo64bitwidebankswithseparatewriteenable controlsthetagstoreconsistsofonerambankwithtagandvalidbitsforset0andasecondramforset 1 that holds the tag valid lru least recently used and lock bits when miss occurs in the twoway icache the lru bit is examined to determine which element of the set to replace with element 0 being replacediflruis0andelement1beingreplacediflruis1thestateofthelrubitistheninvertedto optimize the timing of cache reads the twoway icache uses the state of the lru bit to determine which elementshouldbereturnedtothecpuinthefollowingcycletheicachedeterminesifthecorrectelement wasreturnedifnottheicachetakesanextracycletoreturnthecorrectelementtothecpuandinvertsthe lru bit table 20 icache conﬁgurations conﬁguration icache_inst ram icache_tag ram instruction cache ram required ram required 1k bytes 2way 2 x 64 x 64 bits 32 x 24 and 32 x 26 bits 2k bytes 2way 2 x 128 x 64 bits 64 x 23 and 64 x 25 bits 4k bytes 2way 2 x 256 x 64 bits 128 x 22 and 128 x 24 bits 8k bytes 2way 2 x 512 x 64 bits 256 x 21 and 256 x 23 bits 16k bytes 2way 2 x 1024 x 64 bits 512 x 20 and 512 x 22 bits 32k bytes 2way 2 x 2048 x 64 bits 1024x19and1024x21bits 64k bytes 2way 2 x 4096 x 64 bits 2048x18and2048x20bits 1k bytes direct mapped 128 x 64 bits 64 x 23 bits 2k bytes direct mapped 256 x 64 bits 128 x22 bits 4k bytes direct mapped 512 x 64 bits 256 x 21 bits 8k bytes direct mapped 1024 x 64 bits 512 x 20 bitsmay 9 2001 lx4280 lexra proprietary confidential 34 release 19 table21 lists the icache signals that are connected to application specific modules the ic_ prefix indicates signals that are driven by the icache lmi module and received by the rams the icr_ prefix indicates signals that are driven by the icache rams and received by the icache lmi lexra supplies the verilog module that makes all required connections to these wires the width of the index and data lines depends upon the ram connected to the lmi and can be inferred from the table20 table 21 icache ram interfaces note n designates an available activelow version of signal16k bytes direct mapped 2048 x 64 bits 1024 x 19 bits 32k bytes direct mapped 4096 x 64 bits 2048 x 18 bits 64k bytes direct mapped 8192 x 64 bits 4096 x 17 bits signal description ic_tagindex tag and state ram address line icr_tagrd0 tag and state ram element 0 read path ic_tagwr0 tag and state ram element 0 write path icr_tagrd1 tag and state ram element 1 read path ic_tagwr1 tag and state ram element 1 write path ic_tag0wen tag 0 ram write enable ic_tag0ren tag 0 ram read enable ic_tag0csn tag 0 ram chip select ic_tag1wen tag 1 ram write enable ic_tag1ren tag 1 ram read enable ic_tag1csn tag 1 ram chip select ic_instindex instruction ram address word icr_inst0rd instruction ram element 0 read path icr_inst1rd instruction ram element 1 read path ic_instwr instruction ram write path to both elements ic_inst0wen10 instruction ram 0 write enable ic_inst0ren instruction ram 0 read enable ic_inst0csn instruction ram 0 chip select ic_inst1wen10 instruction ram 1 write enable ic_inst1ren instruction ram 1 read enable ic_inst1csn instruction ram 1 chip selectconﬁguration icache_inst ram icache_tag rammay 9 2001 lx4280 lexra proprietary confidential 35 release 19 54 instruction memory imem lmi theimemlmisuppliestheinterfaceforanoptionallocalinstructionstoretheimemservesafixedrange of the physical address space determined by configuration settings in lconfig the imem contents are filled and invalidated under the control of the cp0 cctl register described in section52 cache control register cctl the imem module services instruction fetches that falls within its configured range the imemisaconvenientlowcostalternativetoacachethatmakesinstructionmemoryavailabletothecorefor highspeed access the configurations supported by imem and the synchronous rams required for each are summarized in table22 table 22 imem conﬁgurations table23liststheimemsignalsthatareconnectedtoapplicationspecificmodulesthe iw_prefixindicates signalsthataredrivenbytheimemlmimoduleandreceivedbyramsthe iwr_prefixindicatessignals thataredrivenbyramsandreceivedbytheimemlmithe cfg_prefixidentifiesconfigurationportson the imem lmi that are typically wired to constant values the width of the index and data lines depends upon the ram connected to the lmi and can be inferred from table22 thecfg_wires define where the imem is mapped into the physical address space this configuration information defines the local bus address region of the imem it also determines the address of the external resources which are accessed when an imem miss occurs the lconfigutility supplied by lexra will verify that the configured address range does not interfere with other regions defined for lx4280 the size of the memory region must be power of two and must be naturally aligned table 23 imem ram interfacesconﬁguration imem_inst ram local instruction ram ram required 1k bytes 128 x 64 bits 2k bytes 256 x 64 bits 4k bytes 512 x 64 bits 8k bytes 1024 x 64 bits 16k bytes 2048 x 64 bits 32k bytes 4096 x 64 bits 64k bytes 8192 x 64 bits 128k bytes 16384 x 64 bits 256k bytes 32768 x 64 bits signal description iw_instindex imem index iwr_instrd instruction read data iw_instwr instruction write data iw_instwen10 instruction ram write enablemay 9 2001 lx4280 lexra proprietary confidential 36 release 19 note n designates an available activelow version of signal 55 instruction rom irom lmi the irom lmi supplies the interface for an optional readonly local instruction store the irom serves fixed range of the physical address space determined by configuration settings in lconfig irom may be disabled via hardware configuration pin cfg_iroff irom may also be enabled and disabled under software control as described in section52 cache control register cctl the irom is convenient lowcost alternative to cache that makes readonly instruction memory available to the core for highspeed access the configurations supported by irom and the synchronous roms required for each are summarized in table24 table 24 irom conﬁgurations table25 lists the irom signals that are connected to application specific modules the ir_ prefix indicates signals that are driven by the irom lmi module and received by the rom the irr_ prefix indicates signals that are driven by rom and received by the irom lmi the cfg_ prefix identifies configuration ports on the irom lmi that are typically wired to constant values lexra supplies the verilog module that makesallrequiredconnectionstothesewiresthewidthoftheindexanddatalinesdependsupontherom connected to the lmi and can be inferred from table23 the cfg_ wires define where irom is mapped into the physical address space this configuration information defines the local bus address region of the irom it also determines the address of the external resources which are accessed when an irom miss occurs the lconfig utility supplied by lexra will verify that the configured address range does not interfere with other regions defined by the lx4280 note that theiw_instren instruction ram read enable iw_instcsn instruction ram chip select cfg_iwbase3110 conﬁgured base address modulo 1k bytes cfg_iwtop1710 conﬁgured top address bits that may differ from base conﬁguration irom_data local instruction ram rom required 1k bytes direct mapped 128 x 64 bits 2k bytes direct mapped 256 x 64 bits 4k bytes direct mapped 512 x 64 bits 8k bytes direct mapped 1024 x 64 bits 16k bytes direct mapped 2048 x 64 bits 32k bytes direct mapped 4096 x 64 bits 64k bytes direct mapped 8192 x 64 bits 128k bytes direct mapped 16384 x 64 bits 256k bytes direct mapped 32768 x 64 bitssignal descriptionmay 9 2001 lx4280 lexra proprietary confidential 37 release 19 size of the memory region must be power of two and must be naturally aligned table 25 irom rom interfaces note n designates an available activelow version of signal 56 direct mapped write through data cache dcache lmi the dcache lmi supplies the interface for direct mapped write through data cache attached to the lx4280localbusthedcachelmiparticipatesincacheabledatareadsandwritesbutonlyiftheaddress isnotclaimedbythedmemlmi theconfigurationssupportedbydcacheandthesynchronousrams required for each are summarized in table26 the direct mapped dcache module services word or twinword read requests from the core in one cycle when the request hits the cache byte or halfword reads that hit the data cache require an extra cycle for alignmentthedatacachecanstreamwordandtwinwordreadsorwritesthathitthecacheattherateofone per cycle if the lx4280 is configured to work with rams that have word write granularity byte or half wordwritesthatfollowanywritebyonecycleandhitthecacherequireanextracycletomergethedatawith the current cache contents alternatively the lx4280 can be configured to work with rams support byte write granularity which eliminates the extra cycle see appendixc lx4280 pipeline stalls for detailed descriptions of these and other pipeline stall conditions writesthatareservicedbythedatacachemayrequireextratimetobeservicedbythelbcifitswritebuffer isfullalsowhenacachewriteoperationisimmediatelyfollowedbyacachereadthecachemustdelaythe read for one cycle while the write completes when miss occurs the cache obtains cache line 4 8 16 or 32 words of data from the lexra bus controller lbc write operations that hit the data cache are simultaneously written into the cache and forwarded to the write buffer of the lbc thus if the core subsequently reads the data it will likely be available from the cache for main memory systems that support byte writes all data writes that miss the cache are forwarded to the write buffer of the lbc without disturbing any data currently in the cache for main memory systems that can only write with word granularity byte or halfword write that misses the cachecausesthecachetoperformalinefillfrommainmemorythecachethenmergesthepartialwritedata with the full word data obtained from memory and writes the word to the system bussignal description ir_instindex irom index irr_instrd instruction read data ir_instren instruction rom read enable ir_instcsn instruction rom chip select cfg_irbase3110 conﬁgured base address modulo 1k bytes cfg_irtop1710 conﬁgured top address bits that may differ from basemay 9 2001 lx4280 lexra proprietary confidential 38 release 19 table 26 dcache conﬁgurations table27 lists the dcache signals that are connected to application specific modules the dc_ prefix indicatessignalsthataredrivenbythedcachelmimoduleandreceivedbytheramsthedcr_prefix indicatessignalsthataredrivenbythedcacheramsandreceivedbythedcachelmilexrasupplies the verilog module that makes all required connections to these wires the width of the index and data lines depends upon the ram connected to the lmi and can be inferred from table26 table 27 dcache ram interfaces note n designates an available activelow version of signal 57 scratch pad data memory dmem lmi the dmem lmi supplies the interface for scratch pad data ram attached to the lx4280 local bus the dmem module services in any cacheable or uncacheable data read or write operation that falls within its configured rangeconﬁguration dcache_data ram dcache_tag ram data cache ram required ram required 1k bytes direct mapped 128 x 64 bits 64 x 23 bits 2k bytes direct mapped 256 x 64 bits 128 x 22 bits 4k bytes direct mapped 512 x 64 bits 256 x 21 bits 8k bytes direct mapped 1024 x 64 bits 512 x 20 bits 16k bytes direct mapped 2048 x 64 bits 1024 x 19 bits 32k bytes direct mapped 4096 x 64 bits 2048 x 18 bits 64k bytes direct mapped 8192 x 64 bits 4096 x 17 bits signal description dc_tagindex tag and state ram address dcr_tagrd tag and state ram read path dc_tagwr tag and state ram write path dc_tagwen tag and state ram write enable dc_tagren tag and state ram read enable dc_tagcsn tag and state ram chip select dc_dataindex data ram address word dcr_datard data ram read path dc_datawr data ram write path dc_datawen10 data ram write enable dc_dataren data ram read enable dc_datacsn data ram chip selectmay 9 2001 lx4280 lexra proprietary confidential 39 release 19 byte or halfword reads that hit the dmem require an extra cycle for alignment dmem can stream word and twinword reads or writes that hit dmem at the rate of one per cycle if the lx4280 is configured to work with rams that have word write granularity byte or halfword writes that follow any write by one cycleandhitdmemrequireanextracycletomergethedatawiththecurrentdmemcontentsalternatively thelx4280canbeconfiguredtoworkwithramssupportbytewritegranularitywhicheliminatestheextra cycle see appendixc lx4280 pipeline stalls for detailed descriptions of these and other pipeline stall conditionsalsobecauseawriteoperationtothedmemisneversenttothelbcwritestodmemwillnot cause the lbc to stall the processor due to full write buffer condition the dmem configurations and the synchronous rams required for each are summarized in the table28 table 28dmem conﬁgurations table29 lists the dmem signals that are connected to application specific modules the dw_prefix indicates signals that are driven by the dmem lmi module and received by rams the dwr_prefix indicates signals that are driven by rams and received by the dmem lmi the cfg_prefix identifies configurationportsonthedmemlmithataretypicallywiredtoconstantvaluesthewidthoftheindexand data lines depends upon the ram connected to the lmi and can be inferred from table28 thecfg_wires define where dmem is mapped into the physical address space it is not possible for any dmemreferencetoresultinanoperationonthesystembusthe lconfigutilitysuppliedbylexrawillverify that the configured address range does not interfere with other regions defined for lx4280 the size of the memory region must be power of two and must be naturally aligned the dmem lmi can also be used as rom controller simply by tying off the write enable and data input lines in the ram wrapper and instancing rom in the ram wrapper table 29dmem ram interfacesconﬁguration dmem_data ram 64bit dmem_data ram 128bit local data ram ram required ram required 1k bytes 128 x 64 bits 64 x 128 bits 2k bytes 256 x 64 bits 128 x 128 bits 4k bytes 512 x 64 bits 256 x 128 bits 8k bytes 1024 x 64 bits 512 x 128 bits 16k bytes 2048 x 64 bits 1024 x 128 bits 32k bytes 4096 x 64 bits 2048 x 128 bits 64k bytes 8192 x 64 bits 4096 x 128 bits 128k bytes 16384 x 64 bits 8192 x 128 bits 256k bytes 32768 x 64 bits 16384 x 128 bits signal description dw_dataindex decoded data ram index dwr_datard data ram read data dw_datawr data ram write datamay 9 2001 lx4280 lexra proprietary confidential 40 release 19 note n designates an available activelow version of signaldw_datawen data ram write enable dw_dataren data ram read enable dw_datacsn data ram chip select cfg_dwbase3110 conﬁgured base address modulo 1k bytes cfg_dwtop1710 conﬁgured top address bits that may differ from basesignal descriptionmay 9 2001 lx4280 lexra proprietary confidential 41 release 19 6 lx4280 system bus 61 connecting the lx4280 to internal devices the lexra system bus lbus is the connection between the lx4280 and other internal devices such as systemmemoryusbieee1394firewireandanexternalbusinterfacethelbcusesaprotocolsimilar to that of the peripheral component interface pci bus this is wellknown and proven architecture addingnewdevicestothelexrabusisstraightforwardandtheperformanceapproachesthehighestthatcan be achieved without adding great deal of complexity to the protocol figure 4 lexra system bus diagram thelexrabussupportsmultiplemastersthisallowsformasteringiocontrollerswithdmaenginestobe connected to the bus the bus has pended architecture in which master holds the bus until all the data is transferred this simplifies the design of usersupplied bus agents and reduces latency for cache miss servicing thelexrabusisasynchronousbussignalsareregisteredandsampledatthepositiveedgeofthebusclock certain logical operations may be made to the sampled signals and then new signals can be driven immediately such as for address decoding this allows for samecycle turnaround the lbc provides an optionalasynchronousinterfacebetweenthecpuandthelexrabusallowingthelexrabusspeedcanbeset to be any speed equal to or less than the cpu clock frequency thelexrabusdatapathforthelx4280is32bitswidethereforethebuscantransferonewordhalfword or byte in one bus clock the bus supports line and burst transfers in which several words of data are transferred the lexra bus accomplishes this by transferring words of data from incremental addresses on successive clock cycles thelbccontainsawritebufferwhenthecpuissuesawriterequesttoalexrabusdevicetheaddressand data are saved in the buffer and sent to the device sometime later the cpu can continue processing having safely assumed that the write will eventually happen this is described more thoroughly in section672 thelbcdrivesenablingsignalstocontrolmuxesortristatebuffersthisallowsthelexrabustohaveeither bidirectional or pointtopoint topology 62 terminology thelexrabusborrowsterminologyfromthepcibusspecificationonwhichthelexrabusispartiallybased bus transactions take place between two bus agents one bus agent requests the bus and initiates transfer the second responds to the transferlexra bus controller lbcbus bridge usb firewirebus to cpu and local memory interfaceslexra system bus external bus eg pcimay 9 2001 lx4280 lexra proprietary confidential 42 release 19 theagentinitiatingatransferiscalledthe businitiator itisalsoreferredtoasthe busmaster bothtermsare used interchangeably in this document therespondingagentisknownasthebus targetitsamplestheaddresswhenitisvalidanddeterminesifthe address is within the domain of the device if so indicates as such to the initiator and becomes the target aread transfer is bus operation whereby the master requests data from the target awrite transfer is bus operation whereby the master requests to send data to the target asinglecycle busoperationisusedtotransferonewordhalfwordorbyteofdatathisamountofdatacan be transferred in one bus cycle not including the address cycle and device latencies aline transfer is read or write operation where an entire cache line of data is transferred in successive cycles as fast as the initiator and target can sendreceive the data aburst transfer is read or write operation where large amount of data needs to be sent the initiator presents starting address and data is transferred starting at that address in successive cycles for each word transferred the address is incremented by the devices internally some signals on the lexra bus are active low that is they are considered logically true when they are electrically low and logically false when electrically high device assertsa signal when it drives it to its logical true electrical state 63 bus operations the purpose of the lexra bus is to connect together the various components of the system including the lx4280 cpu main system memory io devices and external bus bridges different devices have different transfer requirements for example the lx4280 cpu will request the bus to fetch cache line of data from memoryiodeviceswillrequestlargeblocksofdatatobesenttoandfrommemorythelexrabussupports the various types of transfers needed by both io and the processor the six types of bus operations are singlecycle read line read burst read singlecycle write line write though this wont be used by the lx4280 core and burst write 631 singlecycle read thesinglecyclereadoperationreadsasinglewordhalfwordorbytefromthetargetdevicethisoperation isusuallyusedbythecputoreaddatafromuncachableaddressspaceifthereadaddresswasincacheable address space either hit would occur resulting in bus activity or miss would occur resulting in read line transaction 632 read line thereadlineoperationreadsasequenceofdatafrommemorycorrespondingtothesizeofacachelinethe cache line size affects how many cycles are required to transfer the full line the lx4280 and the lexra bus support configurable line size specified through lconfig the default line size of four words 16 bytes is assumed here there are two ways that the target could transfer the data back to the initiator the conventional way is to transferfourwordsofdatainsequencestartingatthenearest16bytealignedaddresssmallerorequaltothe address that the initiator drives in other words the target starts the transfer at the beginning of the line containing the requested address somememorydevicesmayimplementaperformanceoptimizationcalled desiredwordfirst iftheaddressismay 9 2001 lx4280 lexra proprietary confidential 43 release 19 notaligned to 16byte boundary then the first data returned by the target is the word corresponding to the addressinsteadofthefirstwordofthelinethesecondwordisthenextsequentialwordofdataandsoonat the end of the line the target wraps around and returns the first word of line thelx4280supportstwowaysofincrementingtheaddressofalinerefilloneisby linearwrap wherethe addressissimplyincrementedbyonetheotherisby interleavedwrap wherethenextaddressisdetermined bythelogicalxorofthecyclecountandthefirstwordaddresstheinterleavesequenceisshowninthetable belowtheloworderaddressbits32forthefirstdatabeataretheobtainedfromtheaddressofthelineread request the low order address bits for the subsequent data indicate the corresponding interleave order table 30 line read interleave order 633 burst read theburstreadoperationtransfersanarbitraryamountofdatafromthetargettotheinitiatortheinitiatorfirst presents starting address to the target the target responds by providing multiple cycles of data words in sequence starting at the initial address the initiator indicates to the target when to stop providing data burstreadoperationsareusedbyiodevicesforblockdmatransfersthelx4280willneverissueaburst read operation note that there is difference between 4cycles burst and line read line read may use desiredword first increment and wrap burst will always increment and will never wrap 634 singlecycle write the singlecycle write operation writes single word halfword or byte to the target thelx4280usesacachewithawritethroughpolicyallcpuinstructionsthatwritetomemorygeneratea singlecycle write operation unless the address is in the local scratchpad memory in which case the write operation will not make it out to the lexra bus 635 line write the line write operation is not used by the lx4280 this operation could be used by processor that has data cache that implements writeback policy 636 burst write burst write is an operation where the initiator sends an address and then an indefinite sequence of data to thetargettheinitiatorwillinformthetargetwhenithasfinishedsendingdatathisoperationisusedbyio devices for dma transfers it is not used by the processorinterleaved address32 1st data beat 00 01 10 11 2nd data beat 01 00 11 10 3rd data beat 10 11 00 01 4th data beat 11 10 01 00may 9 2001 lx4280 lexra proprietary confidential 44 release 19 64 signal descriptions table 31 lbus signal description 65 lbus commands the initiator drives bcmd during the cycle that bframe is asserted bcmd6 0read 1write bcmd54 54 00 burst fixed length1 01 burst unlimited number of words 10 line interleaved wrap2 11 line linear wrapsignal namesource initiatortargetctrldescription bclock ctrl bus clock bcmd60 initiator encoded command active during ﬁrst cycle that bframe is asserted baddr310 initiator address target indicates valid address by asserting bframe bframe initiator asserted by initiator beginning of operation with address and command signals deasserted when initiator is ready to accept or send last piece of data otherbusmasterssamplethisandbirdytoindicate that the bus will be available on the next cycle birdy initiator forwritesindicatesthatinitiatorisdrivingvaliddata on reads indicates that initiator is ready to accept data bdata310 initiator on writetarget on readdata if driven by initiator birdy indicates valid data onbusifdrivenbytargetbtrdyindicatesvaliddata on bus btrdy target for writes indicates that target is ready to accept data on reads indicates that target is driving valid data bsel target asserted by selected target after initiator asserts bframeindicatesthattargethasdecodedaddress and will respond to the transaction ie has been selected 1 the number of words comes from bcmd20 2 length is determined by the line size not bcmd30may 9 2001 lx4280 lexra proprietary confidential 45 release 19 bcmd30 3210 1000 1 byte 1001 2 bytes 1010 3 bytes 1011 1 word 1100 2 words 1101 reserved 111x reserved 0000 4 words 0001 8 words 0010 16 words 0011 32 words 01xx reserved 66 byte alignment the lexrabus isa big endian bus transactionsmust havetheir data driven to theappropriate busrails the bus mapping is as shown in table32 table 32 lbus byte lane assignment the lexra bus does not define unaligned data transfers such as halfword transfer that starts at addr1001 or transfers that would need to wrap to the next word 67 lexra bus controller thelexrabuscontrollerlbcistheelementofthelx4280thatconnectstothelexrabusitforwardsall transaction requests from the lx4280 cpu to the lexra bus it is an initiator and will never respond to requests from other lexra bus initiators 671 lbc commands the lbc issues the only the lbus commands listed in the table belowlexra bus data byte lanes used bcmd10 addr10 3124 2316 158 70 00 00 x 00 01 x 00 10 x 00 11 x 01 00 x x 01 10 x x 10 00 x x x 10 01 x x x 11 00 x x x xmay 9 2001 lx4280 lexra proprietary confidential 46 release 19 table 33 lbus commands issued by the lbc 672 lbc write buffer and outoforder processing the lbc contains write buffer with depth that is configurable with lconfig all write requests from the cpu are posted in the write buffer the cpu will not wait for the write to complete write operations completeintheordertheyareenteredintothequeueifthequeuefillsthenthecpumustwaituntilanentry becomes available whenthecpu issuesareadoperationthelbcwillattempttoforwardthatrequesttothelexrabus ahead ofanypendingwriteoperationsthissignificantlyimprovesperformancesincethecpuneedstowaitforthe readoperationtocompleteandwouldwastetimeifithadtoalsowaitforunnecessaryorirrelevantwritesto complete there are few cases when the lbc will not allow the read operation to pass pending writes 1 theaddressofapendingwriteiswithinthesamecachelineasthereadthelbcwillholdthe read operation until the matching write operation and all write operations ahead of it com plete if the read is for an instruction fetch it can still pass pending write that is inside the same cache line 2 the read is to uncacheable address space all writes will complete before the read is issued this avoids any problems with io devices and their associated controlstatus registers 3 apendingwriteistouncachableaddressspacethelbcwillholdthereadoperationuntilall writesuptoandincludingthewritetouncacheableaddressspacecompletethisfurtheravoids io device problems the write buffer bypass feature can be disabled so that reads will never pass writes 673 lbc read buffer the lbc contains read buffer with depth that is configurable with lconfig all incoming read data from the system bus passes through the read buffer this allows the lbc to accept incoming data as result of cache line fill operation without having to hold the bus when the lbc is configured with an asynchronous interface larger read buffer improves system and processorperformanceintheeventofcachemisswhenthelbcisconfiguredwithasynchronousinterface thecachecanacceptthedataasfastasthelbccanreaditthereforethereisnoneedforalargereadbuffer customers may reduce the size of the read buffer to minimum size of two 32bit entriescommand bcmd54 bcmd30 circumstances read line 10 or 11 dependingon conﬁguration0000 cache miss during read by the cpu read single wordhalfwordbyte00 10xx read by the cpu from an address in uncachable address space write single wordhalfwordbyte00 10xx write by the cpu into cacheable or uncachable address spacemay 9 2001 lx4280 lexra proprietary confidential 47 release 19 insomecasesthereisaneedtominimizethenumberofgatesthereadbuffersizemaybereducedtotwoor fourentriesfortheasynchronouscasethiscausesapenaltyintermsoflbusutilizationsincenowthelbc may have to deassert irdy if it cannot hold part of the line of data when the read buffer is the size of cache line this will be relatively rare since simultaneous instruction cache and data cache misses are relatively rare for smaller read buffer irdy deassertion is almost certainty 674 transfer descriptions this section describes the various types of read and write transfers in detail these operations follow certain patterns and rules the rules for driving and sampling the bus are as follows 1 agentsthatdrivethebusdosoasearlyaspossibleaftertherisingedgeofthebusclockthere is some time to perform some combinational logic after the bus clock goes high but the amount of time is determined by the speed of the bus clock and the number of devices on the bus 2 agents sample signals on the bus at the rising edge of the bus clock 3 all bus signals must be driven at all times if the bus is not owned and external device must drive the bus to legal level 4 change in signal ownership requires one dead cycle if an initiator gives up the bus another initiatorneedstowaitforonedeadcyclebeforeitcandrivethebusifthesameinitiatorissues areadoperationandthenneedstoissueawriteoperationitalsomustwaitoneextracyclefor the data bus to turn around 5 agentsthatownsignalsmustdrivethesignalstoalogicaltrueorlogicalfalseallotheragents must disable tristate their output buffers thelexrabusprotocolisbasedonthepcibusprotocol1thelexrabussignalsbframebtrybirdy and bsel have similar function to the pci signals frame trdy irdy and devsel respectively in general the protocol for the lexra bus is as follows 1 the initiator gains control of the bus through arbitration described later in this chapter 2 during the ﬁrst bus cycle of its ownership before the ﬁrst rising clock edge the initiator drivestheaddressforthebustransactionontobaddratthesametimeitassertsbframe to indicate that the bus is in use it will deassert bframe before it send or accepts the last word of data in most cases the initiator will asserts birdy to indicate that it is ready to receivedataorreadoperationsorisdrivingvaliddataforwriteoperationsiftheoperation is write the initiator will drive valid data onto bdata 3 at the rising edge of the ﬁrst clock all agents sample baddr and decode it to determine which agent will be the target 4 the agent that determines that the address is within its address space asserts bsel sometime after the ﬁrst rising edge of the bus clock bsel stays asserted until the transaction is com plete 5 the initiator and the target transfer data either in one cycle or in successive cycles the agent driving data the initiator for write the target for read indicates valid data by asserting its readysignalirdyortrdyforwritesandreadsrespectivelytheagentreceivingdatatar getforawriteinitiatorforareadindicatesitsabilitytoreceivethedatabyassertingitsready 1 the lexra bus is not pci compatible it merely borrows concepts from the pci bus speciﬁcationmay 9 2001 lx4280 lexra proprietary confidential 48 release 19 signal either agent may deassert its ready signal to indicate that it cannot source or accept data on this particular clock edge 6 when the initiator is ready to send or receive the last word of data that is when it asserts birdy for the last time it also deasserts bframe it will deassert birdy when the last word of data is transferred 7 the arbiter grants the bus to the next initiator and may do so during bus transfer by differ ent initiator the new initiator must sample bframe and birdy when both birdy and bframe is sampled deasserted and the new initiator has been given grant it can assert bframe the next cycle to start new transaction note in the examples below the signals baddr and bdata are often shown to be in highimpedance state in reality internal bus signals should always be driven even if they are not being sampled the hiz states are shown for conceptual purposes only 675 single cycle read with waits this operation is used to read word halfword or byte from memory usually in uncachable address space thisisasimplereadoperationwherethetargetrespondsimmediatelywithdatathisisunlikelysincemost bus memory will require one or more cycles to fetch data this example illustrates the most basic read operation without waits 1 initiator asserts bframe and drives baddr 2 targetassertsbseltoindicatetoinitiatorthatatargetisrespondinginthisexamplethereis animmediatefetchofdatasotargetdrivesdataandassertsbtrdytoindicatetotargetthatit is driving data the initiator deasserts bframe and asserts birdy to indicate that the next piece of data received will be the last 3 initiatordeassertsibirdyandthetargetdeassertsbselandbtrdytoindicatetheendof the transaction the initiator that has been given grant owns the bus this cycleclock bframe baddr bdata birdy btrdy bsel d0000may 9 2001 lx4280 lexra proprietary confidential 49 release 19 676 single cycle read with target wait this is the same as the singlecycle read except that the target needs time to fetch the data from memory this is common singlecycle read operation 1 initiator asserts bframe and drives baddr 2 target asserts bsel to indicate that it has decoded the address and is acknowledging that it is the target device however it is not ready to send data so it does not assert btrdy initiator deassertsbframeandassertsbirdytoindicatethatthenextpieceofdatawillbethelastit wants 3 target has not asserted btrdy so data is transferred 4 after second wait cycle target drives data and asserts btrdy to indicate that data is on the bus 5 target deasserts bsel and btrdy initiator deasserts birdy another initiator may drive the bus this cycle 677 line read with waits this operation is used to service cache miss four words of data are transferred in sequence in this example the target is supplying four words of data without any waits 1 initiator drives baddr and asserts bframe to indicate beginning of transactionclock bframe baddr bdata birdy btrdy bsel d0001 clock bframe baddr bdata birdy btrdy bsel d0002may 9 2001 lx4280 lexra proprietary confidential 50 release 19 2 target asserts bsel to indicate that it had decoded the address and will send data when it is ready initiator asserts birdy to indicate that it is ready to receive data 3 target drives data and asserts btrdy 4 target drives second word of data and continues to assert btrdy 5 target drives third word of data and continues to assert btrdy 6 target drives last word of data initiator deasserts bframe to indicate that the next word of data it receives will be the last it needs 7 target deasserts btrdy and bsel initiator deasserts birdy another master may gain ownership of the bus this cycle 678 line read with target waits this illustrates what happens when target needs extra time to fetch data it needs to service cache miss 1 initiator asserts bframe and drives baddr 2 targetassertsbseltoindicatethatitisacknowledgingtheoperationinitiatorassertsbirdy to indicate that it is ready to receive data 3 target waits until it has the data 4 target drives ﬁrst word of data and asserts btdry 5 target drives second word of data and asserts btrdy 6 target cannot get third word of data so it deasserts btrdy 7 target drives third word of data and asserts btrdy 8 target cannot get fourth word of data so it deasserts btrdy 9 target drives fourth word of data and asserts btrdy 679 line read with initiator waits this occurs when line of data is requested from the target and the initiator cannot accept all of the data inclock bframe baddr bdata birdy btrdy bsel d0003may 9 2001 lx4280 lexra proprietary confidential 51 release 19 successive cycles 1 initiator drives address and asserts bframe 2 targetassertsbselitdoesnthavedatasoitdoesnotassertbtrdyinitiatorassertsbirdy to indicate that it can accept data 3 target now has data so it drives the data and asserts btrdy 4 target drives second word of data initiator cannot accept it so it deasserts birdy 5 target holds second word of data initiator can accept it and asserts birdy 6 target drives third word of data initiator accepts it 7 targetdrivesfourthwordofdatainitiatorcannotacceptitanddeassertsbirdyinitiatorhold bframe until it can assert birdy 8 initiatorassertsbirdytoacceptfourthwordofdataitdeassertsbframetoindicatethisis the last word of data 6710 burst read this is identical to the read line 6711 singlecycle write with waits singlecycle write operation occurs almost every time the lx4280 processor executes store instruction thisisbecausethecacheusedintheprocessorusesawritethroughpolicyofcoursewritestouncacheable address space and to an io device will also generate singleword write singleword write operations are used to write words halfwords and bytesclock bframe baddr bdata birdy btrdy bsel d0004may 9 2001 lx4280 lexra proprietary confidential 52 release 19 singleword write without waits requires two cycles 1 initiator asserts bframe and drives address 2 targetsamplesaddressandassertsbselinitiatordrivesdataandassertsbirdyinthiscase target is also able to accept data so it asserts btrdy initiator also deasserts bframe to indicate that it is ready to send the last and only word of data 3 target accepts data deasserts btrdy and bsel initiator deasserts birdy 6712 singlecycle write with waits this is an example of singlecycle write operation where the target cannot immediately accept data and must insert wait states thisisthesamedescriptionastheaboveexampleexceptthatthetargetinsertstwowaitstatesuntilitasserts birdy to indicate acceptance of data 6713 burst write with waits aburstwriteoperationisgenerallyusedtotransferlargeamountsofdatafromaniodevicetomemoryviaclock bframe baddr bdata birdy btrdy bsel d0005 clock bframe baddr bdata birdy btrdy bsel d0006may 9 2001 lx4280 lexra proprietary confidential 53 release 19 dma transfer the following illustrates bestcase scenario with wait states 1 initiator drives address and asserts bframe 2 targetassertsbselandbtrdytoindicateitwillacceptdatainitiatordrivedataandasserts birdy 3 initiator drives next word of data target continues to accept data and indicates as such by tinuing to assert btrdy 4 initiator drives third word of data target continues to accept 5 initiatordrivesfourthwordofdataanddeassertsbframetoindicatethatthiswillbeitslast word sent target accepts data 6 target deasserts btrdy and bsel initiator gives up control of the bus by deasserting birdy 6714 burst write with target waits this example is similar to the above example except that during the third and fourth data word transfer the target cannot accept the data quickly enough so it deasserts btrdy which indicates to the initiator that it should hold the data for an additional cycle 6715 burst write with initiator waits the example illustrates what happens when the initiator cannot supply data fast enough and has to insertclock bframe baddr bdata birdy btrdy bsel d0007 clock bframe baddr bdata birdy btrdy bsel d0008may 9 2001 lx4280 lexra proprietary confidential 54 release 19 waits 68 lbc signals thetablebelowsummarizesthelx4280lbcportsthelbcportcolumnindicatesthenameoftheport suppliedbythelbcthebussignalcolumnindicatesthecorrespondinglexrabussignalthelbcports are strictly unidirectional while the bus signals at least conceptually include multiple sources and sinks the manner in which lbc ports are connected to bus signals is technology dependent and may employ tri state drivers or logic gating in conjunction with the lbcs lcoe ldoe and ltoe outputs table 34 lbc interface signals io lbc port bus signal description output laddro310 baddr310 lbc address output ldatao310 bdata310 lbc data input ldatai310 bdata310 system data output lirdy birdy lbc initiator ready input lirdyi birdy system initiator ready output lframe brame lbc transaction frame input lframei bframe system transaction frame input lsel bsel system slave select input ltrdy btrdy system target ready output lcmd60 bcmd60 lbc command output lreq lbc bus request input lgnt system bus grant output lcoe90 lbc command output enable terms output ldoe70 lbc data output enable terms output ltoe lbc transaction output enable termsclock bframe baddr bdata birdy btrdy bsel d0009may 9 2001 lx4280 lexra proprietary confidential 55 release 19 69 arbitration 691 rules the following are the rules for arbitration gntgrant reqrequest 1 masterassertsreqatthebeginningofacycleandmaystartsamplingforassertedgntinthe same cycle in case gnt is already asserting in the case of park 2 if bus is idle or it is the last data phase of the previous transaction when master samples asserted gnt master may assert frame on next cycle 3 ifthebusisbusywhenthemastersamplesgntismustalsosnoopframeirdyandtrdy onecycleafterframeisnotassertedandbothirdyandtrdyareassertedindicatingthe last data phase if gnt is still asserted master may now drive frame ie gnt frame_r irdy_r trdy_r 692 lbc behavior the lbc when it need access to the bus asserts req and in the same cycle samples gnt frame and either irdy or irdy trdy if these are true then the lbc will on the next cycle take ownership of the bus req is deasserted on the cycle after lbc asserts frame if the bus is busy lbc continues to snoop these four signals for this condition all other lbus arbitration rules can be based on this behavior of the lbc 610 connecting devices to the bus there are three sets of output enables toevalid for the length of the transaction coe valid for only the first cycle of transaction and doe valid for data transfers asserted by the master for writes and by the slave for reads toe is intended to qualify frame irdy coe is intended to qualify cmd addr doe is intended to qualify data there is output enable to qualify trdy and sel these are defined by customer logic for slave devices insteadofusingtoeitmaybedesirabletoinsteadoralloftheframesignalseithercentrallyoroneor gate for each target and master the same holds true for irdy trdy and sel this simplifies the connections when relatively few number of devices are used and there are offchip devices connected directly to the lexra bus therefore it is defined that masters and slaves not taking part in transaction always keep frame irdy trdy and sel driven and deassertedmay 9 2001 lx4280 lexra proprietary confidential 56 release 19 may 9 2001 lx4280 lexra proprietary confidential 57 release 19 7 lx4280 coprocessor interface thelx4280processorprovidescustomeraccesspointsforthecoprocessorinterfacesthissectionprovides description of these access points attachment of memory devices to the lmis the system bus and the ejtag interface are described in separate chapters 71 attaching coprocessor using the coprocessor interface ci acoprocessormaycontainupto32generalregistersandupto32controlregisterseachoftheseregistersis up to 32 bits wide typically programs use the general registers for loading and storing data on which the coprocessor operates data is moved to the coprocessors general registers from the cores general registers with the mtcz instruction data is moved from the coprocessors general registers to the cores general registers with the mfcz instruction main memory data is loaded into or stored from the coprocessors general registers with the lwcz and swcz instructions programs may load and store the coprocessors control registers from the cores general registers with the ctczandcfczinstructionsrespectivelyprogramsmaynotloadorstorethecontrolregistersdirectlyfrom main memory the coprocessor may also provide condition flag to the core the condition flag can be bit of control registeroralogicalfunctionofseveralcontrolregistervaluestheconditionflagistestedwiththebcztand bczfinstructionstheseinstructionsindicatethattheprogramshouldbranchiftheconditionistruebczt or false bczf 72 coprocessor interface ci signals the ci provides the mechanism to attach the custom coprocessor to the core the ci snoops the instruction bus for coprocessor instructions and then gives the coprocessor the signals necessary for reading or writing the general and control registers table 35 coprocessor interface signals signal io description czcondin input cop branch ﬂag czrd_addr40 output cop read address czrhold output cop hold condition one stalls coprocessor czrd_gen output cop general register read command czrd_con output cop control register read command czrd_data310 input cop read data czwr_addr40 output cop write address czwr_gen output cop general register write command czwr_con output cop control write address command czwr_data310 output cop write data czinvld_m output cop invalid instruction ﬂag one indicates invalid instruction in m stagemay 9 2001 lx4280 lexra proprietary confidential 58 release 19 theaddressesoutputdataandcontrolsignalsaresuppliedtotheuserscoprocessorontherisingedgeofthe system clock in the case of read cycle the coprocessor must supply the data from either the control or generalregisteronczrd_databytheendofthesamecyclesimilarlythewriteofdatafromczwr_data to the addressed control or general register must be complete by the end of the cycle the ci incorporates forwarding path so that data which is written in instruction n can be read in instruction n 2 the coprocessor registers should be implemented as positiveedge flipflops using the lx4280 system clock 73 coprocessor write operations duringacoprocessorwritethecisendsczwr_addrandczwr_dataandassertseitherczwr_genor czwr_con the coprocessor must ensure that the coprocessor completes the write to the appropriate register on the subsequent rising edge of the clock the target register is decoding of czwr_addr czwr_gen and czwr_con use these instructions to cause coprocessor write lwcz mtcz and ctcz 74 coprocessor read operations during coprocessor read the ci sends czrd_addr and asserts either czrd_gen or czrd_con the coprocessor must return valid data through czrd_data in the following clock cycle if the core asserts czrhold indicating that it is not ready to accept the coprocessor data the coprocessor must hold the previous value of czrd_data the target register for the read is decoding of czrd_addr czrd_gen and czrd_con the instructions causing coprocessor read are swcz mfcz and cfcz the cpu stalls the pipeline so that the program can access data read by coprocessor instruction in the immediatelyfollowinginstructionforexampleifanmfczinstructionreadsdatafromthecoprocessorand stores it in the cores general register 4 the program can get access to that data in the following instruction when the core initiates coprocessor read the coprocessor must return valid data in the following clock cycle the coprocessor cannot stall the cpu applications must ensure that the source code does not access invalid coprocessor data if the coprocessor operations take several clock cycles to complete this is done in one of three ways ensure that code does not access data from the coprocessor until n instructions after the coprocessor operation has stared this is the least desirable method as it depends on the relative execution of the core and coprocessor it can also complicate software debug have the coprocessor send an interrupt to the core and the service routine for that interrupt accesses the appropriate coprocessor registers havethecoprocessorsettheczcondinflagwhenitsoperationiscompletethesourceczxcpn_m output copexceptionﬂagoneindicatesexception in m stage mfc2 4 3 move from cop2 to cpu register 4 subu 5 4 2 subtract r2 from r4 and store in 5signal io descriptionmay 9 2001 lx4280 lexra proprietary confidential 59 release 19 code can poll the flag as shown in the example below 75 coprocessor interface and pipeline stages coprocessorwritesoccurinthewstageoftheinstructionpipelineforcoprocessorreadsthecoregenerates address rd_gen and rd_con signals during the s stage and the coprocessor returns data during the stage whichispassedbythecitothecoreinthemstagethecoreintroducesapipelinebubbleaftercoprocessor instructions to ensure that the result of mtcz instruction can be used by the immediately following instruction in particular if there are backtoback mtcz and mfcz instructions that access the same coprocessor register the pipeline bubble still does not allow cycle between the w stage write and stage read as required in this case special forwarding path within the ci is used that is the true data from the coprocessor is ignored instead the exact data from the mtcz is used mtc2 i d s m w bubble i d mfc2 i d s m w data forwarded by ci from mtc2 wr_gen w x rd_gen s x rd_datae x theforwardingpathcancausesideeffectsifthecoprocessordoesnotimplementallofthebitsofaregister contains readonly bits or updates the register value upon reading the register in such cases the mfc2 instructionreturnsdifferentdatafromwhatitwouldifthecoredidnotactivatetheforwardingpathtoavoid the forwarding path another instruction must be inserted between the mtc2 and mfc2 mtc2 i d s m w bubble i d foo i d s m w mfc2 i d s m w read data from coprocessor wr_gen w x rd_datae x 751 pipeline holds thecoprocessormustregisterthereadaddressandthecontrolsignalsrd_genandrd_conitmustholdthee stage registered values of these signals when cz_rhold is active high and should make the read data output function of the stage registered read address and control signals thewr_addrwr_datawr_genandwr_consignalsneednotberegisteredthecoprocessormaydecodethese w stage signals directly to the appropriate register 752 pipeline invalidation under certain circumstances the instruction pipeline can contain an instruction that must be discarded this can be due to mispredicted branches cache misses exceptions inserted pipeline bubbles etc in such casesmtc2 2 3 store data to cop2 general register 3 ctc2 3 5 set cop2 control register 5 to start nop loop bc2f loop branch back to loop if czcondin bit off nop branch delay slot mfc2 4 7 get results from cop2 general register 7may 9 2001 lx4280 lexra proprietary confidential 60 release 19 the ci may decode an instruction that must actually be discarded for the coprocessor writetype instructions the ci will only issue the w stage control signals wr_gen and wr_con for valid instructions the coprocessor does not need to qualify these controls forthecoprocessorreadtypeinstructionsthecimayissuethesstagecontrolsignalsrd_genandrd_confor instructions that must be discarded if the coprocessor can tolerate speculative reads then it need not qualify those signals however if the coprocessor performs destructive reads such as updating fifo pointer upon read then it must use the qualifying signals cz_xcpn_m and cz_invld_m as follows thesignalcz_xcpn_msignalisusedtodiscardanysstagefromcird_genorrd_consignalandanye stage registered in the coprocessor rd_gen or rd_con signal it indicates that preceding instruction in the pipe has taken an exception and that subsequent instructions in the pipe must be discarded the signal cz_invld_m signal is used to invalidate the operation of the current instruction in the m stage this can be for various reasons not limited to an exception on preceding instruction if the coprocessor cannot tolerate speculative reads it must register an m stage version of rd_gen and rd_con the coprocessor must use the cz_rhold signal to hold this m stage version as well as the stage version if cz_invld_m is asserted then any such m stage signals must be discarded to summarize rd_gen or rd_con instruction can retire only if it reaches the m stage and neither cz_rhold nor cz_invld_m is assertedmay 9 2001 lx4280 lexra proprietary confidential 61 release 19 8 lx4280 ejtag 81 introduction given the increasing complexity of soc designs the nature of embedded processordesign debug hardware and software and the timetomarket requirements of embedded systems debug solution is needed which allows onchip processor visibility in costeffect io constrained manner lexrasejtagsolutionmeetsallsuchrequirementsitusesexistingieeejtagpinsaswellasfastbringup on new designs it provides way of debugging all devices accessible to the processor in the same way the processor would access those devices itself using ejtag debug probe can access all the processor internalregistersandcachesitcanalsoaccessdevicesconnectedtothelexrabusbypassinginternalcaches and memories software debug is enhanced by ejtag features that allow singlestepping through code and halting on breakpoints hardware and software address and data with masking for debugging problems that are artifacts of realtime interactions ejtag gives realtime program counter trace capabilities from which an accurate program execution history is derived for the codesystem perspective pc profiling provides statistical analysis of code usage to aim code optimization 82 overview adebughostcomputercommunicatestotheejtagprobethrougheitheraserialorparallelportorethernet connectiontheprobeinturncommunicatestothelx4280ejtaghardwareviatheincludedieee11491 jtaginterfacethroughtheuseofthejtagtapcontrollerprobedataisshiftedintototheejtagdataand control registers in the lx4280 to respond to processor requests dma into system memory configure the ejtag control logic enable singlestep mode or configure the ejtag breakpointregistersthroughtheuse of the ejtag control registers the user can set hardware breakpoints on the instruction cache address data cache address or data cache data values physical address range 0xff20_0000 to 0xff3f_ffff is reserved for ejtag use only and should not be mapped to any other device currentlyembeddedperformanceincepiandgreenhillsincprovideejtagdebuggersandprobesfor the lx4280 information on these products is available at the following web sites epi inc httpwwwepitoolscom green hills inc httpwwwghscom lx4280 ejtag implements all required features of version 200 of the ejtag specification and includes support for the following features processor access of host via addressing of probe memory space host probe can dma directly into system memory or io devices hardware breakpoints on internal instruction and data busses singlestep execution mode realtime program counter trace debug exception and two new debug instructions one for raising debug exception via software and one for returning from debug exceptionmay 9 2001 lx4280 lexra proprietary confidential 62 release 19 821 ieee jtagspeciﬁc pinout ieee jtag pins used by ejtag are shown below these are required for all ejtag implementations jtag_trst_n is an optional pin table 36 ejtag pinout table 37 ejtag ac characteristics1 table 38 ejtag synthesis constraints2 83 single processor pc trace the lx4280 ejtag includes support for realtime program counter trace pc trace when in pc tracesignal name io description jtag_tdo_nr output serial output of ejtag tap scan chain jtag_tdi input serial input to ejtag tap scan chain jtag_tms input test mode select connected to each ejtag tap controller jtag_clock input jtag clock connected to each ejtag tap controller jtag_trst_n input tap controller reset connected to each ejtag tap controllera this pin is optional in multiprocessor conﬁgurations signal parameter condition min max unit jtag_clock frequency 1 40 mhz duty cycle 4060 6040 jtag_tms setup to tck rising edge 18v 5 ns hold after tck rising edge 18v 5 ns jtag_tdi setup to tck rising edge 18v 5 ns hold after tck rising edge 18v 5 ns jtag_tdo_nr outputdelaytckfallingedgetotdo 18v 0 7 ns 1 based on epi interface speciﬁcations for majictm and majicplus tmsignal name probe budget core budget slack remaining for other logic jtag_tdo_nr 0 to 7ns 115ns 135 to 205ns jtag_tdi 5ns 135ns 65ns jtag_tms 5ns 135ns 65ns 2 based on 25ns jtag clock periodmay 9 2001 lx4280 lexra proprietary confidential 63 release 19 mode the lx4280 will serially output new value of the program counter whenever change in program control occurs ie branch or jump instruction or an exception when the pc trace option is set to export in lconfig the following signals will be output from the lx4280 dclk pcst and tpc these are described in more detail in the following subsections the dclk output is used to synchronize the probe with the lx4280s sysclk the pcst pc trace status signals are used to indicate the status of program execution example status indications are sequential instruction pipeline stall branch or exception the tpc pins output the value of the pc every time there is change of program control 831 pc trace dclk debug clock the maximum speed allowed for the debug clock dclk output is 100mhz as an epi probe requirement as cores typically run in excess of this speed dclk can be set to divided down value of sysclk this is set by the dclk n parameter in lconfig which indicates the ratio of sysclk frequency to dclk 1 2 3 or 4 832 pc trace pcst program counter status trace theprogramcounterstatuspcstoutputcomprisesnsetsof3bitpcstvalueswherenisconfigurable as123or4via lconfigapcstvalueisgeneratedeverysysclkcyclewhendclkisslowerthanthe lx4280s sysclk up to n pcst values are output simultaneously 833 pc trace tpc target program counter the bus width of the target program counter tpc output is user configured in lconfig via the m parametertobeoneof124or8bitswhenchangeinprogramflowoccursthecurrentpcvalueissentout oftpcasthepcis32bitswidethenumberoftpcpinsaffectshowquicklythepcissentforexample if the tpc is 4 bits wide the pc will take 8 dclk cycles to be sent if another change in flow occurs while thepcofthepreviouschangeisbeingtransmittedthenewpcwillbesentandtheremainderoftheprevious pc will be lost the tpc bus also outputs the exception type when an exception occurs the exception type fieldwidth is either3or4bitsdependingonwhetherornotvectoredinterruptsarepresentthisiscoveredinmoredetail below toreducepinoutthetdooutputisusedfortheleastsignificantbitoftpcortheonlybitifmissetto1 834 dual pipe pc trace theejtagpctracefacilityspecifiesthatapcstpctracestatuscodeisissuediftheinstructionpipeline has stalled sequentially completed an instruction or taken an branch or jump in order to accommodate the two pipelines in the lx5280 the capability of emitting more than one pcst code per cycle is employed specifically to the external ejtag probe the lx5280 appears to be single pipe machine running at twice the speed that it actually does since there must be an even number of pcst codes made available at every dclk rising edge in the ejtag nomenclature the dclk parameter n must be set to 2 or 4 setting the dclk n parameter to 2 results in dclk running at the same frequency of sysclk setting the parameter to 4 results in dclk running at onehalf the frequency of sysclk the maximum value of the n parameter is 4 and the maximum dclk frequency is 100mhz thereforemay 9 2001 lx4280 lexra proprietary confidential 64 release 19 until the ejtag specification is extended beyond n4 or maximum dclk of 100mhz the maximum sysclk frequency for which dualpipe pc trace can be used is 200 mhz 835 singleprocessor pc trace pinout table 39 singleprocessor pc trace pinout table 40 singleprocessor pc trace ac characteristics1 836 vectored interrupts and pc trace the ejtag pc trace facility specifies 3bit code be output on the tpc output when an exception occurs thepcstpinsgivetheexpcodeinordertodistinguishtheeightvectoredinterruptsinthelx4280from all other exceptions 4bit code is used instead for all exceptions otherthan vectored interrupts the most significant bit of the 4bit code is zero and the remaining 3bits are the standard 3bit code note that this includes the standard software and hardware interrupts numbered 0 through 7 for vectored interrupts the most significant bit is always 1 the 4bit code is simply the number of the vectored interrupt from 8 through 15 being taken since the target of the vectored interrupt is determined by the contents of the intvec register the debug softwarewhichmonitorstheejtagpctracecodesmustbeawareofthecontentsofthisregisterinorderto trace the code after the vectored interrupt is takensignal name io description jpt_tpc_dr m bitsopthe pc value is output on these pins when pcdiscontinuity occursa tpc0 is multiplexed with tdo in the singleprocessor pc trace solutionjpt_pcst_dr n3 bitsop pc trace status outputs current instruction type every dclk jpt_dclk op pcst and tpc clock frequency determined as fraction of sysclk via the n parameter maximum frequency of dclk is 100mhz signal parameter min max unit jtag_dclk frequency dc 100 mhz dclk high time 4 ns low time 4 ns tpc setup to dclk falling edge at probe 0 ns hold after dclk falling edge 4 ns pcst setup to dclk falling edge at probe 0 ns hold after dclk falling edge 4 ns 1 based on epi interface speciﬁcations for majictm and majicplus tmmay 9 2001 lx4280 lexra proprietary confidential 65 release 19 for probes that do not support 4bit exception code the lx4280 can be configured via the ejtag_xv_bits lconfig option to use only the 3bit standard codes in that case if vectored interrupt is taken the 3bit code for reset will be presented 837 demultiplexing of tdo and tdi during pc trace in normal ejtag pc trace tdi and tdo are multiplexed with the debug interrupt dint and the lsb of the tpc tpc0 when in pc trace mode this reduces the number of pins required by pc trace but has the unfortunate sideaffect of preventing any access to ejtag registers during pc trace in order to allow access to ejtag registers during pc trace and to facilitate pc trace in multiprocessor environments the lconfig option jtag_trst_is_tpcyes causes tdi and tdo to be demultiplexed suchthattrstisusedastpc0anddintisgeneratedviaejtagregistersnotesettingthisoptionmay require changes in ejtag probe hardware check with probe manufacturer for detailsmay 9 2001 lx4280 lexra proprietary confidential 66 release 19 may 9 2001 lx4280 lexra proprietary confidential 67 release 19 9 integer multiplydivideaccumulate optional the multiplydivideaccumulate macdiv module is an optional feature of the lx4280 processor this chapter discusses the operation and features of the macdiv module 91summary of instructions table41 provides summary of the integer multiplydivideaccumulate instructions table 41 summary of macdiv instructions mnemonic operation description mthi hi rs preload accumulator or restore saved hi mtlo rs preload accumulator or restore saved mfhi rd hi read accumulator or part of 64 bit result mflo rd read accumulator or part of 64 bit result mult hilo rs rt 32x32 signed multiply 64bit result multu hilo rs rt 32x32 unsigned multiply 64bit result mad hilo hilo rs rt 32x32signedmultiplywith64bitsignedadd to accum madu hilo hilo rs rt 32x32 unsigned multiply with 64bit unsigned add to accum msub hilo hilo rs rt 32x32signedmultiplywith64bitsignedadd to accum msubu hilo hilo rs rt 32x32 unsigned multiply with 64bit unsigned add to accum madh hi hi rs150 rt150 16x16 signed multiply with 32 bit signed add to accum madl lolors150rt150 16x16 signed multiply with 32 bit signed add to accum mazh hi 0 rs150 rt150 16x16 signed multiply add to prezeroed 32bit accum mazl 0 rs150 rt150 16x16 signed multiply add to prezeroed 32bit accum msbh hi hi rs150 rt150 16x16 signed multiply with 32 bit signed sub from accum msbl rs150 rt150 16x16 signed multiply with 32 bit signed sub from accum mszh hi 0 rs150 rt150 16x16 signed multiply sub from prezeroed 32bit accum mszl 0 rs150 rt150 16x16 signed multiply sub from prezeroed 32bit accum div hi rsrt rsrt 32 by 32 signed divide with remainder divu hi rsrt rsrt 32 by 32 unsigned divide with remaindermay 9 2001 lx4280 lexra proprietary confidential 68 release 19 the processor may stall if new mac instruction is executed while prior mac operation is pending table47onpage90indicatesthenumberofcyclesthatmustbepresentbetweenmacinstructionstoavoid stalls 92 macdiv instruction overview all ops except movetoaccumulator and 32bit multiplyaccumulate functions are supported in m16 mode as well as m32 for best code compression independent 32bit hi and accumulators for 16bit multiplyaccumulate allow optimal performance in the fir filter or other applications which allow generation of new result while the previous result is pending multiplysubtract instructions eliminate the need to negate coefficients in case of resource conflicts hardware manages all hazards simplifying software debug there are coding restrictionsmay 9 2001 lx4280 lexra proprietary confidential 69 release 19 93opcodes for standard mode 32bit mac instructions 31 26 25 21 20 16 15 6 5 0 mnemonic major op base rt immediate subop mfhi 000000 rs rt 0000000000 010000 mthi 000000 rs rt 0000000000 010001 mflo 000000 rs rt 0000000000 010010 mtlo 000000 rs rt 0000000000 010011 mult 000000 rs rt 0000000000 011000 multu 000000 rs rt 0000000000 011001 mad 011100 rs rt 0000000000 00000 madu 011100 rs rt 0000000000 000001 msub 011100 rs rt 0000000000 000100 msubu 011100 rs rt 0000000000 000101 div 000000 rs rt 0000000000 011010 divu 000000 rs rt 0000000000 011011 madh 111100 rs rt 0000000000 000000 madl 111100 rs rt 0000000000 000010 mazh 111100 rs rt 0000000000 000100 mazl 111100 rs rt 0000000000 000110 msbh 111100 rs rt 0000000000 010000 msbl 111100 rs rt 0000000000 010010 mszh 111100 rs rt 0000000000 010100 mszl 111100 rs rt 0000000000 010110 655 1 0 6may 9 2001 lx4280 lexra proprietary confidential 70 release 19 94opcodes for mips16 16bit mode mac instructions 15 11 10 8 7 5 4 0 mnemonic major op base rt subop mfhi 11101 rx ry 10000 mthi not supported by mips16 architecture mflo 11101 rx ry 10010 mtlo not supported by mips16 architecture mult 11101 rx ry 11000 multu 11101 rx ry 11001 mad not supported by mips16 architecture madu not supported by mips16 architecture msub not supported by mips16 architecture msubu not supported by mips16 architecture div 11101 rx ry 11010 divu 11101 rx ry 11011 madh 11111 rx ry 00000 madl 11111 rx ry 00010 mazh 11111 rx ry 00100 mazl 11111 rx ry 00110 msbh 11111 rx ry 10000 msbl 11111 rx ry 10010 mszh 11111 rx ry 10100 mszl 11111 rx ry 10110 533 5may 9 2001 lx4280 lexra proprietary confidential 71 release 19 95 nonstandard instruction descriptions table 42 16bit multiply and multiplyaccumulate instructions signed16bitmultiply to hilomazh rs rt mazl rs rt thecontentsofrs150ismultipliedbyrt150treatingtheoperandsassigned 2s complement values the 32bit product is stored in the hilo register hilo 0 rs rt signed 16bit multiply accumulate to hilomadh rs rt madl rs rt thecontentsofrs150ismultipliedbyrt150treatingtheoperandsassigned 2s complement values the 32bit product is added to hilo ignoring any overflow the result is stored in the hilo register hilo hilo rs rt signed 16bit multiply negate to hilomszh rs rt mszl rs rt thecontentsofrs150ismultipliedbyrt150treatingtheoperandsassigned 2scomplementvaluesthe32bitproductisnegatedsubtractedfromzeroand stored in the hilo register hilo 0 rs rt signed 16bit multiply subtract from hilomsbh rs rt msbl rs rt thecontentsofrs150ismultipliedbyrt150treatingtheoperandsassigned 2s complement values the 32bit product is subtracted from hilo ignoring any overflow the result is stored in the hilo register hilo hilo rs rtmay 9 2001 lx4280 lexra proprietary confidential 72 release 19 table 43 32bit multiplyaccumulate instructions notes the 32bit opcodes are unchanged from the mipsi standard for the existing mult div mf and mt instructions the mad madu msub and msubu are new special2 opcodes also standard to several processors in m32 mode the new instructions are all rformat with bits 3126 6b111100 bits 50 determine the specific operation as shown in m16 mode the new instructions are all rrformat with bits 1511 5b11111 bits 40 determine the specific operation as shown in section94 the upper 16 bits of both operand registers are ignored by 16bit instructions the mxxh and mxxl instructions can be freely interleaved that is adds and subtracts from either accumulator can be combined in sequence with the two accumulators functioning in parallel the mxzx instructions can be used as standalone 16bit signed multiply this removes the need for mthi zero instruction at the beginning of multiplyaccumulate sequence for examplesigned 32bit multiply accumulatemad rs rt the contents of rs is multiplied by rt treating the operands as signed 2s complementvaluesthe64bitproductisaddedtotheconcatenationhiandlo toforma64bitresultignoringanyoverflowtheupper32bitsofthe64bitresult are stored in the hi register the lower 32bits are stored in the register t hilo rs rt t310 hi t6332 32bit multiply accumulatemadu rs rt the contents of rs is multiplied by rt treating the operands as unsigned values the64bitproductisaddedtotheconcatenationhiandlotoforma64bitresult ignoring any overflow the upper 32bits of the 64bit result are stored in the hi register the lower 32bits are stored in the register t hilo rs rt t310 hi t6332 signed 32bit multiply subtractmsub rs rt the contents of rs is multiplied by rt treating the operands as signed 2s complement values the 64bit product is subtracted from the concatenation hi and to form 64bit result ignoring any overflow the upper 32bits of the 64 bit result are stored in the hi register the lower 32bits are stored in the register t hilo rs rt t310 hi t6332 32bit multiplysubtract msubu rs rt the contents of rs is multiplied by rt treating the operands as unsigned values the 64bit product is subtracted from the concatenation hi and to form 64 bitresultignoringanyoverflowtheupper32bitsofthe64bitresultarestoredin the hi register the lower 32bits are stored in the register t hilo rs rt t310 hi t6332may 9 2001 lx4280 lexra proprietary confidential 73 release 19 mazh r1r2 madh r3r4 madh r5r6 madh r7r8 any op that doesnt write hi any op that doesnt write hi mfhi r9 intheabovesequencethetwononhiopsarenotnecessaryforcorrectoperationbutthepipelinewillstallif they are not used so it is more efficient to perform useful work in those slots for the multx madx or msubx instructions the most efficient use is multx r1r2 madx r3r4 msubx r5r6 any op that doesnt write hi or any op that doesnt write hi or any op that doesnt write hi or mflo r7 or hi is available this cycle mfhi r8 96multiplier pipelining the mad maz msb msz instructions which have 16bit operands are implemented in pipelined fashion with single cycle throughput and 3 cycle latency the msxx instructions are implemented by negating the multiplier for the 16bit multiplication but are otherwise identical to the corresponding maxx instructions this subtracts the product of the original operands from the accumulator themultmadandmsubinstructionswhichhave32bitoperandsusethesamehardwareinaniterative fashion to generate the 64 bit result with 4 cycle latency for both the low and high order 32 results thehiandloregistersareusedastwoindependent32bitaccumulatorsforthe16bitmultiplyinstructions or as paired 64bit result for the 32bit multiply instructions notethere is indication of overflow for the 32bit add portion of the 16bit multiplyaccumulate instructions the mfhilo instruction will stall the pipeline until the results of the most recent instruction which stores into hilo has completed 97accessing hi and after multiply instructions the mflo mfhi instruction reads the contents of the hi register during the cycle of the pipeline the following descriptions indicate how the latency of the multiply instructions affects the usage of the mf instructions the most efficient sequence is shown if the mf instruction is coded earlier the correct result will still be obtained because the hardware will stall the mf instruction in the ecycle until the result is valid during the cycle of any multiply operation the initial operands are recoded and loaded into the mandhw and mierhw mbooth registers for the multx operations the multiply cycles can be labeled m1 through m3 then the following timing diagram is validmay 9 2001 lx4280 lexra proprietary confidential 74 release 19 multx i s m1 m2 m3 lohi valid x any op i s m w any op i s m w mflo i s m w or mfhi i s m w for the madx operations the pipeline cycles after can be labeled as c carry save and accumulate then the following timing diagram is valid mazh0 i s c madh1 i s c madh2 i s c madh3 i s c any op i s m w any op i s m w mfhi i s m w hi contains a0 a1 a2 a3 98divider overview and register usage given dividend dend and divisor dvsr the divider generates quotient quot and remainder rem that satisfy the following conditions regardless of the signs of dend and dvsr dend dvsr quot rem 0 absrem absdvsr where rem and dend have the same sign itisworthnotingthattherequirementthatremanddendhavethesamesignisnotuniversallyacceptedif dend and dvsr are not both positive for example the modula3 language expects 5div32 5mod31 whereas the divider generates quot1 rem2 in agreement with fortran and others these examples show the possible combinations of signs dend dvsr quot rem 19 5 3 4 19 5 3 4 19 5 3 4 19 5 3 4 the divider is an iterative circuit that generates 2 quotient bit per cycle with an additional 3 cycles required due to pipelining considerations thus the pipeline flow of division instruction and the most efficient subsequent read of the quotient using mflo is as shown in the following diagram assuming that all the intervening instructions complete in one cycle if the mflo is issued earlier it will stall until the divide completes less than 19 instructions may be issuedifsomeofthemtakemorethanonecycletocompleteduetocachemissesordatadependentstallsfor example div i s d0 d1 d2 d17 d18 18 cycles mflo i s m wmay 9 2001 lx4280 lexra proprietary confidential 75 release 19 appendix lx4280 lconﬁg forms a1 conﬁguration options for the lx4280 processor this section provides summary of the configuration options available with lconfig refer to lconfigforms for detailed description of these form options product lexra processor name product_type indicates product type technology identifies target technology testbed_env identifies simulation testbed environment type reset_type flipflop reset method reset_dist reset distribution method sleep include clock sleep support reset_buffers reset buffers at toplevel module clock_buffers clock buffers at toplevel module ram_clock_buffers lmi ram clock distribution method cop1 coprocessor interface 1 cop2 coprocessor interface 2 cop3 coprocessor interface 3 ce0 custom engine 0 ce1 custom engine 1 m16_support 16bit opcode support mem_line_order cache line fill beat ordering mem_first_word cache line fill first word mem_granularity main memory system partial word write support system_interface system bus interface type lbc_wbuf lexra bus controller write buffer depth lbc_rbuf lexra bus controller read buffer depth lbc_rdbypass lexra bus controller read bypass enable lbc_sync_mode lbc synchronousasynchronous selection line_size cache line size in words icache instruction cache size dcache data cache size imem local instruction ram with line valid bits irom local instruction rom dmem local scratch pad data ram lmi_data_granularity dcache and dmem write granularity lmi_range_source source of lmi address ranges lmi_ram_arb allow external agents to arbitrate for lmi rams jtag internal jtag tap controller with ejtag support ejtag ejtag debug support ejtag_inst_break number of instruction breaks to be compiled ejtag_data_break number of data breaks to be compiled jtag_trst_is_tpc trst pin is tpc out instead of tdotpc mux pc_trace ejtag pc trace pins ejtag_dclk_n ejtag pctrace dclk n parameter ejtag_tpc_m ejtag pctrace tpc m parameter ejtag_xv_bits ejtag pctrace number of exception vector bits ejtag_pc_isabit ejtag pctrace include isa as pc bit0 scan_insert controls scan insertion and synthesis scan_mix_clocks scan chains can cross clock boundaries with lockup latches scan_num_chains number of scan chainsmay 9 2001 lx4280 lexra proprietary confidential 76 release 19 scan_scl scan collar insertion on ram interfaces sen_dist scan enable distribution method sen_buffers scan enable buffering ram_bist_mux include test ram mux and portsmay 9 2001 lx4280 lexra proprietary confidential 77 release 19 appendix b lx4280 port descriptions all ports must be connected to valid logiclevel sources the timing information indicates the point within cycle when the signal is stable in terms of percent the timing information also includes parenthetical references to these notes 1 clocked in the jtag_clock domain 2 clocked in the busclk domain if crossbar or lbc are asynchronous otherwise clocked in the sysclk domain 3 does not require constraint eg clock 4 constant that is treated as false path for timing analysis these inputs must not change after the processor is taken out of reset 5 timing is speciﬁed with symbol in techvarsscr script eg ram timing 6 atestrelatedinputoroutputthatistreatedasfalsepathfortiminganalysissuchinputsmust not change during normal atspeed operation 7 an asynchronous input if clock domain is specified the signal is clocked in the sysclk domain the table below shows the possible port connections for the top level module of the lx4280 processor known as lx2 the actual ports that are present depends upon lconfigsettings the timing information and notes have the same meaning as for the previous table names that include _n indicate active low signals all other signals are active high unless otherwise indicated forsinglebitsignalsthesignalnameandsignaldescriptionindicatetheactionorfunctionwhenthesignalis in the active state table 44 lx4280 processor port summary port name io timing description clocking reset interrupts and control sysclk input 3 processor clock sysclkf input 3 freerunningprocessorclockifproces sor is conﬁgured with sleep support sl_sleepsys_r output 30 clock gating term for sysclk if pro cessorisconﬁguredwithsleepsupport busclk input 3 bus clock if processor is conﬁgured with async lbc busclkf input 3 free running bus clock if processor is conﬁgured with async lbc sleep sup portmay 9 2001 lx4280 lexra proprietary confidential 78 release 19 sl_sleepbus_br output 30 clock gating term for busclk if pro cessor is conﬁgured with async lbc and sleep support resetn input 10 warm reset or reset button active low cresetn input 10 cold reset or power on active low reset_d1_r_n input 30 sysclk domain reset combination of resetn cresetn ejtag reset_d1_br_n input 30 busclk domain reset combination of resetn cresetn ejtag reset_pwron_c1_n input 30 power on reset copy for jtag reset_pwron_d1_lr_n input 30 sysclk domain power on reset for ejtag reset_d1_r_n_o output 30 sysclk domain reset combination of resetn cresetn ejtag reset_d1_br_n_o output 30 2 busclk domain reset combination of resetn cresetn ejtag reset_pwron_c1_n_o output 30 power on reset copy for jtag reset_pwron_d1_lr_n_o output 30 sysclk domain power on reset for ejtag intreq_n152 input 7 interrupt requests ext_halt_p input 50 external stall line ext_sleepreq_r input 30 external sleep request conﬁguration cfg_tlb_disable input 4 disable tlb mappings even if tlb is present cfg_sleepenable input 4 sleep enable conﬁguration cfg_rad_lexop50 input 4 lexop encoding must be 011111 for lx4280 cfg_rad_disable input 4 lexop disable conﬁguration must be one for lx4280 cfg_singleissue input 4 forces single instruction issue cfg_hlenable input 4 strap to one to enable internal hilo registers cfg_macenable input 4 strap to one to enable internal mac if present cfg_memsequential input 4 strap to one if line reads return words in sequential order zero if interleave order cfg_memzerofirst input 4 strap to one if line reads return word zero ﬁrst zero if desired word ﬁrstport name io timing descriptionmay 9 2001 lx4280 lexra proprietary confidential 79 release 19 cfg_memfullword input 4 strap to one if main memory must be written with 32bit words zero if byte and halfword writes are allowed cfg_lbcwbdisable input 4 strap to one to disable read bypass of lbc write buffer zero to allow read bypass cfg_ejtnminus110 input 4 strap with ejtag dclk n minus 1 conﬁguration 0314 cfg_ejtmlog210 input 4 strap with ejtag m log2 031248 conﬁguration cfg_ejt3bitxvtpc input 4 strap with etjag 3bit tpc conﬁgura tion cfg_ejtbit0m16 input 4 strap with ejtag pc bit0 in tpc ﬁguration cfg_dwbase3110 input 30 strapped with dmem base address conﬁguration value cfg_dwtop2310 input 30 strapped with dmem top address ﬁguration value cfg_iwbase3110 input 30 strappedwithimembaseaddresscon ﬁguration value cfg_iwtop2310 input 30 strapped with imem top address ﬁguration value cfg_iwrom input 4 straptoonetotreatimemlikearom note new applications should use irom instead of romlike imem cfg_iroff input 4 strap to one to disable irom cfg_dwdisw input 4 strap to one to disable processor dmem writes must be zero for lx4280 cfg_ejdis input 4 must be strapped to zero test and debug jtag_reset_o output 20 1 jtag is in testlogicreset state active low jtag_reset input 6 jtag is in testlogicreset state active low tap_reset_n_o output 20 1 tap controller reset tap_reset_n input 6 tap controller reset jtag_tdo_nr output 50 1 test data out active low jtag_tdi input 60 1 test data in jtag_tms input 60 1 test mode select jtag_clock input 3 test clockport name io timing descriptionmay 9 2001 lx4280 lexra proprietary confidential 80 release 19 jtag_trst_n input 6 test reset jtag_capture output 20 1 jtag is in data register cap ture state jtag_scanin output 50 1 scan input to chain jtag_scanout input 50 1 scan output from chain jtag_ir40 output 20 1 contents of instruction regis ter jtag_shift_ir output 20 1 jtagisinshiftinstructionreg ister state jtag_shift_dr output 20 1 jtag is in shift data register state jtag_runtest output 20 1 jtag is in runtest state jtag_update output 20 1 jtag is in data register update state ejc_ecrprobeen_r output 30 one indicates ejtag probe is active jpt_pcst_drm10 output 30 ejtagpctracestatusm124or8 jpt_tpc_drn310 output 30 ejtag pc trace value n 1 2 3 or 4 jpt_dclk output 3 ejtag pc trace clock sen input 6 scan enable active high tmode input 6 test mode active high sink0 input 6 scan input k can range from 7 to 0 soutk0 output 6 scan output k can range from 7 to 0 rbc_sel70 input 6 ram bist ram select code 10000000 instruction mem 01000000 data mem 00100000 dcache data store 00010000 dcache tag store 00001000 icache tag store set 1 00000100 icache inst store set 1 00000010 icache tag store set 0 00000001 icache inst store set 0 rbc_wek0 input 6 rambistwriteenablewherekis1 for word write granularity 7 for byte write granularity rbc_re input 6 ram bist read enable rbc_cs input 6 ram bist select rbc_addr150 input 6 ram bist address rbc_datawr630 input 6 ram bist write data rbm_datard630 output 6 ram bist read dataport name io timing descriptionmay 9 2001 lx4280 lexra proprietary confidential 81 release 19 lbc interface to lbus laddro310 output 2 20 address lcmdo60 output 2 20 lbc command ldatao310 output 2 20 lbc data ldatai310 input 2 50 system data lirdyo output 2 20 lbc initiator ready lirdyi input 2 30 system initiator ready lframeo output 2 20 lbc transaction frame lframei input 2 30 system transaction frame lsel input 2 30 system slave select ltrdyi input 2 30 system target ready lid output 2 20 instructiondata luc output 2 20 bus request lcoe90 output 2 20 command output enable ltoe output 2 20 transaction output enable ldoe70 output 2 20 data output enable lreq output 2 50 bus request lgnt input 2 30 bus grant shared ram requestgrant interface ext_iwreqram_r input 30 external hardware drives to one to request access to imem iw_gntram_r output 30 cpu drives to one to grant external imem access request ext_dwreqram_r input 30 external hardware drives to one to request access to dmem dw_gntram_r output 30 cpu drives to one to grant external dmem access request ext_icreqram_r input 30 external hardware drives to one to request access to icache ic_gntram_r output 30 cpu drives to one to grant external icache access request ext_dcreqram_r input 30 external hardware drive to one to request access to dcache dc_gntram_r output 30 cpu drives to one to grant external dcache access request coprocessor interface czcondin input 80 cop branch ﬂagport name io timing descriptionmay 9 2001 lx4280 lexra proprietary confidential 82 release 19 czrd_addr40 output 50 cop read address czrhold output 45 cop hold condition one stalls copro cessor czrd_gen output 50 cop general register read command czrd_con output 50 cop control register read command czrd_data310 input 80 cop read data czwr_addr40 output 20 cop write address czwr_gen output 20 cop general register write command czwr_con output 20 cop control write address command czwr_data310 output 30 cop write data czinvld_m output 60 cop invalid instruction ﬂag one indi cates invalid instruction in m stage czxcpn_m output 60 cop exception ﬂag one indicates exception in m stage c3cnt_iparet output 20 count instructions retired pipe c3cnt_ipbret output 20 count instructions retired pipe b c3cnt_ifetch output 20 count instruction fetches c3cnt_imiss output 20 count icache misses c3cnt_istall output 20 count icache stalls c3cnt_dmiss output 20 count dcache misses c3cnt_dstall output 20 count dcache stalls c3cnt_dload output 20 count data load operations c3cnt_dstore output 20 count data store operations custom engine interface cei_ce1hold output 45 cpu is halting custom engine cei_ce1invld_m output 40 instruction is not valid m stage cei_ce1invldp_s_r output 30 instruction is not valid s stage cei_xcpn_m_c1 output 40 cpu reports exception cei_ce1op_s_r110 output 30 custom engine op code cei_instm32_s_r_c1_n output 30 one indicates 32bit instruction mode zero indicates 16bit instruction mode cei_ce1aop_e_r310 output 35 operand cei_ce1bop_e_r310 output 35 b operand ce1_res_e310 input 45 result from custom engineport name io timing descriptionmay 9 2001 lx4280 lexra proprietary confidential 83 release 19 ce1_sel_e_r input 30 one indicates custom engine opcode is present in stage ce1_halt_e_r20 input 20 custom engine stalls processor by drivingtoonesallowsprocessortorun by driving to zeros copies must be suppliedfrommultipleregisterstomeet timing requirementsport name io timing descriptionmay 9 2001 lx4280 lexra proprietary confidential 84 release 19 may 9 2001 lx4280 lexra proprietary confidential 85 release 19 appendix c lx4280 pipeline stalls this section documents stall conditions that may arise in the lx4280 c1 stall deﬁnitions issue stall an invalid instruction enters the pipe while any other valid instructions in the pipe advance pipeline stall all instructions in either pipe stay in the same stage and do not advance dualissue interlock only one of the potential pair of instructions enters pipe the other instruction of the pair waits for the next cycle to enter stall if not otherwise qualified means pipeline stall c2 instruction groupings these instruction groupings are used to describe stall conditions that are based on the type of instructions in the pipeline table 45 instruction groupings for stall deﬁnition group name instructions in group miloadstore lb lh lw lbu lhu lwc1 lwc2 lwc3 sb sh sw swc1 swc2 swc3 mimac multu divu mfhi mflo mthi mtlo madh madl mazh mazl msbh msbk mszh mszl micontrol j jalx jr jalr bltzal bgezal linked branches syscall break all copz mfcz cfcz mtcz ctcz bcfz bctz rfe lwcz swcz also in loadstore group miunlinkedbranch beq bne blez bgtz bltz bgez migeneral all remaining instructions mivcmove movz movn m16loadstore lb lh lwsp lw lbu lhu lwpc sb sh swsp sw swrasp m16mac multu divu mfhi mflo madh madl mazh mazl msbh msbk mszh mszl m16control jalx jr jalr break m16unlinkedbranch b beqz bnez bteqz btnez m16general all remaining m16 instructions ejtagcontrol deret sdbbp m16sdbbpmay 9 2001 lx4280 lexra proprietary confidential 86 release 19 c3 dual pipe issue rules these instruction groups must issue to pipe miloadstore micontrol miunlinkedbranch m16loadstore m16control m16unlinkedbranch ejtagcontrol these instruction groups must issue to pipe b mimac m16mac radmac these instruction groups must single issue micontrol ejtagcontrol all m16 instructions instruction doubleword issue rule inorderforapairofinstructionstodualissuetheymustbefoundinthesamealigneddoubleword unlinkedbranchdelay slot rules anunlinkedbranchcandualissuewiththeprecedinginstructionifnootherrulesareviolatedthe delay slot instruction of an miunlinkedbranch single issues in the cycle following the unlinkedbranch producerconsumer readafterwrite raw hazard pair of instructions will not dual issue if the second instruction uses register updated by the first instruction this does not apply to register 0 which never causes an interlock producerproducer writeafterwrite waw hazard apairofinstructionswillnotdualissueifthesecondinstructionupdatesaregisterupdatedbythe firstinstructionunlessthecommontargetregisterisalsoasourceregisterofthesecondinstruction in which case the raw interlock applies useful program is expected to include such pair of instructions since the results of the first update are lost this does not apply to register 0 which never causes an interlock examples both raw and waw apply causing single issue 00 add s0s1s2 04 add s0s0s3 2xsingle issue s0 raw first instruction does useful work visible only in case of exception 00 add s0s1s2 04 add s0s4s3 2xsingle issue s0 waw c4 m16 32bit instructions m16jalx issues in two consecutive cyclesmay 9 2001 lx4280 lexra proprietary confidential 87 release 19 m16 extended instructions issue in two consecutive cycles c5 nonsequential program flow issue stalls jr jalr and m16 jr jalr alx two issue stalls after the delay slot instruction the delay slot instruction always single issues j jalx and taken branches stall cycles after the delay slot instruction the delay slot instruction always single issues m16 taken branches one issue stall after the branch nottaken branches two issue stalls after the delay slot instruction the delay slot instruction always single issues m16 nottaken branches three issue stalls after the branch the branch rules are consequence of the fact that all branches are assumed to be taken c6 loadstore rules m16 load slot issue stall there is one unconditional issue stall after any m16 load instruction there is m16 target register analysis loaduse single cycle issue stall after load instruction to target register an instruction which follows the load by one cycle and uses the target register of the load will stall issue for one cycle note the architectural loaddelay slot has been eliminated from the lx4280 this issue stall applies even to the instruction immediately following the load this does not apply to m16 loads since they are always followed by single cycle issue stall examples this executes in 3 cycles 00 lw s00a0 04 addi a04 dual issue 08 add s1s0 0c add t1t2 stalls0 loaduse dual issue this executes in 3 cycles 00 lw s00a0 04 addi a04 dual issue 08 add t1t2 0c add s1s0 2xsingle issue s0 loadusemay 9 2001 lx4280 lexra proprietary confidential 88 release 19 this executes in 3 cycles 00 add t1t2 04 lw s00a0 dual issue 08 addi a04 0c add s1s0 2xsingle issue s0 loaduse this executes in 3 cycles 00 lw s00a0 04 lw s24a0 2xpipea single issue 08 add s1s0 0c addi a08 dual issue this executes in 3 cycles note elimination of architectural delay slot 00 add t1t2 04 lw s00a0 dual issue 08 add s1s0 0c addi a04 stalls0 loaduse dual issue this executes in 2 cycles 00 add t1t2 04 lw s00a0 dual issue 08 add s2s1 0c addi a04 dual issue s0 not used load subword stall load instructions which have byte or halfword operands always cause onecycle stall storeload stall load instruction which follows store instruction by one cycle always causes onecycle stall note this stall only applies if the store instruction hits in the dcache or has byte or halfword operand examples this executes in 3 cycles 00 sw s04a0 04 addi a08 dual issue 08 add s0s1 0c lw s20a0 dual issue and swlw stall this executes in 3 cycles 00 sw s04a0 04 addi a08 dual issue 08 lw s20a0 0c add s0s1 dual issue and swlw stall this executes in 4 cycles 00 sw s04a0 04 lw s28a0 2xpipea sing issue and swlw stall 08 addi a08 0c add s0s1 dual issue this executes in 2 cycles 00 lw s20a0 04 add s0s1 dual issue 08 sw s04a0 0c addi a08 dual issue lwsw okay this executes in 3 cycles 00 st s20a0 04 st s08a0 2xsingle issue and stst stall storeany storesubword stall astoreinstructionwhichhasabyteorhalfwordoperandandwhichfollowsanystoreinstructionmay 9 2001 lx4280 lexra proprietary confidential 89 release 19 by one cycle always causes onecycle stall examples this executes in 3 cycles 00 sw s04a0 04 addi a08 dual issue 08 add s0s1 0c sb s20a0 dual issue and swsb stall this executes in 4 cycles 00 sh s04a0 04 addi a08 dual issue and subword stall 08 sb s20a0 0c add s0s1 dual issue and shsb stall c7 loadstore ops stall matrix the following table summarizes the stall rules related to load and store instructions described above this table does not include the raw and waw dualissue interlocks in this table the 2nd op refers to an instruction which issues in the cycle after the 1st op table 46 loadstore ops stall matrix notes means stalls xu indicates unconditional stall for the indicated number of cycles xs indicates stall only if 2ndop source 1stop loadtarget xw indicates stall if data rams have wordwrite granularity c8 mac ops interlock matrix the mac eliminates all programming hazards between mac instructions by stalling the pipeline as necessarythisisdonebothtoavoidresourceconflictsaswellastowaitforresultsofafirstinstructionthatis needed by second instruction the following table indicates the number of cycles that must be inserted between the first indicated instructionandthesecondazeroordashindicatesthattheinstructionscanissuebacktobacktothemac pipe with stalls nonzero number indicates the number of stall cycles that will occur if the instructions are issued in consecutive cycles these stall cycles are available for any other nonmac instructions but should not be filled with nops since that would only increase the code footprint without improvingm16 lwm16 lbu lhumi lbu lhu sb sh sw non loadstore1u 2u 1s lw lwp lbu lhu1u 2u 1s 1u 1u sb sh 1u 2u 1s 1u 1u sw 1u 2u 1s 1st op 2nd opmay 9 2001 lx4280 lexra proprietary confidential 90 release 19 performance table 47 cycles required between mac instructions examples this executes in 7 cycles 00 mult s0s1 04 addi a08 dual issue 08 lw s00a0 0c lw s10a0 2xpipea sing issue 10 addi a14 14 mflo v0 dual issue and stall2 18 sw v00a1 1c nop dual issue c9 mvcz stall the coprocessor move instructions lwcz mtcz mfcz and radiax mtlxc0 mflxc0 always single issue and are always followed by single cycle issue stall c10 immu stalls immu stall when the program jumps branches or increments between the two most recently used pages single cycle stall is incurred when the program jumps branches or increments to third page twocycle stall is incurred immu issue stall when an immu stall occurs due to incrementing across page boundary and there is any of the following instructions found anywhere in the last doubleword of the page then there is one issue stall in addition to the immu stalls or m16 branch of any kind j jalx ejtag deret m16 extendmult multu mad madu msub msubumthi mtlo madh madl mazh mazl msbh msbl mszh mszl mfhi mflo div divu mult multu mad madu msub msubu madh madl mazh mazl msbh msbl mszh mszl1 cycle 19 cycles div divu 1 cycle 19 cycles mfhi mflo 3 cycles 2 cycles 19 cycles2nd op1st opmay 9 2001 lx4280 lexra proprietary confidential 91 release 19 m16 jalx first half c11 cache miss stalls instruction cache miss stall whenaninstructioncachemissoccurstheprocessorisstalledforthedurationofthecachelinefill operation the number of cycles required to complete the line fill is system dependent instruction cache 2way soft miss stall when 2way set associative instruction cache is in use softmiss is defined as hit in the unpredicted set with set prediction defined as follows ifnotrunninginlockmodeorifthecurrentcacheindexhasnolockedlinesetpredictionisbased onthe lru bit predict the nonleast recently used set at the current cache index if running in lock mode and the current cache index has locked line set prediction is based on the previous icache access predict the locked set if the previous icache access hit locked line and vice versa soft miss always causes twocycle stall data cache miss stall whenadatacachemissoccursastheresultofaloadinstructiontheprocessorstallswhileitwaits for the data the data cache releases the stall condition after the required word is supplied to the processorevenifadditionalwordsmuststillbefilledintothedatacachehoweveriftheprocessor issues another load or store operation to the data cache while the remainder of the line fill is in progress the cache will again stall the processor until the line fill operation is completed when data cache miss occurs as result of load byte or load halfword the processor stalls for the duration of the cache line fill operation the number of cycles required to complete the line fill is system dependent c12 nonsequential program flow issue stall pipeline diagrams jr jalr and m16 jr jalr jalx jr i d s m w delayslot i d s m w notvld i notvld i target i d s i d s j jalx and taken branches j i d s m w delayslot i d s m w target i d s m i d s mmay 9 2001 lx4280 lexra proprietary confidential 92 release 19 m16 taken branches b i d s m w notvld i target i d s m nottaken branches bntkn i d s m w delayslot i d s m w notvld i notvld i delay4 i d s i d s m16 nottaken branches bntkn i d s m w notvld i notvld i notvld i delay4 i d s c13 loadstore stall pipeline diagrams m16 load slot issue stall load i d s m w notvld i load2 i d s m loaduse single cycle issue stall 00 lw s00a0 i d s m w 04 addi a04 i d s m w 08 add s1s0 i d d s m w 0c add t1t2 i d d s m w 00 lw s00a0 i d s m w 04 addi a04 i d s m w 08 add t1t2 i d s m w 0c add s1s0 i d d s m w 00 add t1t2 i d s m w 04 lw s00a0 i d s m w 08 addi a04 i d s m w 0c add s1s0 i d d s m w 00 lw s00a0 i d s m w 04 lw s24a0 i d d s m w 08 add s1s0 i d s m w 0c addi a08 i d s m wmay 9 2001 lx4280 lexra proprietary confidential 93 release 19 load subword stall 00 lb i d s m m w 04 foo1 i d s m m w 08 foo2 i d s m w 0c foo3 i d s m w 10 foo4 i d s s m w 14 foo5 i d s s m w rhold x storeload stall 00 sw s04a0 i d s m w 04 addi a08 i d s m w 08 add s0s1 i d s m m w 0c lw s20a0 i d s m m w 10 foo2 i d s m w 14 foo3 i d s m w rhold x 00 sw s04a0 i d s m w 04 lw s28a0 i d d s m m w 08 addi a08 i d s m w 0c add s0s2 i d s m w 10 foo2 i d s s m w 14 foo3 i d s s m w rhold x storeany storesubword stall 00 sw s04a0 i d s m w 04 addi a08 i d s m w 08 add s0s1 i d s m m w 0c sb s20a0 i d s m m w 10 foo2 i d s m w 14 foo3 i d s m w rhold x 00 sh s04a0 i d s m m w 04 addi a08 i d s m m w 08 sb s20a0 i d s m m w 0c add s0s1 i d s m m w 10 foo2 i d s s m w 14 foo3 i d s s m w rhold x x 00 st s20a0 i d s m w1 w2 04 sb s03a0 i d d s m m w 08 foo2 i d s m w 0c foo3 i d s m w 10 foo4 i d s s m w 14 foo5 i d s s m w rhold xmay 9 2001 lx4280 lexra proprietary confidential 94 release 19 00 nop i d s m w 04 st s08a0 i d d s m w1 w2 08 add s0s1 i d s m m w 0c sb s20a0 i d s m m w 10 foo2 i d s m w 14 foo3 i d s m w rhold x c14 mac ops interlock pipeline diagram 00 mult s0s1 i d s m 04 addi a08 i d s m w 08 lw s00a0 i d s m w 0c lw s10a0 i d s m m m w 10 addi a14 i d s m w 14 mflo v0 i d s m w 18 sw v00a1 i d s s s m w 1c nop i d s s s m w multcount4s 0 1 2 3 4 rhold x x c15 mvcz stall pipeline diagrams 00 mtc0 i d s m w notvld i 04 foo i d d d s m w 08 foo1 i d s m w 0c foo2 i d s m w 00 nop i d s m w 04 mtc0 i d d s m w notvld i 08 foo1 i d d s m w 0c foo2 i d d s m w 10 foo3 i d s m w 14 foo4 i d s m w c16 cache miss pipeline diagrams icache miss pipeline diagram 00 foo0 i d s m m m m m m w 04 foo1 i d s m m m m m m w 08 foo2 i d s m w 0c foo3 i d s m w 10 foo4 i d i d s m w 14 foo5 i d i d s m w rhold x x x x xmay 9 2001 lx4280 lexra proprietary confidential 95 release 19 icache 2way soft miss pipeline diagram 00 foo0 i d s m m m w 04 foo1 i d s m m m w 08 foo2 i d s m w 0c foo3 i d s m w 10 foo4 i d i d s m w 14 foo5 i d i d s m w 18 foo6 i d s m w 1c foo7 i d s m w rhold x x dcache miss pipeline diagram 00 foo i d s m w 04 lw i d s m w 08 foo1 i d s m m m m m w 0c foo2 i d s m m m m m w 08 foo3 i d s m w 0c foo4 i d s m w rhold x x x xmay 9 2001 lx4280 lexra proprietary confidential 96 release 19