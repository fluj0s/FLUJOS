stream processor sp1 data sheet revision 21 august 1 2002 lexra inc proprietary and confidential do not copy copy numberstream processor data sheet revision 21 august 1 2002 lexra proprietary and confidential copyright 2002 lexra inc all rights reserved mips and mips32 are trademarks andor registered trademarks of mips technologies inc other trademarks are the property of their respective owners do not copy stream processor lexra inc proprietary confidential i rev 21 august 1 2002 do not copytable of contents chapter 1 stream processor product overview 11 introduction 1 12 key features 2 13 specifications 3 14 sp1 architecture 3 141 lx4580 cpu 3 142 finegrained hardware multithreading hmt 4 143 crossbar interconnect 4 144 dma controllers 5 15 interfaces 5 16 software support 6 161 operating systems 6 162 development tools 6 163 sample applications 6 chapter 2 mips32 implementation specifics 21 mips32 implementation specifics overview 7 22 mips32 instructions 7 221 llsc 7 222 sync 8 223 pref 8 224 cache 9 225 wait 9 226 divide all variants 9 227 udi 9 23 cp0 registers 10 24 interrupts 13 25 exceptions 14 251 reset context wait and ejboot 15 252 dm wait and ejtag debug exceptions 15 26 address spaces 15 261 noncoherence for different access types 16 27 endianness 16 28 ejtag 16 29 cp0 hazards 17 210 performance counters 17 211 release 2 architecture support 18 2111 release 2 interrupt modes exceptions shadow gprs 19 2112 hazard barrier instructions 19 2113 field rotate shuffle instructions 20 2114 user access to hardware registers 20 2115 cp0 register changes 20 2116 64bit coprocessor fpu 21 2117 1kb pages 21 chapter 3 reset rst 31 reset overview 23ii lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200232 reset distribution 24 33 reset operation 24 34 reset registers 25 341 testandset register tas 25 35 reset external sp1 interfaces 25 chapter 4 interrupts int 41 interrupt overview 27 42 interrupt architecture 28 421 external interrupts 28 422 device interrupt messages 28 423 cpu cross interrupt messages 28 424 hardware error interrupt 29 43 interrupt registers 29 431 irr external interrupt master mask register irr_eimm 29 432 irr cpu cross interrupt register irr_cci 30 433 module error capture 31 44 interrupt external sp1 interfaces 32 chapter 5 address space 51 address space overview 33 52 address space size 34 53 physical address space decoding 34 54 boot space 35 55 control space 35 56 ejtag space 36 57 generic io space 36 58 pcix space 36 59 sdram space 36 510 address space configuration registers 37 511 error detection 37 chapter 6 crossbar xb 61 crossbar overview 39 62 crossbar architecture 40 63 crossbar messages 41 631 single beat message format 44 632 rle rlme request message format 44 633 ds wb wh wt ww message format 44 634 dl wln iea ira message format 44 635 message header eviction address beat format 45 636 data beat format 46 637 error detection and reporting 46 64 crossbar operation 46 641 clocking 46 642 initiatortarget relationships 46 643 crossbar transfer networks 47 65 crossbar internal sp1 interfaces 48 651 initiator and target message interfaces 48 652 initiator and target protocols 49 chapter 7 lx4580 cpu 71 lx4580 cpu overview 51stream processor lexra inc proprietary confidential iii rev 21 august 1 2002 do not copy72 lx4580 cpu core 52 73 instruction cache 52 74 data cache 52 75 cache line replacement algorithm 53 76 cpu error handling 54 chapter 8 cpu crossbar interface xbi 81 cpu crossbar interface overview 55 82 cbus interface 56 83 ibus interface 56 84 request fifo 56 85 inquiry request reply fifo 56 86 inquiry reply fifo 56 87 system address space configuration registers 56 871 as_drammask register 57 872 as_pciabase register 57 873 as_pciamask register 58 874 as_pcibbase register 58 875 as_pcibmask register 59 876 as_giobase register 59 877 as_giomask register 60 878 cpux_intpend register 60 879 cpux_intmask register 61 8710 dev_intpend register 61 8711 dev_intmask register 62 8712 ext_intpend register 62 8713 ext_intmask register 63 88 cbus interface 64 881 cbus request interface 64 882 cbus command encoding 65 883 rle rlme eviction address 65 884 cbus request reply interface 66 885 cbus request reply destination encoding 66 89 ibus interface 67 891 inquiry interface 67 892 ibus command encoding 67 893 inquiry reply interface 67 894 ibus header encoding 67 810 interrupt interface 68 chapter 9 memory subsystem ms 91 memory subsystem overview 69 92 memory subsystem requirements 70 921 transaction rate and bandwidth 70 93 supported memory configurations 71 94 messages and transactions 72 95 memory ordering and interleave 72 96 l2 cache 73 97 duplicate l1 tags 73 98 coherency protocol overview 74 99 cacheability and coherence 74 910 inquiry messages 75iv lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002911 l2 cache line replacement 76 912 coherency effects of crossbar queues 76 913 configuration 78 9131 msncfg register 78 9132 msnpld register 78 9133 msnmemctl registers 79 914 performance counters 80 9141 msnpcnt0 msnpcnt1 register 80 9142 msnpcnten register 80 9143 msnpcntev0 msnpcntev1 register 81 915 error handling 82 9151 msnerren0 msnerren1 register 83 9152 msnerrto register 84 9153 msnerrstat0 msnerrstat1 register 84 916 interfaces 85 9161 crossbar interface 85 9162 interrupt interface 86 9163 sdram interface 86 917 che transactions 87 chapter 10 direct memory access dma 101 direct memory access overview 97 102 addressing 98 1021 ethernet and pcix dma controller organization 99 1022 memory move dma controller organization 101 103 queue configuration 102 104 queue operation 102 105 buffer descriptors 104 106 input queue assignment with packet mapper 109 107 inserting leading fill into input packets 113 108 skipping leading fill from output packets 114 109 input packet timestamp 114 1010output queue selection 114 1011interrupts 114 1012checksum calculation 115 1013error detection and handling 115 1014memory bandwidth requirement 116 1015dma controller registers 117 chapter 11 ethernet media access controller mac 111 ethernet media access controller overview 119 112 gigabit media independent interface gmii 120 113 error signalling and statistics reporting 120 114 registers 122 chapter 12 pcix bridge pxb 121 pcix bridge overview 127 122 pcix interface 128 123 pcix arbitration 128 124 pcix master operation 129 125 pcix target operation 129 126 pcix registers 129stream processor lexra inc proprietary confidential v rev 21 august 1 2002 do not copychapter 13 system control module sc 131 system control module overview 131 132 cross interrupt reflector 132 133 system timers 132 134 i2c interface 134 135 test and set 134 136 rs232 serial uart 134 137 generic io interface 136 chapter 14 generic io interface gio 141 generic io interface overview 137 142 generic io interface signals and timing 138 143 generic io configuration overview 139 144 generic io transaction conversion 140 145 generic io transactions 140 146 errors and error reporting 149 147 generic io configuration registers 149 chapter 15 ejtag ej 151 ejtag differences from 200 158 1511 ejtag tap registers 158 1512 ejtag registers in ff3 drseg 160 152 description of lx4580 cpu specific ejtag features 161 1521 disable other contexts doc ejtag control register bit 6 161 1522 context select cxs ejtag control register bits 3029 161 1523 context in debug mode cdm ejc bits 2827 161 1524 cntxuse cntx in breakpoint control registers 162 1525 precise data breaks 162 1526 data value break loads 162 1527 ejtag_addr 36bit 162 1528 pc trace buffer tac 162 1529 instruction replay 166 15210 dmwait 166 15211 debug mode overrides disable context 167 15212 ejtag boot 167 15213 the lexra probe 167 chapter 16 performance counters 161 performance counter overview 169 162 performance counter architecture 169 163 performance counter operation 169 164 summary of performance counters 170 chapter 17 error detection and reporting 171 error detection and reporting overview 171 172 bus error reporting 171 173 hardware error reporting 172 174 error detection configuration registers 172 175 error detection and reporting pins 173 chapter 18 interfaces 181 interfaces 175vi lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential vii rev 21 august 1 2002 do not copylist of figures figure 1 ic diagram1 figure 2 lx4580cpu diagram3 figure 3 reset overview23 figure 4 system view of interrupt27 figure 5 interrupt architecture28 figure 6 address space overview33 figure 7 address space decoding34 figure 8 overview of crossbar39 figure 9 crossbar architecture40 figure 10 crossbar messages41 figure 11 eastbound crossbar network47 figure 12 westbound crossbar network47 figure 13 message transfer protocol49 figure 14 lx4580 cpu and crossbar interface51 figure 15 cpu crossbar interface architecture55 figure 16 memory subsystem blocks69 figure 17 direct memory access system overview97 figure 18 ethernet and pcix dma controller organization99 figure 19 ethernet and pcix dma flow100 figure 20 memory move dma controller organization101 figure 21 memory move dma flow101 figure 22 input pending queue107 figure 23 input completed output pending output completed queues108 figure 24 memory to memory copy pending and completed queues108 figure 25 packet mapper data flow109 figure 26 input mapping and workload assignment113 figure 27 gigabit ethernet memory bandwidth requirement116 figure 28 ethernet media access controller connectivity119 figure 29 overview of pcix bridge127 figure 30 system control module overview131 figure 31 generic io interface137 figure 32 example generic io interface application141 figure 33 generic io simple read144 figure 34 generic io simple write144 figure 35 generic io multiplexed read145 figure 36 generic io multiplexed write145 figure 37 generic io read with data handshake146 figure 38 generic io write with data handshake146 figure 39 generic io multiplexed read with data handshake147 figure 40 generic io multiplexed write with data handshake147 figure 41 generic io burst read148 figure 42 generic io burst write148 figure 43 sp1 etjag organization157 figure 44 cpu ejtag block diagram163 figure 45 performance counter structure169 figure 46 error detection block architecture172viii lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential ix rev 21 august 1 2002 do not copylist of tables table 1 summary of stream processor interfaces5 table 2 standard cp0 registers10 table 4 interrupt sources13 table 3 implementation dependent cp0 registers13 table 5 exception list14 table 6 cntxsel bits 1311 field of perfcnt control registers17 table 7 event field of perfcnt control registers17 table 8 hardware register values20 table 9 reset external interface25 table 10 interrupt external interface32 table 11 control space organization35 table 12 crossbar agents40 table 13 eastbound request messages41 table 14 westbound reqreply messages43 table 15 westbound inquiry messages43 table 16 eastbound inqreply messages44 table 17 initiatortarget relationships46 table 18 initiator message interface48 table 19 target message interface48 table 20 instruction cache transactions52 table 21 data cache transactions53 table 22 cache line replacement algorithm54 table 23 cbus request internal interface64 table 24 cbus commands65 table 25 cbus request reply internal interface66 table 26 cbus destination encoding66 table 27 cbus line state and transaction encoding66 table 28 ibus request internal interface67 table 29 ibus commands67 table 30 ibus reply internal interface67 table 31 interrupt interface68 table 32 memory configurations wdimms71 table 33 memory configurations w 128 mb components71 table 34 memory configurations w 256 mb components71 table 35 memory configurations w 512 mb components71 table 36 l2 cache states73 table 37 duplicate l1 cache states73 table 38 request attributes74 table 39 memory controller register offsets79 table 40 ms errors82 table 41 control interface85 table 42 eastbound request message interface85 table 43 eastbound inqreply message interface85 table 44 westbound message interface85 table 45 interrupt interface86 table 46 sdram interface86 table 47 dma capabilities98 table 48 queue configuration registers102 table 49 perqueue state registers102 table 50 buffer descriptor contents104x lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002table 51 mapper registers110 table 52 field processing statements110 table 53 mac configuration and status registers117 table 54 gmii external interface120 table 55 receive status vector120 table 56 transmit status vector121 table 57 mac configuration and status registers122 table 58 pcix interface128 table 59 conversion of internal transactions to pcix transactions129 table 60 pcix transactions to crossbar transactions129 table 61 generic io signals138 table 62 generic io timing parameters139 table 63 example gio application signals142 table 64 example gio application parameters143 table 65 summary of gio config registers for each device149 table 66 ejtag tap registers158 table 67 ejtag drseg registers160 table 68 cop0 ejtag registers161 table 69 summary of performance counters170 table 70 additional performance monitoring features170 table 71 interface summary175stream processor lexra inc proprietary confidential 1 rev 21 august 1 2002 do not copychapter 1 stream processor product overview 11 introduction thestreamprocessorsp1icprovidestheultimateinbothperformanceandflexibilityrequiredtoexecute demandingnetworkcommunicationapplicationson1gigabitpersecondpacketstreamsthesp1includes four4oflexraslx4580risccpuswithindependentl1cachesthatoperateinparallelonindependent packets or on independent packet flows the lx4580 cpu implements the mips32 isa with additional specializedinstructionsforoptimizedpacketprocessingpeakprocessorperformanceis2800dhrystone21 mips the cpus also incorporate lexras innovative finegrained hardware multithreading hmt technology as result high cpu performance can be sustained even while l1 cache misses are serviced the cpus are interconnected to shared resources through high bandwidth fullduplex crossbar the crossbar provides peak bandwidth of 384 gbps and can sustain 50 gigabits per second full duplex data bandwidth to shared sdram shared resources include memory subsystem with unified level 2 cache and cache coherency engine the memory subsystems includes two 2 sdram controllers with 64bit data interface to external ddr sdram the coherency engine provides hardware support for cache coherency among all cpus typically packets enter and exit the sp1 through the ethernet mac interfaces these interfaces are full duplex and operate at up to 125 mhz with 8bit data buses to support 1 gbps traffic the intelligent dma controller associated with each mac interface allows packets to be queued in offchip sdram without interrupting the application program similar dma controllers are associated with other sp1 interfaces three 3 independent mac interfaces are provided so that the sp1 can be used in applications requiring moderate connectivity without the need for extra boardlevel components the memory move controller transfers data from one region of sdram to another this is useful for example for transferring incoming packets between temporary buffers and specialized microflow queuesfigure 1 ic diagrammemory subsystem coherency engine 64kb l2 cachegeneric io interface crossbar lx4580 cpu0ejtag probedebug if lx4580 cpu1lx4580 cpu2 4 mips32 cpus 500mhz cpu clock with ﬁnegrained hardware multithreading hmtgenericboot bus memory move conti2c interfacei2c bus pcix and dma cont pcix busmac w dma cont 3 mii or gmiilx4580 cpu3ddr sdramddr sdram uart controllerserial interface timers and interrupts peripheral subsystemchapter 1 stream processor product overview 2 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002for later processing by the application program again the memory move controller performs its transfers without program intervention the sp1 incorporates high performance industry standard io interfaces to permit the sp1 to be easily designed into wide variety of systems in addition to ethernet macs pcix interface is included for communication with coprocessors the generic io bus permits simple lowcost connections to boot eproms and microcontrol components the i2c interface allows an sp1 application to configure and monitor other components in the system the uart provides an interface to debug console or remote access port the ejtag interface enables industrystandard debug software target applications for the sp1 include enterprise security systems these systems provide specialized services such as vpn firewall and intrusion detection fortrafficbetweentheenterpriselanordatacenterandwan thesp1canbeusedfor either linuxbased application services or for frontend network processing in these systems web appliances typical products include switches web directors web caches the sp1 provides consolidated functionality with strong layer 47 decision making for policy and content base load balancing security session and site persistence based on http cookies ip address etc network attached storage nas servers new generation nas servers provide remote storageondemand while lowering administration costs and leverage the learning curve of 3rd party internet technology the sp1 provides tcp termination iscsi protocol conversion and security services 12 key features 4 mips32 risc cpus with lexra isa extensions and finegrained hardware multi threadinghmteachcpuincludesa64kbl1instructioncacheanda16kbl1data cache crossbar interconnect 64bit data ports fullduplex peak data bandwidth 32 gbpsport 64bitmemorysubsystemlevel2cachememorycoherencyengineandcontrollerfor2 external sdram interfaces total unified level 2 cache memory 64 kb total external ddr sdram up to 8 gb external sdram bandwidth up to 50 gbps dma controllers and memorytomemory move controller background data transfer between io interfaces and sdram or between two sdram locations 3 101001000 ethernet mac interfaces mii or gmii 1 pcix interface 32 bits at 133 mhz 1 32bit genericboot bus 1 i2c interface 1 uart interface 2 system timers support for leading operating systems linux vxworks complete sp1 development platform13 specifications stream processor lexra inc proprietary confidential 3 rev 21 august 1 2002 do not copy13 speciﬁcations technology 013 µm cmos 500 mhz processor clock 2800 dhrystone 21 mips at 14 dmipsmhzcpu power dissipation 5 w worstcase voltage 12 v operating temperature 0 c to 70c commercial package 676pin pbga 14 sp1 architecture 141 lx4580 cpu the sp1 incorporates four 4 lx4580 cpus illustrated in figure2 the lx4580 is complete risc processor subsystem optimized for highperformance packet processing themajorblocksaretheregisterfileandaluralucoprocessor0cp0thelocalmemoryinterfaces lmito64kbinstructioncacheandto16kbdatacachethecrossbarinterfaceunitincludesawritebuffer and provides 64bit bidirectional split transaction interface to the crossbar lexras lx4580 cpu implements the full release 2 mips32 instruction set the mips32 optionaland recommended features included in the cpu are detailed in chapter2 number of implementationspecific issuesarealsodocumentedinchapter2lexrahasextendedthemips32isawithadditionalinstructionsfor optimizedpacketprocessingtheseinstructionsaredescribedinchapter2thecpuincludesanmmuand support 36bit physical addressesfigure 2 lx4580cpu diagramiaddricache 64 kb ilmi dcache 16 kbdlmicp0 raluejtagto debug probe mmuinterrupts daddrdbusinput transactionsoutput transactions ibuscrossbar interfacechapter 1 stream processor product overview 4 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the cpu execution pipeline is 7stage and exclusively uses the rising edge of the processor clock the 7 stage pipeline permits full addressregistertodataoutputregister cycle for both l1 instruction cache read andl1datacachereadasaresultthecpupipelineachievesmaximumperformanceforitsimplementation technology and methodology and will readily port to future technologies 142 finegrained hardware multithreading hmt the lx4580 cpu incorporates lexras proprietary implementation of finegrained hardware multi threading hmt although hmt is transparent to software it provides significant performance advantages to the sp1 customer that deserve attention in this overview inlexrasimplementationinstructionsareissuedroundrobintofouralternatepipelineflowseachpipeline flow has an independent program counter and general register file other software visible state is also replicated as detailed in chapter 2 in the absence of an l1 cache miss the four pipeline flows support four independent execution threads in typical network processing programs l1 data cache miss rates are high and singlethreaded processor is idlemuchofthetimetheproblemcanbemitigatedsomewhatwithanonchiplevel2cacheofferingfaster service time than main memory however in lexras implementation of hmt as few as two active threads can maintain 100 cpu utilization while cache misses from the other two threads are being served additional performance benefits from hmt result from the following all timingcritical internal forwarding paths are eliminated as result for specific technology and design methodology high processor clock speed is achieved branch prediction is not required there are sufficient cycles between issue slots so that branch outcome can be correctly resolved without prediction other highend risc architectures have devoted significant silicon area and power to minimizing stalls from branch prediction failures loadtousedelayisminimizedthe7stagepipelinewouldnormallyrequiretwoloadto use delay cycles with hmt the loadtouse delay is zero or one cycle depending on the number of actively executing threads as result the frequency of load interlock stalls is reduced lexras simulations indicate that if 3 of instructions cause an l1 cache miss and 50 of the l1 cache missesresultinanl2cachemisshmtdeliversa3xperformancebenefitcomparedtoasimilarsingleissue cpu this performance benefit can be realized in applications with sufficient thread parallelism assigning each thread one or more independent packet flows allows hmt to be fully exploited in the sp1 target applications 143 crossbar interconnect the crossbar provides high bandwidth fullduplex interconnect between the cpus dma controllers mainmemoryonchiplevel2cacheandexternaliointerfacesthecrossbaroperatesatthesp1ssystem clock rate 12 the cpu clock the crossbars internal data paths are 64bits wide distributed queuing is used internal to the crossbar to eliminate headofline blocking ports can transfer 64bits per cycle in each direction and achieve peak data bandwidth of 32 gbpsport the crossbar can transfer words or subwords it also supports processor l1 cache line read and write transfers64bytes thecoherencyengineinthememorysubsystemcommunicateswiththecpususing crossbar coherency signalling to insure that cache coherency is maintained in processor memory transactions without software intervention thecrossbarprovidesapointtopointmessagingprotocolresourcesconnectedtothecrossbarmayoperate as aninitiatora satarget or both messages of similar type between the same initiatortarget pair are144 dma controllers stream processor lexra inc proprietary confidential 5 rev 21 august 1 2002 do not copyalways delivered in order error messages are used to report memory system errors interrupt messages are used for processortoprocessor and devicetoprocessor signalling 144 dma controllers the stream processor provides multiple dma controllers for highspeed data transfer between the main memory and external interfaces and from memory to memory each ethernet mac and pcix interface includes dedicated dma controller the memory move controller is specialized dma controller used for transfers between source and destination buffers located in the stream processors main memory the ethernet macand pcix dma controllers provide sustained full duplex data bandwidth of 1 gbps in each direction the memory move dma controller provides data bandwidth of up to 10 gbps software can atomically enqueue new dma requests and dequeue completed requests using simple stores and loads to memory mapped registers within the dma controller without requiring an interrupt for each completedtransferthecontrollerprovidesatomicityfortheseoperationssothatmultiplecpusmayaccess the queues without prior synchronization or resource locking main memory data buffers are organized in linked lists of buffer elements the size and number of buffers in the list is softwaredefined 15 interfaces table1 summarizes the interfaces provided by the stream processor table 1 summary of stream processor interfaces name qty performance function sdram 264bit data 133 mhz clock up to 26 gbpsinterfaceincomingoutgoing packet queues micro flow queues state tables miigmii 3up to 125mhz clock full duplex 8bit rx data 8bit tx datapointtopoint full duplex packet interface glueless connection to wide variety of standard 101001000 phys and switches pcix 1133 mhz clock 32bit data total bandwidth is 42 gbpsthe leading highperformance embedded system bus standard genericboot 132bitasynchronousio bus32bitador24bit a8bit d modesglueless addressdata interface to devices such eproms microcontrollers programmable timing and control i2c 1shared serial bus interface up to 34 mbps fullduplexlowcost interchip control conforms to i2c version 21 phillips semiconductor serial 1serialioupto614400 baudsimple 4wire interface to applicaition specific debug terminal ejtag 140 mhz clock scan chain debug conforms to ejtag 20 provides pctrace multiprocessor supportchapter 1 stream processor product overview 6 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200216 software support 161 operating systems two operating systems are provided for the stream processor linuxversion24andhigherwithfullsmpsupportrunningonallcpusandhardware threads full source code for the linux kernel is available from montavista and the hardware abstraction layer is available from lexra and montavista vxworks version 54 running on one thread the hardware abstraction layer is available from wind river 162 development tools the following development tools are available the montavista toolchain is available on more than 12 development platforms including redhat and solaris the gnu toolchain compiler version 303 or higher binutils version 2112 or higher is available and is supported by lexra for crosscompilation from linux solaris and windowscygwin hosts the tornado toolchain is available from wind river on solaris and windows for vxworks development an ejtag debugging solution is available from embedded performance inc sp1 dev elopment board all of the above software tools and operating systems are supported on lexras sp1 dev elopment board the board provides phy and link layer components to route packets to and from the sp1 the sp1 packet and controlinterfacescanbeconnectedtocustomerdeﬁnedboardstoprovideacomplete realistic development environment 163 sample applications sample applications and device drivers showing how to use the interfaces of the processors are available from lexra in source formstream processor lexra inc proprietary confidential 7 rev 21 august 1 2002 do not copychapter 2 mips32 implementation speciﬁcs 21 mips32 implementation speciﬁcs overview the mips32 architecture defines certain features as optional or recommended in which case they may be completelyomittedfromacompliantimplementationothermips32featuresaredefinedasimplementation dependent in which case one or more choices must be supported for compliance finally there are optional extensions that an implementation may provide the purpose of this chapter is to detail the implementation dependent features of the lx4580 cpu used in the stream processor the specifics of each of the following areas is discussed in its own section instructions cp0 registers interrupts exceptions address spaces endianness ejtag cp0 hazards release 2 features 22 mips32 instructions this section describes implementation specific details of the following mips32 instructions llsc sync pref cache wait divide all variants udi 221 llsc the unit of memory that is used to determine whether the sc should fail is one cache line that is after the ll write to any byte in the line by any other entity will cause the sc to fail in addition any load store or cache instruction between the ll and the sc by the same context whennot in debug mode will cause the sc to fail any eret between the ll and sc by the same context will cause the sc to fail anystoretothecachelinebyadifferentcontextinthesamecpubetweenthellandsc will cause the sc to fail aloadorstorebetweenthellandthescbythesamecontextindebugmodemaycause the sc to fail in rare instances the precise conditions are described belowchapter 2 mips32 implementation specifics 8 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the remaining implementation of this feature relies solely on the state of the cache line within the l1 data cache in the cpu as follows note that there is architecturally visible cp0 lladdr register for hmt variant of the lladdr register just the data cache way and index is used for two purposes anothercontextisnotallowedtocauseareplacementevictionofthelinebetweenthell and sc to prevent this the particular data cache way and index of the line used by the ll are saved while the sc is pending or until it is guaranteed to fail whichever comes first another context in the processor can store to the line forcing the sc to fail this is detected by the l1 data cache using the saved way and index if all four contexts have pending sc for the same index each to different way then way of that index is available for replacement eviction any load or store by any context that is notin debug mode will enable way for eviction without impacting the other contexts because it can cause its own context sc to fail however load or store in debugmodethatrequiresareplacementevictioninthesameindexwillusethesavedway ofthecontextthatisexecutingindebugmodethisrarecasewillalsocausethesctofail for the context in question 222 sync there is only one outstanding data cache miss for either loads or stores at time for each context an uncached load prevents further progress by context until the load data returns therefore all cached loadsstores and uncached loads are strongly ordered for any given context to cover the ordering of uncached stores sync flushes uncached stores previously executed by the same contextpreventingforwardprogressbycontextexecutingthesyncuntilallsuchstoresareackedbytheir targets 223 pref the instruction is treated as nopon ll if cache miss request line shared else line is already shared or modified okay write by another entity outside this cpu will invalidate the line on sc if dcache miss sc fails else if already modified sc passes else request line upgrade to modified if invalidated before request completes sc fails else sc passes224 cache stream processor lexra inc proprietary confidential 9 rev 21 august 1 2002 do not copy224 cache the following operations are supported i index invalidate d index writebackinvalidate index invalidate id index store tag id hit invalidate d hit writebackinvalidate hit invalidate d hit writeback the following are not implemented st anything i fill id index load tag id fetch and lock there are locks in instruction or data cache since the instruction and data caches are shared by all four contexts in the cpu it is the responsibility of software to avoid conflicting cache instruction execution note that the data cache writeback operations and the instruction cache invalidate operations are generally safe across contexts since they do not discard potentially modified data if the store tag operation is only used for initialization that too should be safe to use finally the data cache hit invalidate should be used with caution since it discards data that may have been written by context different than the one executing the cache instruction 225 wait only code 0 is supported when the wait instruction is executed by context in the lx4580 cpu that context is suspended from furtherexecutiontheonlywaytorestartacontextaftercompletionofawaitinstructioniswithan enabled interrupt to that context the epc will point to the instruction after the wait sincetheothercontextscontinueexecutionthewaitinstructiondoesnotcausethecpuclockstostopnor arethecpucachesdisabledanypowersavingsfromthewaitinstructionwouldbeonagatelevelbasisin that reduced pipeline activity would reduce the circuit switching current the primary benefit of the wait instructionistoreducecontentionamongcontextsforthecpupipelineslotswhileoneormorecontextsare merely waiting for some external event for this reason it is preferred to software spin loop 226 divide all variants the divider detects when the dividend has leading zeroes reducing its latency in such cases 227 udi the following user defined instructions are implemented hash rd rt keysize hashtokeythe5bitkeysizeisavaluekintherange424the32sourcebitscontained in rt are hashed to form key of k bits which is stored in rdk10 the remaining bits of rd are zeroed if k is not in the range 424 the results are unpredictable format 3126 011100 special2 2511 zerortrd 106 keysize 50 110000 hashchapter 2 mips32 implementation specifics 10 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002 acs2 rd rs rt dualaddforchecksumthisinstructionperformsdual16bitonescomplementaddition considering all quantities as unsigned 16bit integers add rs150 to rt150 and independently add rs3116 to rt3116 for each addition if there is carry out of the most significant bit of its result add one to that result to form its final result the final results are stored in rd150 and rd3116 format 3126 011100 special2 2511 rsrtrd 106 zero 50 110001 acs2 23 cp0 registers this section describes implementation specific details of the cp0 registers in table2 each of the standard mips32release2cp0registersislistedtogetherwithanindicationiftheregisterisnotimplementedifit is implemented there may be details on how the implementation handles certain fields in the register for registers that are implemented the column labeled hmt indicates whether it is implemented independently for each context 4 or just once per cpu 1 in table3 the implementation specific cp0 registers are described all of the implementation specific cp0 registers are implemented independently for each context under hmt except cvstag and cxctrl although in cxctrl the context bits in the gtid field are in fact unique by context table 2 standard cp0 registers name num sel hmt field implementation speciﬁc information index 0 0 4 6bits random 1 0 4 see notea entrylo01 23 0 4 pfn 36bit pa supported c only values 2 or 3 supported context 4 0 4 pagemask 5 0 4 only 4kb and 64mb pages see noteb maskx always 211 1kb pages pagegrain 5 1 not implemented wired 6 0 4 hwrena 7 0 4 badvaddr 8 0 4 count 9 0 1 counts cpu clocks entryhi 10 0 4 compare 11 0 423 cp0 registers stream processor lexra inc proprietary confidential 11 rev 21 august 1 2002 do not copystatus 12 0 4 cu321 always 0 fpu coprocessors re always 0 reverseendian rpfrmxpx always 0 ts always 0 sr always 0 impl always 0 kxsxux always 0 r0 always 0 intctl 12 1 4 ipti always 7 timer interrupt in ip7 ippci always 7 perfcnt interrupt in ip7 eic vs always 0 srsctl 12 2 1 always 0 srsmap 12 3 not implemented cause 13 0 4 dc all contexts must set this to stop count wp always 0 exccode see notec epc 14 0 4 prid 15 0 1 lx4580 0x000bd101 ebase 15 1 4 cpunum same value as cxctrlcpunum config 16 0 4 m 1 be 1 always bigendian kuk23 value 3 for fixed mapping table when mt3 at always 0 ar always 1 mt reset to 1 or 3 per config pin vi always 0 k0 reset to 2 may be written values 2 or 3table 2 standard cp0 registers continued name num sel hmt field implementation speciﬁc informationchapter 2 mips32 implementation specifics 12 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002config1 16 1 1 m 0 mmu1 24 entry 23 isilia 64byte linesize 64kb icache size 4 ways dsdlda 64byte linesize16kb dcache size4 ways c2md always 0 pc 1 wrca always 0 ep 1 fp always 0 config2 16 2 not implemented config3 16 3 not implemented lladdr 17 0 not implemented watchlo 18 not implemented watchhi 19 not implemented debug 23 0 4 depc 24 0 4 perfcnt 25 07 1 4 counters with controls see section210 errctl 26 0 1 cacheerr 27 1 tbd format taglo 28 0 1 tbd format datalo 28 1 not implemented taghi 29 0 not implemented datahi 29 1 not implemented errorepc 30 0 4 desave 31 0 1 therandomregisterisdecrementedoneveryinstructioncompletionthetwomostrecently used values by tlbwr in tlbreﬁll exception are saved and are never used in subse quent tlbwr tbd an lfsr is used to further control the decrement of random b onlybits2625ofthemaskﬁeldinthepagemaskregisterareimplementedwritingonesto these bits signiﬁes 64mb page all other bit positions return zeroes on reads c the cause register exccode field can have the following values int mod tlbl tlbs adel ades ibe dbe sys bp ri cpu ov tr cacheerr the cause register exccode can never have the following values fpe c2e mdmx watch mchecktable 2 standard cp0 registers continued name num sel hmt field implementation speciﬁc information24 interrupts stream processor lexra inc proprietary confidential 13 rev 21 august 1 2002 do not copy24 interrupts the mips32 architecture defines eight interrupts which are visible as the interrupt pending bits ip70 in the cp0 cause register in table4 the source of each of these pending interrupts is indicatedtable 3 implementation dependent cp0 registers name num sel bits field implementation speciﬁc information cxctrl 16 6 31 cxtas test and set bit is set to 1 after any reada 3024 0 2316 sw software usable readwrite field 1512 0 118 dc30 disable context in this cpu 75 0 40 cpunum same as ebasecpunuma cvstag 16 7 310 cvstag readonly for lexra internal use thecxtasbitallowsatomicupdatestotheremainingfieldsofthecxctrlregisteracon textwhichreadsthisbitasoneshould notupdateanyfieldsacontextwhichreadsthisbit as zero should restore it to zero whether or not it updates other fields the cpunum is chipwide unique identifier for the current thread of execution the two least significant bits are the context number within the cpu this value is also readable fromthecpunumfieldoftheebasecp0registerthatisdefinedbymips32release2or ifenabledinusermodeusingtherelease2rdhwrinstructionspecifyingthecpunum hardware register using those other methods of obtaining cpunum avoids the need to check and possibly clear cxtas table 4 interrupt sources interrupt definition generation ip0 software 0 write to cause ip0 ip1 software 1 write to cause ip1 ip2 hardware 0 cpu cross interrupts see section423 ip3 hardware 1 device interrupts see section422 ip4 hardware 2 hardwareerrorinterruptfrominterruptreflectorseesection424 ip5 hardware 3 0 reserved tbd for offchip real time interrupt ip6 hardware 4 external interrupts see section421 ip7 hardware 5 logically or timer interrupt with performance counter interruptchapter 2 mips32 implementation specifics 14 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200225 exceptions alloftheexceptionsthataredefinedbythemips32architectureareintable5therelevantimplementation specific aspects are indicated table 5 exception list exception implementation speciﬁcs reset softreset implemented like reset debug singlestep debug interrupt imprecise debugdatabreakloads with addressdata match not implemented nmi tbd for errors machinecheck not implemented interrupt see section24 interrupts deferred watch not implemented debug instructionbreak watch ifetch not implemented address error ifetch tlb refill ifetch tlb invalid ifetch cache error ifetch bus error ifetch sdbbp coproc unusable reserved inst execution exceptionoverflow trap break syscall precise debug databreak1loads with address match only all stores watch not implemented address error data tlb refill data tlb invalid data tlb modified data cache error data bus error data precise debug databreak2not implemented loads with addressdata match are always treated as imprecise debug databreak exceptions251 reset context wait and ejboot stream processor lexra inc proprietary confidential 15 rev 21 august 1 2002 do not copy251 reset context wait and ejboot whenthecpuisresetonlycontext0isenabledthisisaccomplishedbythehardwareinitializingthevalue ofthedcbitsinthecxctrlregistersothatallcontextsotherthan0aredisableditistheresponsibilityof the reset handler that runs in context 0 to enable the other contexts by clearing their dc bits when its dc bit is cleared each of the other contexts will begin execution of the reset handler as indicated in table2 each context has its own errorepc used to return from the reset exception and each context can control where it begins execution after it completes the reset handler as described in section33 the cpu can optionally begin execution at the time of reset by fetching instructionsindebugmodefromtheejtagprobefromthecpupointofviewthisfunctionalityissimilar totheejbootfeatureofejtag25theextensionstoejtag20thatcontrolthisfeaturearedescribedin chapter15 as in the case of all reset exceptions only context 0 begins execution hence only context 0 enters debug mode in this case the other contexts begin execution at the standard reset exception vector in normal mode after their dc bits are cleared 252 dm wait and ejtag debug exceptions the lx4580 cpu implements dm wait feature which prevents more than one context from executing in debugmodeatanygiventimeasnotedintable2thereisonlyoneinstanceofvariouscp0registerssuch as desave used to support debug mode furthermore the ejtag probe software is unlikely to support intermixedaccessestothedmseganddrsegregionsthereforeafteronecontextbeginsexecutingindebug mode due to an ejtag exception any other context which takes an ejtag exception is placed in the dm wait queue while in the dm wait state the context does not issue any instructions when the first context leaves debug mode by executing deret instruction the next context in the dm wait queue resumes execution in the ejtag exception handler furthermore the ejtag implementation for the lx4580 cpu has an additional feature which optionally allows an ejtag exception in one context to immediately place all other contexts in the cpu into the dm wait queue suspending their execution when the first context leaves debug mode by executing its deret the other contexts resume execution at whatever point they were suspended this feature allows the ejtag probe software to gain control of the entire cpu without needing to put all contexts into debug mode simultaneously anadditionalfeatureofthelx4580cputobenotedisthatdebugmodeforacontextoverridesthedcbit for that context this allows the ejtag probe to force context to enter debug mode using the dint ejtag exception even if the context is disabled for normal execution it also prevents context that is executing in debug mode from being disabled by another context which could hang the ejtag probe 26 address spaces supervisor mode is not supported kseg2 is supported instead of ksseg 36 physical address bits are supported the only memory access types supported are values 2 uncached and 3 cacheable kseg0 can be either uncached or cacheable according to the k0 field of the cp0 config register whentheerlfieldofthecp0statusregisterhasvalue1kusegisanunmappeduncachedsegmentandall 231 bytes are translated this is the situation upon resetchapter 2 mips32 implementation specifics 16 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002as noted in the cp0 config register mt field at reset the tlb can be disabled in which case the fixed mapping table will be used in this case as noted in the cp0 config register kuk23 field definitions kuseg kseg2 and kseg3 will always be cacheable field value 3 261 noncoherence for different access types the mips32 architecture specifies that results of loads or stores to location using one memory access type that follow loads or stores to the same location using different memory access type are unpredictable in general the architecture states that an implementation specific sequence can enforce coherence between suchaccessesforthelx4580cputheonlytwoaccesstypesarecacheableanduncachedbyperforminga cache instruction with the hit writeback invalidate operation between the accesses the coherence can be enforced the address used for the cache instruction may have either the cacheable or uncached access type this implies that the required cache instruction may use the address from either of the accesses so that it can be done immediately after the first access or immediately before the second access in either case using the same base register and offset as the access in question 27 endianness atresetbigendianisalwaysselectedreverseendiannessisnotsupportedinmips32release2thewsbh instruction can be used when endian swap is needed see section2113 28 ejtag the cpu generally supports the ejtag 20 specification in manner consistent with the mips32 architecture the exceptions to this are in the following areas pc trace data break exceptions hmt extensions for pc trace the ejtag 20 concept of external trace signals is not supported this is due to the higher speedofthecpuandthemulticontextnatureofthelx4580cpupipelineinsteadanonchiptracebuffer isusedtocaptureinformationaboutinstructionexecutionthecontrolsforthetracebufferallowtracingofa single context or tracing of all contexts of the lx4580 cpu simultaneously the trace buffer and associated controls are described section1528 fordebugdatabreakexceptionsthecpuimplementstheconceptofprecisedatabreaksthatisdefinedin the ejtag 25 specification in particular for loads only the address match applies for stores both the address and data match if enabled apply imprecise data breaks which would require data match for loads are not supported because the lx4580 cpu often resolves loads for given context in the background of execution of other contexts as noted in section252 only single context of the lx4580 cpu is allowed to execute in debug mode at anygiventimefurthermoreiftheejtagcontrolregisterdisableothercontextsdocbitissetwhen any context enters debug mode all other contexts suspend execution as indicated in table2 each context hasitsowncp0debuganddepcregisterstoprovideindependentcontextcontrolofejtagandtoholdthe depcforeachcontextthatisindmwaitstateontheotherhandthereisonlyonedesaveregisterthatis shared by all contexts since it is only needed during execution in debug mode for both instruction and data breaks the match logic is extended to include an optional match against the context number forejtagbreaksanadditionalfieldintheejtagcontrolregisterisusedtoindicatewhetherallcontexts are to be interrupted or just specific context is to be interrupted29 cp0 hazards stream processor lexra inc proprietary confidential 17 rev 21 august 1 2002 do not copy29 cp0 hazards in all cases the implementation meets or exceeds the typical requirements for instruction spacing to avoid cp0 hazards as described in the mips32 architecture specification 210 performance counters thelx4580cpuimplementsfourperformancecountersasnotedintable2eachcountercanselectfrom the same set of events to count and each counter can count the selected event for all contexts or for one particular context the format of the counters and their control registers follows the mips32 release 2 specificationwithonelexraextensionthecntxselfieldinbits1311ofthecontrolregistersasdefinedin table6 the event field bits 105 of the mips32specified counter control registers is defined in table7 table 6 cntxsel bits 1311 field of perfcnt control registers value bits 1311 context to count 000 count events for all contexts 100 count events for context 0 101 count events for context 1 110 count events for context 2 111 count events for context 3 others reserved table 7 event field of perfcnt control registers value bits 105 event counted 000000 retired instructions 000001 replayed instructions 000010 instruction fetch valid new dstage 000011 icache instruction fetch 000100 icache miss 000101 uncached instruction fetch 000110 dcache load 000111 dcache store 001000 dcache load miss 001001 dcache store miss 001010 dcache load or store 001011 dcache load or store misschapter 2 mips32 implementation specifics 18 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002211 release 2 architecture support the lx4580 cpu supports the mips32 release 2 architecture changes those changes include numerous optional and implementation dependent features as well as several required features the following sections001100 uncached load or store 001101 writeback for replacement 001110 writeback for inquiry 001111 invalidate for inquiry 010000 nop for inquiry 010001 pipeline stall for any reason 010010 pipeline stall for icache ﬁll 010011 pipeline stall for dcache ﬁll 010100 pipeline stall for store from store queue 010101 pipeline stall for write buffer full 010110 execution exception ovtrapbreaksyscall 010111 tlb reﬁll exception instruction 011000 tlb reﬁll exception data 011001 tlb invalid exception instruction 011010 tlb invalid exception data 011011 tlb modiﬁed exception 011100 any tlb exception 011101 itlb miss 011110 dtlb miss 011111 interrupt 100001 any exception 100010 store conditional instruction pass or fail 100011 store conditional fail others reserved counttable 7 event field of perfcnt control registers value bits 105 event counted2111 release 2 interrupt modes exceptions shadow gprs stream processor lexra inc proprietary confidential 19 rev 21 august 1 2002 do not copyprovide detail on the lx4580 implementation as quick summary the following is list of all of the release 2 features and their support in the lx4580 cpu vectored interrupts not supported external interrupt controller not supported programmable exception vector base supported atomic interrupt enabledisable supported disable count register supported gpr shadow registers not supported field rotate shuffle instructions supported hazard barrier instructions supported user hardware register access supported cp0 register changes supported 64bit fpu not supported 1kb page size not supported 2111release 2 interrupt modes exceptions shadow gprs the release 2 architecture defines compatibility interrupt mode which is equivalent to the release 1 interruptmodethis istheonlyrelease2interrupt modesupportedbythelx4580cpu thevectoredand external interrupt controller eic modes are not supported gpr shadow registers are not supported as noted in section24 the timer and performance counter interrupts are presented as ip7 therefore the ipti and ippci fields of the release 2 intctl register have that value the other fields of intctl are always zero the cause register fields and pci are implemented to provide direct indication of timer and performance counter interrupts since eic mode is not supported the status and cause registers never use the ipl and ripl formats for interrupt priority levels becausethereisonlyasinglecountregistersharedbyallcontextsthedcdisablecountbitinthecause registeronlyhasaneffectifallcontextssettheirindividualdcbitotherwisethecountregistercontinuesto run therelease2ebaseregisterisfullyimplementedwithintheebaseregistertheleastsignificantbitsofthe cpunum field reflect the context number within the lx4580 cpu that is each context reads unique cpunum value from its ebase register there is one ebase register per context so that each can independently set its exception base value the release 2 ei and di enable and disable interrupt instructions are implemented as required becauseshadowregisterandvectoredinterruptsarenotimplementedthesrsctlregisterisalwaysreadas zeroes and srsmap is not implemented furthermore the rdpgpr and wrpgpr instructions simply move the contents of one gpr to another within the executing contexts gpr register set 2112 hazard barrier instructions the release 2 instructions ehb jalrhb jrhb and synci are implemented by the lx4580 cpu to eliminate execution and instruction hazards as described in the release 2 architecturechapter 2 mips32 implementation specifics 20 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20022113 field rotate shufﬂe instructions thefollowingrelease2instructionsareimplementedasrequireditisworthnotingthataprogrammingnote in the release 2 specification indicates how the wsbh instruction can be used to swap endianness ext extract bit field ins insert bit field rotr rotate right rotrv rotate right variable seb signextend byte to word seh signextend halfword to word wsbh word swap bytes within halfwords 2114 user access to hardware registers therelease2instructionrdhwrreadhardwareregisterisimplementedasrequiredthecp0register hwrenaisalsoimplementedasrequiredtoconditionallyenableausermodeprogramtoreadoneormore of the defined registers the values that are supplied when the rdhwr instruction is executed if the relevant register is enabled for reading are shown in table8 2115 cp0 register changes all of the changes and additions to cp0 registers that are associated with the release 2 architecture are reflected in table2 standard cp0 registers beyond the changes and additions associated with release 2 features that are described in other sections of this document few more cp0 register changes are included in the lx4580 cpu to be compliant with the release 2 architecture in particular the config config2 and config3 have few more fields defined since the config2 and config3 fields all refer to features that are not supported in the lx4580 cpu these registers are not implemented the optional watchhi register has some fields added but since the lx4580 does not implement the watch registers these are not implemented the perfcnt control registers have wbit added which only applies to mips64 implementations and so is always 0 on the lx4580 cputable 8 hardware register values number name hmt implementation speciﬁc information 0 cpunum 4 same as cp0 ebasecpunum 1 synci_step 1 64 2 cc 1 same as cp0 count register 3 ccres 1 12116 64bit coprocessor fpu stream processor lexra inc proprietary confidential 21 rev 21 august 1 2002 do not copy2116 64bit coprocessor fpu since the lx4580 does not support any coprocessors the release 2 changes to support 64bit coprocessors and in particular 64bit fpu are not implemented the instructions associated with this release 2 feature will all take coprocessor unusable exceptions as required 2117 1kb pages therelease2architectureextendsthepagemaskregisterbyapairofbitsandseveralothercp0registersare extendedormodifiedif1kbpagesaretobesupportedalsoif1kbpagesaretobesupportedapagegrain register is required the lx4580 cpu does not support the 1kb page feature therefore the pagegrain register is not implemented and the changed formats of other registers are not implemented the extra two bits of pagemask are hard coded to 211 as seems to be requiredchapter 2 mips32 implementation specifics 22 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 23 rev 21 august 1 2002 do not copychapter 3 reset rst 31 reset overview comprehensive reset strategy provides reliable initialization of the stream processor the stream processor employs locally sampled reset strategy synchronous resets registered at the block level the reset strategy ensures the following complete initialization of the stream processor by the assertion of one external pin resetdebugbyejtagallcpuscanbeplacedinastatewherebytheywillallreceivea debug exception when reset and will fetch their reset vector from ejtag probe space reset of flipflops in multiple clock domains for this reason reset must remain asserted until it is registered in each domain in the design duetothesynchronousnatureofresetsallclocksmustberunningwhenresetisasserted this includes external interface clocks when reset is asserted all blocklevel signals must go to an inert state eg for bus the arbiter must have grant deasserted during resets this allows blocks in different clock domains to come out of reset at different times two external reset pins are provided for power up and debug reset there is software register test and set register in uncacheable space which is used to determine which processor will be the boot masterfigure 3 reset overviewcreset_nblock x clk block clkblock x not cpu block not cpu reset_d1_yr_nreset_d1_xr_n reset_nreset_n clk clk jtag_rst_ncpu reset_d1_r_n clk cpuclkejtag sysclkreset_nprbenrst_d1_r_n all other logicchapter 3 reset rst 24 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200232 reset distribution the reset system is distributed across the design each block or cpu will contain reset flipflop which samples the chiplevel reset in its clock domain the output of the reset flipflop is fed to all the flipflops in that block 33 reset operation typical multiple cpu coldboot sequence would be as follows 1 creset_n is asserted 2 creset_n is deasserted 3 all cpus start executing identical software from the reset vector 4 all cpus read the test and set register 5 duetothenatureofthetestandsetregisteronlyonecpuwillreaditaszerothiscpuwill become the boot master 6 thebootmasterwillinitializethemultiplecpuenvironmentandthestreamprocessorperiph erals the other cpus that did not read zero from the reset register will be executing soft ware loops 7 when the boot master has ﬁnished the initialization of the stream processor it sends interpro cessor interrupts to each of the other cpus the other cpus will start to execute the appropri ate interrupt handler after which they operate normally typical multiple cpu ejtag boot sequence would be as follows 1 creset_n is asserted 2 creset_n is deasserted 3 theejtagprobeisconnectedtoeachprocessorinturnsettingtheprobeenbitineachcpus ejtag control register 4 the probe then asserts jtag_rst_n this resets everything in the stream processor apart from the ejtag probeen ﬂop 5 jtag_rst_nisdeassertedandallcpusjumptothedebugexceptionvectorat0xff200200 from where the system is under ejtag probe control34 reset registers stream processor lexra inc proprietary confidential 25 rev 21 august 1 2002 do not copy34 reset registers 341 testandset register tas name testandset register tas size 32 bits address tbd uncached sw init none restrictions none 35 reset external sp1 interfaces internal use the tas register is implemented in the system control logic the register description should be moved to that section and crossreference included here31 0 tas reserved field bits description rw reset tas 31 after read this ﬁeld changes to 1 writes load the register with value writtenrw 0 table 9 reset external interface signal name direction description creset_n input cold reset jtag_rst_n input connection from the ejtag probechapter 3 reset rst 26 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 27 rev 21 august 1 2002 do not copychapter 4 interrupts int 41 interrupt overview the stream processor provides variety of interrupt mechanisms to allow cpu contexts to be efficiently signalling by external sources integrated devices and other cpu contexts the following types of interrupts are supported 6 edge sensitive interrupts from integrated devices 16 edge sensitive cross interrupts from cpu context to cpu context 4 level sensitive external interrupts 1 level sensitive hardware error interrupt cpu context can be directly interrupted by crossbar message from an integrated device or via crossbar message or interrupt line from the interrupt reflector and router irr the edge sensitive device and cross interrupts use crossbar message to route an interrupt request from the interrupt source to single cpu context the contents of the cpus xbi and cp0 registers determine how the interrupts are honored by the target thelevelsensitiveexternalanderrorinterruptsaregloballydistributedthroughoutthestreamprocessorand can be observed by any number of cpu contexts according to the contents of the cp0 registers the external interrupts are globally maskable via register within the irr software can observe pending interrupts by polling registers within the lx4580 cpu and throughout the stream processor even when the interrupt is disabled through the corresponding mask registerfigure 4 system view of interruptcpu xbar interrupt reflector xbar devices router external interruptsstream processor external interruptsmessage interrupts mask hardware error interruptorcross interrupt requestschapter 4 interrupts int 28 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200242 interrupt architecture the interrupt architecture details are shown in figure5 421 external interrupts externalinterruptsarepassedthroughtheirrwheretheycanbegloballymaskedtheresultisthenpassed to all cpus the interrupts are synchronized at the cpu boundary the output of the synchronizer is the source of the readonly levelsensitive interrupt pending flags in the xbi ext_intpend register see section8712 the mask from the xbi ext_intmask register is anded with the interrupt pending flags see section8713 the result is reduction ored and determines the state of the ip6 bit in the cp0 status register 422 device interrupt messages devices interrupt cpu context via the interrupt request in crossbar message at the cpus crossbar interface the message is converted to one of six edge sensitive device interrupt events the device interrupt events are captured in the xbi dev_intpend register see section8710 the mask bits from the xbi dev_intmaskregisterareandedwiththedeviceinterruptflagsindev_intpendseesection8711the result is reduction ored and determines the state of the ip3 bit in the cp0 status register when device interrupt event is captured in the dev_intpend register the cpu sends an interrupt acknowledge reply ina crossbar message to the device that requested the interrupt 423 cpu cross interrupt messages software maysend aninterrupt toany contexton anycpu byexecuting anuncached storeword instruction that specifies the address of the interrupt reflector irr the contents of the word being stored identify thefigure 5 interrupt architecturencpu crossbar irrxbar devices external interruptsstream processor external interrupts 4 4masks 44cpuintmasks pend 4masks 4deviceint16 masks pend8 syncip6ip3ip2write bufferuncached store crossbar interface 816 error conditionssyncip4hardware error interrupt424 hardware error interrupt stream processor lexra inc proprietary confidential 29 rev 21 august 1 2002 do not copycpu context which is the target of the interrupt the store word instruction generates write word ww crossbar message to the irr the irr in turn interrupts the target cpu context by sending crossbar interrupt request in message to the cpu at the target cpus crossbar interface the message is converted to one of sixteen edge sensitive cross interrupt events the interrupt events are captured in the xbi cpux_intpend register see section878 the mask bits from the xbi cpux_intmask register are anded with the device interrupt flagsincpux_intpendseesection879theresultisreductionoredanddeterminesthestateoftheip2 bit in the cp0 status register when cross interrupt event is captured in the cpux_intpend register the target cpu sends an interrupt acknowledgementreplyinacrossbarmessagetotheinterruptreflectorwhichinturnsendsawritesub line acknowledgement reply wsa crossbar message to the cpu that originally requested the interrupt therefore software that sends cross interrupt can use the sync instruction to verify that the interrupt is pending at the target 424 hardware error interrupt hardwareerrorssuchasansramparityerroraredetectedthroughoutthestreamprocessorasdescribedin chapter17 each module supplies an error interrupt signal that is asserted when an error condition has been detected within the module and the generation of an interrupt for that error is enabled when one or more of the modulespecific error signals transitions high priority encoded value representing the error is captured intheirr_moduleerrorcaptureregisterandanerrorflaginthisregisterisalsosetthisflagdeterminesthe state of the ip4 in the cp0 status registers of all cpus see section433 for more details on the irr_moduleerrorcapture register 43 interrupt registers 431 irr external interrupt master mask register irr_eimm name external interrupt master mask register irr_eimm size 4 bits address irr_base tbd restrictions none 314 30 reserved ximm field bits description rw reset xmim 30 interrupt line enabled if set bit 0 masks int0 etc rw 0chapter 4 interrupts int 30 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002432 irr cpu cross interrupt register irr_cci name intercpu interrupt register irr_cci size 32 bits address irr_base tbd restrictions none 314 30 reserved tgtid field bits description rw reset tgtid 30 cpu gtid of interrupt target w 0433 module error capture stream processor lexra inc proprietary confidential 31 rev 21 august 1 2002 do not copy433 module error capture name irr_moduleerrorcapture size 32 bits address irr_base tbd sw init none restrictions none 31 30 294 30 err multierr 0 errmodule field bits description rw reset err 31 indicates an error condition has been captured 0 error condition has been captured 1 an error condition has been captured in errmodule to clear the contents of this register software writes zerotothisregisterﬁeldthisshouldbedoneaftereach individual modules error registers have been interro gatedandclearedifanerrorconditionremainspending when zero is written to this ﬁeld the error condition is resampled and captured in this registerrw 0 multierr 30 indicates multiple error conditions are present 0 multiple error conditions have not been detected 1 multiple error conditions have been detected the module that reported the ﬁrst error condition is indi cated in the errmodule ﬁeldr 0 errmodule 30 encoded value representing the ﬁrst module that reportsanerrorviaitserr_intoutputvalidonlyifthe err ﬁeld is 1 0 memory subsystem 0 1 not used 2 memory subsystem 1 3 not used 4 cpu 0 5 cpu 1 6 cpu 2 7 cpu 3 8 device 0 9 device 1 10 device 2 11 device 3 12 device 4 13 device 5 14 device 6 15 device 7 if more than one module signals an error in the same system clock cycle the lowest numbered module that signals an error is reportedr 0chapter 4 interrupts int 32 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200244 interrupt external sp1 interfaces table 10 interrupt external interface signal name direction description int0_n input external interrupt line 0 active low int1_n input external interrupt line 1 active low int2_n input external interrupt line 2 active low int3_n input external interrupt line 3 active lowstream processor lexra inc proprietary confidential 33 rev 21 august 1 2002 do not copychapter 5 address space 51 address space overview the stream processors address space defines the location of sdram controllers and external devices within the stream processors 64 gbyte 36bit address physical address range applications can limit the physical address space to 4 gbytes for hardware and software that employ 32bit physical addressing all devices and memory that are attached to the crossbar are globally accessible from all processors two spaces are defined to support boot such as rom and control accesses such as ejtag dma controllers and configuration registers these spaces have fixed size and location additionalspacesmayalsobedefinedforaccesstoexternaldevicesthatareattachedtothestreamprocessor through its pcix and generic io gio interfaces figure6 illustrates the domains of logical and physical addressing within the stream processor the stream processors address space provides the following characteristics 36bit physical addresses for total of 64 gbytes of addressable resources optionally constrained to 32bit physical address subset sdram address space kseg1 boot space kseg0kseg1 control space for integrated controllers configuration and status ejtag debug mode space dmseg drseg external address spaces for access to resources through pcix and gio error detection for access outside of defined address spacesfigure 6 address space overviewmmucpu core dma controllersl1 caches dma controllerxb if 101001000 ethernet physpci busmemory subsystem l2 cache coherency sdram ifsdram crossbar xb peripheral interfacei2clogical addressesphysical addresses pci bridge macs serial gio memory tomemory dmachapter 5 address space 34 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200252 address space size thestreamprocessorsupportsa36bitphysicaladdressspace64gbyteswithinastreamprocessorcpu the mmu translates 32bit logical addresses into 36bit physical addresses prior to referencing the cpus internal caches or resources outside of the cpu applications need not take advantage of the 36bit physical address capability all of the stream processor internal resources such as configuration registers and integrated devices are located at fixed addresses that fall within the low 4 gbytes of the address space applicationspecific resources such as sdram and devicesattachedtothestreamprocessorspcixinterfacecanalsobelocatedwithinthelow4gbytesofthe address space 53 physical address space decoding figure7 shows how the stream processors physical address space is decoded certain spaces are fixed and have the highest priority in the decode logic other spaces are configurable and are decoded in the priority order shown address spaces may overlap space with higher priority of decode may create hole in lower priority decoded spaces see section87 for description of the address space configuration registers which apply to steps 25 of the diagram figure 7 address space decodingfixed spaces fffffffff 0ff400000open 0ff3fffff 0ff200000ejtag 0ff1fffff 020000000open 01fffffff 01fc00000boot 01fbfffff 01f800000control 01f7fffff 000000000openpcix region b up to 64 gb within the 64 gbphysicaladdressspacegeneric io region upto4gbwithinthe64gb physical address space pcix region up to 64 gb within the 64 gbphysicaladdressspace sdram up to 8 gb starting at physical address 0 signal address errorreachable via kseg0 and kseg12 3 4 5 6154 boot space stream processor lexra inc proprietary confidential 35 rev 21 august 1 2002 do not copy54 boot space the boot space is located at 160_1fc0_0000 through 160_1fff_ ffff the bev flag of the cpus status registerissetto1byaresetwhichcausesallcpuexceptionvectorsexceptejtagtobemappedwithinthe boot space generic io user device 0 is dedicated to the boot space and is automatically configured by reset to communicate with rom attached to the stream processors gio interface see section143 when cpu is brought out of reset it begins fetching instructions from the logical kseg1 address 16bfc0_0000 which corresponds to physical address 160_1fc0_0000 the operating system startup software that runs from the boot space typically configures the sdram memory space after the operating system has copied the appropriate program code to low memory the operating system may clear the bev flag in the cp0 status register this causes some of the exception vectors to be mapped to locations starting at logical address 168000_0200 which corresponds to physical address 160_0000_0200 55 control space thecontrolspaceislocatedat160_1f80_0000through160_1fbf_ffffandthereforeisaccessiblebyacpu via the unmapped and uncached kseg1 segment software accesses integrated devices through this space to configure the device and to directly interact with the device mostofthestreamprocessorsintegrateddevicesareassigneda64kbytesubspacewithincontrolspaceas defined in table11 some devices with smaller address space requirements share 64 kbyte control space the definition of resources within the 64 kbyte space is specific to the device the operating system may employ the mmu to enforce device access privileges to user mode application code with an mmu page size of 4 kbytes access can be given to 16 distinct subsets of given devices functions for example the head and tail window registers of dma controllers queues are located in separate4kbytepagefromotherdmacontrolregistersallsuchmmupagesshouldspecifytheuncached access type table 11 control space organization control spacesymbol address range descriptionsee section mac0 mac0_base 160_1f80_0000 to 160_1f80_ffffethernetmacinterface0conﬁgura tion status and dma registers1015 114 mac1 mac1_base 160_1f81_0000 to 160_1f81_ffffethernetmacinterface1conﬁgura tion status and dma registers1015 114 mac2 mac2_base 160_1f82_0000 to 160_1f82_ffffethernetmacinterface0conﬁgura tion status and dma registers1015 114 pci pci_base 160_1f83_0000 to 160_1f83_ffffpcix bridge conﬁguration status and dma registers1015 126 mm mm_base 160_1f84_0000 to 160_1f84_ffffmemory to memory dma 1015 xi xi_base 160_1f85_0000 to 160_1f85_ffffcross interrupt functions 132 st0 st0_base 160_1f85_2000 to 160_1f85_3fffsystem timer 0 133chapter 5 address space 36 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200256 ejtag space indebugmodetheejtagspaceisreservedforejtagwhentheejtagprobeisenabledthecpudetects any accesses to ejtag space and redirects the transaction to the ejtag hardware when the probe is disabled the decoding of ejtag reserved space is disabled any transaction that would have targeted the ejtagspaceinthissituationwillbedirectedtoanotherportionoftheaddressspaceaccordingtothedecode priority shown in figure7 it is strongly recommended that applications not use the ejtag space for any reason even when debug probe is disabled or is not present 57 generic io space one generic io gio space may be configured through the xbi control registers see section87 all accesseswithinthisspacearedirectedtothesp1sgiointerfacefurtherdecodingwithintheinterfacecan differentiate addresses for up to four separate devices see chapter14 58 pcix space two pcix spaces may be configured through the xbi control registers see section87 typically one of the spaces is used to access uncacheable control registers within the pcix bridge or on the pcix bus and the other space is used to access large cacheable memories see chapter12 59 sdram space the top of sdram space is configured through the xbi control registers see section87 the sdram spaceisaccessiblefromallcpucontextsstartingatthephysicaladdress0andendingattheconfiguredtop of sdram depending on the size of sdram context may access all or part of sdram through the kseg0 and kseg1 logical address ranges the special purpose gio control and ejtag spaces may overlap with the sdram space in this case the special spaces take priority and sdram located at these addresses is not accessiblest1 st1_base 160_1f85_4000 to 160_1f85_5fffsystem timer 1 133 i2c i2c_base 160_1f85_6000 to 160_1f85_7fffi2c controller 134 uart uart_base 160_1f85_8000 to 160_1f85_9fffserial port controller 136 gioc gioc_base 160_1f85_a000 to 160_1f85_bfffgeneric io conﬁguration registers 147 as as_base 160_1f88_0000 to 160_1f88_ffffaddress space conﬁguration 87 ms ms_base 160_1f89_0000 to 160_1f89_ffffmemory subsystem conﬁguration and status913 914 915table 11 control space organization continued control spacesymbol address range descriptionsee section510 address space configuration registers stream processor lexra inc proprietary confidential 37 rev 21 august 1 2002 do not copy510 address space conﬁguration registers the address space configuration registers are implemented within each cpu crossbar interface and are described in section87 511 error detection the stream processor fully decodes the address of all access made by the cpus and dma controllers all illegal addresses result in bus error condition being signaled to the originator see chapter17 error detection and reportingchapter 5 address space 38 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 39 rev 21 august 1 2002 do not copychapter 6 crossbar xb 61 crossbar overview the crossbar xb provides the onchip interconnect that allows the stream processors lx4580 cpus dma controllers memory and io devices to communicate with each other crossbar transfers are initiated as result of events such as cache miss or the execution of an uncached load or store instruction since stream processor software does not interact directly with the crossbar the material in this chapter is provided to allow users to optionally gain greater understanding of how the stream processor functions the crossbar supports the following types of operations operates at the sp1s system clock speed 12 the cpu clock speed high bandwidth interfaces transfer 64 bits per cycle full duplex distributed queuing to reduce headofline blocking word and subword read and write transfers 1 2 3 or 4byte line read and write transfers 64byte coherency signalling error signalling interrupt messages for processortoprocessor and devicetoprocessor signallingfigure 8 overview of crossbarcpu 4 miigmii with dma 3 memory move dmapcix with dmacrossbar xbmemory subsystem 2 l2 cache coherency sdram if system controlstream processorchapter 6 crossbar xb 40 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200262 crossbar architecture the organization of the crossbar is shown in figure9 each crossbar subblock includes muxes arbitration logic and queues the details of these structures are discussed in section64 table12 lists the agents that are attached to the crossbarfigure 9 crossbar architecture table 12 crossbar agents agent description p03 4 processors with l1 caches d02 3 101001000 ethernet mac and dma engine d3 1 pcix masterslave bridge and dma engine d4 1 memory to memory dma engine d5 1 crossinterrupt reﬂector 1 timers 1 i2c interface 1 uart 1 generic inputoutput gio conﬁguration registers d6 1 generic inputoutput gio interface d7 1 pcix external bus target m01 2 memory subsystem ms with coherency engine l2 cache and sdram controllers4x4 cpus 4 5x3mac with dma 3memory subsystems 2 pcix with dma mem move dmamux and fanoutcrossbar agent64bit full duplex connection uarti2c 1x5timercross int generic iocrossbar subblock63 crossbar messages stream processor lexra inc proprietary confidential 41 rev 21 august 1 2002 do not copy63 crossbar messages the crossbar provides pointtopoint messaging protocol an agentconnected to the crossbar may operate asaninitiatorasatargetorbothaninitiatorsendsamessagetoaspecifictargetwhichinturnmayactas an initiator by sending one or more new messages as shown in figure10 tables 13 through 16 summarize the crossbar messages types complete transaction requires one or more crossbar messages the originator of the transaction sends the first message of transaction typically requestmessage the target sends request reply to the originator to complete the transaction the memory subsystems coherency engine may send one or more inquiries to cpus before completing before transaction in this case the cpus send an inquiry reply back to the coherency enginefigure 10 crossbar messages table 13 eastbound request messages type encoding sourcedestinationpossible repliesmessage lengthmeaning cpu initiated line reads rl 00 0000 cpu ms dls dle 1 read line cpu gio dle rle 01 0000 cpu ms dls dle 2 read line with eviction rlm 00 0001 cpu ms dlm 1 read line with intent to modify cpu gio dlm cpu pci dlm rlme 01 0001 cpu ms dlm 2 read line with intent to modify and eviction um 00 0010 cpu ms uma dlm 1 upgrade line to modiﬁed cpu gio uma cpu pci uma ve 00 0011 cpu ms none beat 2 of rle or rlmeeviction address beatxb targetinitiator targetinitiator westbound messageeastbound messagechapter 6 crossbar xb 42 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002cpu initiated line writes including cpu cache instruction wli 00 0100 cpu ms gio pci none 1 write line mark invalid wls 00 0101 cpu ms gio pci none 1 write line mark shared li 00 0110 cpu ms gio pci none 1 invalidate line dma and pci initiated line reads and writes rln 00 0111 dma pci ms dl 1 read line with l2 allocation wln 10 0111 dma pci ms wla 9 write line with l2 allocation cpu dma and pci initiated subline reads and writes rb 00 1000 cpu dma pci ms ds 1 read byte cpu d06 pci ds pci d56 ds rh 00 1001 cpu dma pci ms ds 1 read halfword cpu d06 pci ds pci d56 ds rt00 1010 cpu ms pci ds 1 read tribyte rw 00 1011 cpu dma pci ms ds 1 read word cpu d06 pci ds pci d56 ds wb 01 1000 cpu dma pci ms wsa 2 write byte cpu d06 pci wsa pci d56 wsa wh 01 1001 cpu dma pci ms wsa 2 write halfword cpu d06 p ci wsa pci d56 wsa wt 01 1010 cpu ms pci wsa 2 write tribyte ww 01 1011 cpu dma pci ms wsa 2 write word cpu d06 pci wsa pci d56 wsatable 13 eastbound request messages continued type encoding sourcedestinationpossible repliesmessage lengthmeaning63 crossbar messages stream processor lexra inc proprietary confidential 43 rev 21 august 1 2002 do not copytable 14 westbound reqreply messages type encoding sourcedestinationmessage lengthmeaning dl 10 0000 ms dma pci 9 read line data cache dls 10 0001 ms cpu 9 read line data install s dle 10 0010 ms gio cpu 9 read line data install dlm 10 0011 ms cpu 9 read line data install m ds 01 0000 ms cpu 2 read subline data uma 00 0000 ms gio cpu 1 upgrade ack wla 00 0001 ms gio dma pci 1 line write ack wsa 00 0010 ms cpu dma 1 subline write ack d06 cpu d56 pci be 00 0011 1 bus error bad address or size table 15 westbound inquiry messages type encodingsource destinationpossible repliesmessage lengthcpu actions ii 11 0000 ms cpu ia 1 invalidate line eviction iie 11 0001 ms cpu ia iea1 invalidate line if m evict ide 11 0010 ms cpu ia iea1 if downgrade to s if m downgrade to i and evict ire 11 0011 ms cpu ira 1 if due to wls downgrade to s else downgrade to i purge from evict buffer in 11 0100 d05 cpu ina 1 request interruptchapter 6 crossbar xb 44 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002631 single beat message format 632 rle rlme request message format 633 ds wb wh wt ww message format data must be presented in its natural byte lane 634 dl wln iea ira message formattable 16 eastbound inqreply messages type encodingsource destinationmessage lengthmeaning ia 110 000 cpu ms 1 inquiry ack iea 111 000 cpu ms 9 inquiry weviction ack ira 111 001 cpu ms 9 inquiry wreplacement eviction ack ina 110 001 cpu d05 1 request interrupt ack message header message header eviction address message header data message header header addressa forthesemessagestheloworder6bitsof the header address must be zerodata beat 0 header address 0x8 data beat 1 header address 0x10 data beat 2 header address 0x18 data beat 3 header address 0x20 data beat 4 header address 0x28 data beat 5 header address 0x30 data beat 6 header address 0x38 data beat 7635 message header eviction address beat format stream processor lexra inc proprietary confidential 45 rev 21 august 1 2002 do not copy635 message header eviction address beat format 6 63582 575636 552010 19104 966 50 unused way addr westagent eastagent type type message type see section 63 includes class and size eastbound 00 xxxx 1 beat request message 01 xxxx 2 beat request message 10 xxxx 9 beat request message 110 xxx 1 beat inqreply message 111 xxx 9 beat inqreply message westbound 00 xxxx 1 beat reqreply message 01 xxxx 2 beat reqreply message 10 xxxx 9 beat reqreply message 11 xxxx 1 beat inquiry message eastagent east side message agent 0000 memory subsystem 0 controller 0001 memory subsystem 0 sdram 0010 memory subsystem 1 controller 0011 memory subsystem 1 sdram 01xx reserved 1000 device 0 1001 device 1 1010 device 2 1011 device 3 1100 device 4 1101 device 5 1110 device 6 1111 device 7 westagent west side message agent 00xxxxxxxx cpui i cache 01xxxxxxxx cpud d cache 10xxxxxxxx cpue ejtag 11xxxxxxxx dma data path wagent74 cpudma number wagent30 context number addr memory address for cmd for line operations dl wln iea and ira the low order six bits of the address must be zero forinterruptrequestsinthataresourcedbytheinterruptreﬂectorbit24 of the message header is 1 and bits 2320 of the header indicate which bit to set in the west agents cp0 extendedip1 register for interrupt requests from any other source bits 2420 of the message header are 0 see section423 way encoded way of l1 tag operation for use in duplicate l1 tag update required with cpu rl rle rlm rlme um and li requestschapter 6 crossbar xb 46 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002636 data beat format 637 error detection and reporting initiators are responsible for detecting address errors that arise if 36bit system address does not decode to an xb target the method of signaling this error within the initiator is initiatordefined targets may also detect addressrelated errors as result of finegrained decoding of the 36bit system addressperformedbythetargettheseerrorsarereportedtotheoriginalinitiatorwithanerrormessagethe target of such message ie the initiator that caused the error processes the error using targetspecific mechanism 64 crossbar operation 641 clocking the xb operates in the system clock domain agents that operate at other speeds are responsible for frequency matching 642 initiatortarget relationships the internal structure of the crossbar is optimized based on the characteristics of the attached agents and the typesofmessagesthatmustbesupportedbetweenagentpairstable17summarizesthebasicmessagetypes possible for all valid initiatortarget pairs in reference to figure9 an eastbound message is one that is sourcedfromtherightsideofaninitiatora westbound messageisonethatissourcedfromtheleftsideofan initiator6356 5548 4740 3932 3124 2316 158 70 byte 0 byte 1 byte 2 byte 3 byte 4 byte 5 byte 6 byte 7 table 17 initiatortarget relationships initiator target direction message sizes bytes p03 d04 d7 m01 eastbound 8 16 72 p03 d05 eastbound 8 16 p03 d67 eastbound 8 16 72 d7 d56 eastbound 8 16 72 m01 p03 d04 d7 westbound 8 16 72 d05 p03 westbound 8 16 d67 p03 westbound 8 16 72 d56 d7 westbound 8 16 72643 crossbar transfer networks stream processor lexra inc proprietary confidential 47 rev 21 august 1 2002 do not copy643 crossbar transfer networks figure 11 eastbound crossbar network figure 12 westbound crossbar network4x4m01 d07 m01 d07m01 d07m01 d07m0 d56d04 d7m1 p2 p3p1p0 5x3m01 m01 m0 m1d1d0muxm0 m1m0 m1 d0 d1 m01 m01 d56 d3 d7d2d2 d3 d7 m01 d4d4fan outagent64bit connection targets queue d5 d6 d5 d6 d04 d7d56crossbar subblock 4x4p0 p3p2p1p03 p03p03p03 p2 p3p1p0 5x3p03 p03 d04 d7 d04 d7d1d0fan outp03 d04 d7 p03 d04 d7m0 m1 d0 d1 p03 p03 d3 d7d2d2 d3 d7 p03 d4d4muxp03 d7 p03d7d5 d6agent64bit connection targets queuecrossbar subblockchapter 6 crossbar xb 48 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200265 crossbar internal sp1 interfaces 651 initiator and target message interfaces initiators connect to the xb through separate initiator and target message interfaces table 18 initiator message interface signal direction description imsgval from initiator asserted if message beat present on imsgdata imsgstart from initiator assertedﬁrstmessagebeatispresentonimsgdata not valid if imsgval is not asserted imsgrdy to initiator asserted if xb accepts the current message beat imsgdata630 from initiator message beat contents table 19 target message interface signal direction description tmsgval to target asserted if message beat present on tmsgdata tmsgstart to target asserted if ﬁrst message beat present on tmsgdata not valid if tmsgval is not asserted tmsgrdy from target asserted if target accepts the current message beat tmsgdata630 to target message beat contents652 initiator and target protocols stream processor lexra inc proprietary confidential 49 rev 21 august 1 2002 do not copy652 initiator and target protocols theprotocolisdescribedintermsofaninitiatorinterfacehoweverthesamestatementsholdtrueforatarget interface with the agent and crossbar relationships exchanged the general characteristics of message transfer are illustrated in figure13 before starting to transmit message the initiator should be able to source message beats without any delay of consecutive data beats the initiator must be able to source all message beats without any dependency on the completion of other currently pending internal or external activity in cycle 1 the initiator attempts to start transmitting message by asserting imsgstart and imsgval and sourcing the first message beat on imsgdata the first message beat contains information used by the xbs internal arbiter the xb indicates readiness to accept beat in any cycle by asserting imsgrdy if the initiator samples imsgrdy asserted at the end of any cycle during which the initiator is driving imsgval the initiator should present new message beat if any in the next cycle this process continues until all message beats are transferred after the last beat of message are transferred new message may start in the next cycle the xb employs pipelined arbitration but does not expose the details of arbitration to the initiator the xb may assert imsgrdy when imsgval is not asserted the protocol prevents the need for any initiator output signals to depend on any of its input signals to accomplish this the xb includes limited amount of input buffering for each initiator interfacefigure 13 message transfer protocolclk imsgval imsgstart imsgrdy imsgdata630 1 23456789 d0148chapter 6 crossbar xb 50 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 51 rev 21 august 1 2002 do not copychapter 7 lx4580 cpu 71 lx4580 cpu overview sp1includesfourlx4580cpuseachofwhichprovidesfourindependenthardwarecontextsthischapter describes the cpus caches the lx4580 cpu includes the following features 500 mhz operation 7stage pipeline supports release 2 mips32 instruction set four hardware contexts with finegrained hardware multithreading hmt 64 kbyte 4way set associative instruction cache 16 kbyte 4way set associative data cache data coherency using mesi algorithm performance counters figure 14 lx4580 cpu and crossbar interfacerequests and request repliesdata reqrepdata cache controller instruction cache controllercrossbar interfacesram 16 kb data store and tags ralu 4 x register file cp0 4 x control regsmmu 4 x tlblx4580 cpu core sram 64 kb inst store and tagsmux inst busdata bus inst reqrepinquiries requests and inquiry replies ejtagejtag reqreplx4580 cpuchapter 7 lx4580 cpu 52 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200272 lx4580 cpu core the lx4580 cpu core implements the full release 2 mips32 instruction set as described in chapter2 the major blocks of the cpu core are the register file and alu ralu control processor cp0 and memorymanagementunitmmuarchitecturallyvisibleregistersintheseblocksarereplicatedtoprovide separate copy for each of the cpu contexts 73 instruction cache thelx4580cpuincludesa64kbyte4waysetassociativeinstructioncachethatoperatesattheprocessor clock speed the instruction cache is organized in 64byte lines with valid and invalid states table20describestheactionsthataretakenbythecpuforthedifferentpossibleoutcomesofareferenceto the instruction cache this table is from the perspective of the cpu only and does not indicate additional chiplevel coherency interactions that can take place within sp1 complete description of these interactions is given in chapter9 the tag column indicates the possible outcomes of the instruction caches tag compare logic for tag comparehitthecurrentstateindicatesthestateofthecachelinethatisreferencedforatagcomparemiss the current state indicates the state that the cache line that is selected for replacement the new state is the state of the cache line after the transaction is completed the crossbar request column indicates the type of message that the cpu initiates over the crossbar to complete the transaction 74 data cache the lx4580 cpu includes a16 kbyte 4wayset associativedata cache that operates atthe processor clock speed data in the cache is organized in 64byte lines and is held in one of four states corresponding the mesi modified exclusive shared invalid cache coherency algorithm table21describestheactionsthataretakenwithinthecpuforthedifferentpossibleoutcomesofareference to the data cache this table is from the perspective of the cpu only and does not indicate additional chip level coherency interactions that can take place within sp1 complete description of these interactions is given in chapter9 thetagcolumnindicatesthepossibleoutcomesofthedatacachestagcomparelogicforatagcomparehit the current state indicates the state of the cache line that is referenced for tag compare miss the current state indicates the state that the cache line that is selected for replacement the new state is the state of the cache line after the transaction is completed when data is returned from the crossbar the request replytable 20 instruction cache transactions command tagcurrent statenew state crossbar request fetch cached x i v rl fetch cached hit v v none fetch cached miss v v rl fetch uncached x x unchanged rw75 cache line replacement algorithm stream processor lexra inc proprietary confidential 53 rev 21 august 1 2002 do not copyindicates whether the data should be installed in the shared or exclusive states the crossbar request column indicates the type of message that the cpu initiates over the crossbar to complete the transaction 75 cache line replacement algorithm whenanewlinemustbebroughtintotheinstructioncacheordatacacheitmaybenecessarytoevictaline thatiscurrentlyheldthecachesusea2bitmostrecentlyfilledmrffieldtoimplementthereplacement algorithmthisvalueisstoredasanextratwobitsintag0ramandisupdatedanytimefilldataisreturned to the cache on fill the stored mrf value indicates which way is currently being filled so at any point in time this value represents the most recently filled linetable 21 data cache transactions command tagcurrent statenew state crossbar request rd cached x i s or rl rd cached hit s s none rd cached miss s s or rl rd cached hit none rd cached miss s or rl rd cached hit m m none rd cached miss m s or rle rd uncached x i i rb rh rt or rw rd uncached hit s m i rb rh rt or rwa beforereadingdatafrommainmemorythesp1coherencyengineperforms an inquiry to the cpu cache to invalidate or evict the data from the cacherd uncached miss s m unchanged rb rh rt or rw wr cached x i m rlm wr cached hit s m um wr cached miss s m rlm wr cached hit m none wr cached miss m rlm wr cached hit m m none wr cached miss m m rlme wr uncached x i i wb wh wt or ww wr uncached hit s m i wb wh wt or wwb b beforewritingdatatomainmemorythesp1coherencyengineperformsan inquiry to the cpu cache to invalidate or evict the data from the cachewr uncached miss s m unchanged wb wh wt or wwchapter 7 lx4580 cpu 54 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002whenacacheneedstoallocatealocationforanewlineitfirstexaminesthevalidbitsofall4waysifanyof the 4 ways are invalid the smallest number way 03 that is invalid is selected if all 4 ways are valid the way equal to mrf 1 mod 4 is selected within the data cache lines may be locked using the load linked ll instruction when one thread executes an ll that line is locked until store conditional sc instruction is executed or some other operationbreaksthelockseesection221ifalineislockeditcannotbereplacedifthealgorithmabove selectsalinethatislockedthealgorithmwillincrementthewayby1way1mod4andchoosethatway if that way is also locked the algorithm increments again until it finds way that does not have locked line 76 cpu error handling to be suppliedtable 22 cache line replacement algorithm tag state mrf way selected way 0 invalid xx way 0 way 0 valid way 1 invalid xx way 1 way 01 valid way 2 invalid xx way 2 way 012 valid way 3 invalid xx way 3 way 03 valid 00 way 1 way 03 valid 01 way 2 way 03 valid 10 way 3 way 03 valid 11 way 0stream processor lexra inc proprietary confidential 55 rev 21 august 1 2002 do not copychapter 8 cpu crossbar interface xbi 81 cpu crossbar interface overview each of sp1s lx4580 cpu is connected to the crossbar with dedicated crossbar interface xbi the interface includes the following features split transaction interface between the cpu and crossbar processes interrupt messages in received from the crossbar processes error messages be received from the crossbar system address space configuration registers dedicated transaction fifos matches cpu frequency 500 mhz with crossbar frequency 250 mhz cbus interface to be used for requests and request replies ibus interface to be used for inquiries and inquiry replies the organization of the cpu crossbar interface is shown in figure15 this interface serves as the filter of incoming and outgoing messages westbound inquiries and request replies are examined and redirected to the appropriate internal cpu bus ibus or cbus some messages such as the interrupt message or error messages are consumed by the interface and not retransmitted on the ibus nor cbus instead those messages are converted to an interrupt or exception signal for the cpufigure 15 cpu crossbar interface architecturecbus interface requests requests address space config registersrequest replies ibus interfaceinquiries request replies inquiry replies inquiry repliesinquiry reply fifoinquiriescbus ibusrequest fifo inquiry request reply fifocpu crossbar interface lx4580 cpu and level 1 cachescrossbar controlcontrol controlcrossbar clock domain cpu clock domainchapter 8 cpu crossbar interface xbi 56 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002eastbound requests and inquiry replies are examined to determine the destination device for the message the destination could also be the configuration registers within the crossbar interface 82 cbus interface the cbus is simple signalling layer between the cpu and ejtag instruction cache and data cache the cbushandlescrossbarrequestsandrequestrepliestheprotocolsupportsasinglecyclerequestandasingle or multibeat request replies 83 ibus interface theibusisacrossbarstyleinterfacebetweenthecpuanddatacachetheibushandlescrossbarinquiries and inquiry replies this bus is separate from the cbus to ensure requests and request replies do not block inquiries and inquiry replies 84 request fifo the request fifo receives only single and dual beat messages the request fifo contains four 4 beats thisallows2dualbeatmessagesor4singlebeatmessagestobebufferedinsidethexbithereisadditional buffering locally in each cache 85 inquiry request reply fifo the inquiry request reply fifo receives two types of traffic from the crossbar request replies from crossbar devices can vary in size from single beat to full nine beat cache line entire line read replies are loaded into the fifo before the reply is sent to the cache the inquiry request reply fifo contains ten 10 beats of buffering this allows an entire line and two beats of other transactions to be buffered in the xbi 86 inquiry reply fifo the inquiry reply fifo accepts single beat or nine beat messages the data is taken from the data caches eviction buffers to help free the line immediately the xbi contains nine 9 beat inquiry reply fifo 87 system address space conﬁguration registers cbus requests may target address space configuration registers within the crossbar interface to configure the system address space these registers identify the valid physical address spaces within the sp1 and determine where in the physical memory map different crossbar devices are placed for each configurable space there is mask and base value bits from request address are anded with the mask and logically compared to the base value if equal the indicated address space is selected the exception to this is the sdram address space configuration which does not have base value the base for sdram is always zero871 as_drammask register stream processor lexra inc proprietary confidential 57 rev 21 august 1 2002 do not copy871 as_drammask register name as_drammask size 32 bits address as_base 0x0000 sw init must be set during system configuration restrictions must be set to the same value for all cpus 872 as_pciabase register name as_pciabase size 32 bits address as_base 0x0010 sw init must be set this during system configuration restrictions must be set to the same value for all cpus3112 110 0 drammask field bits description rw reset 0 3112 reserved and must be 0 r 0 drammask 110 mask for address bits 3524 these bits are used to declare the actual size of addressable sdram the sdram space begins at physical address 0x0_0000_0000 the initial state speciﬁes 32mb sdram regionrw 0xfff 3124 230 0 pciabase field bits description rw reset 0 3124 reserved and must be 0 r 0 pciabase 230 bits 3512 of the base of physical address space ser viced by components attached to the stream proces sor pcix bridge region arw 0chapter 8 cpu crossbar interface xbi 58 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002873 as_pciamask register name as_pciamask size 32 bits address as_base 0x0014 sw init must be set this during system configuration restrictions must be set to the same value for all cpus 874 as_pcibbase register name as_pcibbase size 32 bits address as_base 0x0018 sw init must be set this during system configuration restrictions must be set to the same value for all cpus31 3024 230 pciaen 0 pciamask field bits description rw reset pciaen 31 when set declares that pci region is enabled and accessestotheregionaresteeredtothepcidevice when clear this region is disabledrw 0 0 3024 reserved and must be 0 r 0 pciamask 230 mask for address bits 3524 of the pcix address space this mask will specify the size of the window for pcix bridge region arw 0 3124 230 0 pcibbase field bits description rw reset 0 3124 reserved and must be 0 r 0 pcibbase 230 bits 3512 of the base of physical address space ser viced by components attached to the stream proces sor pcix bridge region brw 0875 as_pcibmask register stream processor lexra inc proprietary confidential 59 rev 21 august 1 2002 do not copy875 as_pcibmask register name as_pcibmask size 32 bits address as_base 0x001c sw init must be set this during system configuration restrictions must be set to the same value for all cpus 876 as_giobase register name as_giobase size 32 bits address as_base 0x0020 sw init must be set this during system configuration restrictions must be set to the same value for all cpus31 3024 230 pciben 0 pcibmask field bits description rw reset pciben 31 when set declares that pci region b is enabled and accessestotheregionaresteeredtothepcidevice when clear this region is disabledrw 0 0 3024 reserved and must be 0 r 0 pcibmask 230 mask for address bits 3524 of the pcix address space this mask will specify the size of the window for pcix bridge region brw 0 3124 230 0 giobase field bits description rw reset 0 3124 reserved and must be 0 r 0 giobase 230 bits 3512 of the base of physical address space ser viced by components attached to giorw 0chapter 8 cpu crossbar interface xbi 60 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002877 as_giomask register name as_giomask size 32 bits address as_base 0x0024 sw init must be set this during system configuration restrictions must be set to the same value for all cpus 878 cpux_intpend register name cpux_intpend size 32 bits address as_base 0x0100 context 0x08 sw init none restrictions write value is used to clear bits31 3024 230 gioen 0 giomask field bits description rw reset gioen 31 when set declares that the gio region is enabled and accesses to the region are steered to the gio device when clear this region is disabledrw 0 0 3024 reserved and must be 0 r 0 giomask 230 mask for address bits 3524 of the gio address spacethismaskspeciﬁesthesizeofthewindowfor giorw 0 3116 150 0 cpux_intpend field bits description rw reset 0 3116 reserved and must be 0 r 0 cpux_intpend 150 cpucrossinterruptpendingbitsforthegivencontext these bits are set when cpu crossinterrupt mes sageisreceivedfromtheinterruptreﬂectorindividual bits are cleared when written with 1 bits are untouched when written with 0rw 0879 cpux_intmask register stream processor lexra inc proprietary confidential 61 rev 21 august 1 2002 do not copy879 cpux_intmask register name cpux_intmask size 32 bits address as_base 0x0104 context 0x08 sw init none restrictions none 8710 dev_intpend register name dev_intpend size 32 bits address as_base 0x0200 context 0x08 sw init none restrictions write value is used to clear bits3116 150 0 cpux_intmask field bits description rw reset 0 3116 reserved and must be 0 r 0 cpux_intmask 150 cpu crossinterrupt mask bits for the given context they are logically anded with the cpux_intpend bits to determine if the context has received an inter ruptrw 0 318 70 0 dev_intpend field bits description rw reset 0 318 reserved and must be 0 r 0 dev_intpend 70 device interrupt pending bits for the given context thesebitsaresetwhenadeviceinterruptmessageis receivedindividualbitsareclearedwhenwrittenwith 1 bits are untouched when written with 0rw 0chapter 8 cpu crossbar interface xbi 62 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20028711 dev_intmask register name dev_intmask size 32 bits address as_base 0x0204 context 0x08 sw init none restrictions none 8712 ext_intpend register name ext_intpend size 32 bits address as_base 0x0300 context 0x08 sw init none restrictions none318 70 0 dev_intmask field bits description rw reset 0 318 reserved and must be 0 r 0 dev_intmask 70 deviceinterruptmaskbitsforthegivencontextthey are logically anded with the dev_intpend bits to determine if the context has received an interruptrw 0 314 30 0 ext_intpend field bits description rw reset 0 314 reserved and must be 0 r 0 ext_intpend 30 external interrupt pending bits for the given context these bits are set when an external interrupt is received the interrupt is cleared by accessing the interrupt reﬂectorr 08713 ext_intmask register stream processor lexra inc proprietary confidential 63 rev 21 august 1 2002 do not copy8713 ext_intmask register name ext_intmask size 32 bits address as_base 0x0304 context 0x08 sw init none restrictions none 314 30 0 ext_intmask field bits description rw reset 0 314 reserved and must be 0 r 0 ext_intmask 30 external interrupt mask bits for the given context thesebitsarelogicallyandedwiththeext_intpend bits to determine the interruptrw 0chapter 8 cpu crossbar interface xbi 64 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the remainder of this chapter is for internal lexra use 88 cbus interface 881 cbus request interface table 23 cbus request internal interface signal name direction description cbus_yreqo output cbus request cbus_yaddro350 output physical address for request cbus_ydatao 310 output data for request cbus_ycmdo 30 output cbus request command cbus_yszo 10 output size of data for request cbus_ysrco 20 output source of request cbus_ydwayo10 output data cache way l1 duplicate tag update cbus_yltido 10 output thread id of request cbus_ybusyi input crossbar busy882 cbus command encoding stream processor lexra inc proprietary confidential 65 rev 21 august 1 2002 do not copy882 cbus command encoding 883 rle rlme eviction address theevictionaddressfortherleandrlmerequestsistransferredthroughthecbus_ydataolinetothe cpu crossbar interface since physical addresses are 36bits and the cbus_ydatao line is 32bits wide the entire address cannot be transferred the assumption is made that the eviction address is linealigned therefore only 30bits are needed to transfer the address the format of the address is as followstable 24 cbus commands crossbar request messagecbus_ycmdo30 cbus_yszo10 rl 1001 na rlm 1101 na rle 1011 na rlme 1111 na rb 1000 00 rh 1000 01 rt 1000 10 rw 1000 11 um 0101 na wli 0011 na wls 0111 na li 0001 na wb 0000 00 wh 0000 01 wt 0000 10 ww 0000 11 3130 296 50 0 address tag address indexchapter 8 cpu crossbar interface xbi 66 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002884 cbus request reply interface 885 cbus request reply destination encodingtable 25 cbus request reply internal interface signal name direction description cbus_ydesti20 input destination for reply data cbus_ylstei20 input line state and transaction reply type cbus_yrdltidi10 input thread id for reply cbus_ydatai630 input reply data cbus_ydbusyo output data cache busy table 26 cbus destination encoding cbus_ydesti20 description 000 idle cycle valid data 100 ejtag reply 010 data cache reply 001 instruction cache reply table 27 cbus line state and transaction encoding cbus_ylstei20 description 000 uncached subline read 001 cached shared line read 010 cached exclusive line read 011 cached modiﬁed line read 100 subline write ack 101 reserved 110 reserved 111 upgrade line to modiﬁed state89 ibus interface stream processor lexra inc proprietary confidential 67 rev 21 august 1 2002 do not copy89 ibus interface 891 inquiry interface 892 ibus command encoding 893 inquiry reply interface 894 ibus header encoding the header of an ibus reply transfer is equivalent to the crossbar header format the only ibus replies supportedareiaieaandirathedatacachewillleavetheheaderuntouchedfromtheinquiryexceptfor the message type field refer to section635 for detailed description of the crossbar header formattable 28 ibus request internal interface signal name direction description ibus_reqi input inquiry request ibus_cmdi10 input inquiry request command ibus_chei10 input coherency engine of inquiry request ibus_tidi30 input tid field of inquiry request ibus_addri350 input address of inquiry request ibus_dbusyo output data cache busy table 29 ibus commands crossbar request messageibus_cmdi10 description ii 00 line invalidation iie 01 evict line and invalidate ide 10 downgrade line state ire 11 replacement eviction table 30 ibus reply internal interface signal name direction description ibus_rdyo output inquiry reply ready ibus_starto output inquiry reply header data valid ibus_hdrdatao640 output inquiry reply header data bus ibus_xbusyi input crossbar interface busychapter 8 cpu crossbar interface xbi 68 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002810 interrupt interface table 31 interrupt interface signal name direction description ext_intreq30 input active high external interrupt global_int input active high hardware error interruptstream processor lexra inc proprietary confidential 69 rev 21 august 1 2002 do not copychapter 9 memory subsystem ms 91 memory subsystem overview thememorysubsystemms isusedbythestreamprocessortomanagememoryrequests itprovidesal2 cache and maintains coherency between main memory and all caches in the stream processor this coherency support allows use of software applications that do not have knowledge of the hardware architecture themajorcomponentsofthemsarethecoherencyenginechecachetagsandl2cachetherearetwo memory subsystems within sp1 which are interleaved on cache line boundaries there are also two memorycontrollersmcspersp1dependingonrequiredmemorydepthandbandwidthoneortwomcs may be enabled memory interconnect network is provided to connect the mss to the mcs thetotalavailablel2cachesizeis64kb upto8gbexternalmemoryand51gbsmemorybandwidthare supported by the stream processor figure 16 memory subsystem blocksduplcate l1 tags and l2 tags che l2 cache 32 kb crossbar interfaces ms 1ms 0memory controller mc 0 memory controller mc 1msmc intercon nect ddr sdramddr sdramstream processor external memorychapter 9 memory subsystem ms 70 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200292 memory subsystem requirements each of the two memory subsystems provides the following features memory controller interface each mc services 1 or 2 mss through the ecc protected memory interface to pc2100 133 mhz ddr sdram dimms interface to 200 mhz ddr sdram components 32 mb minimum sdramcontroller using 3 128mb components 4 gb maximum sdramcontroller using 2 2gb dimms 25v sstl_2 compatible io up to 26 gbs sdram bandwidth l2 cache 32kb onchip shared l2 cachesubsystem 4way set associative parity protected 32 gbs l2 cache bandwidth parity protected onchip cache tags che hardwareenforced coherency between main memory and all caches 32 gbs crossbar interface at 250 mhz handles 50m transactionss 64 byte line size l2 cache management and control writethrough protocol pseudolru replacement supports cpu l1 caches using mesi protocol automatic initialization of cache tags bist for onchip memory arrays including tags and l2 cache error management for coherency and data errors performance monitor for message types and miss rates 921 transaction rate and bandwidth the crossbar interface to each memory subsystem provides 32 gbs of bandwidth assuming that each transaction uses 10 crossbar beats one beat request message and nine beat reqreply message the maximum transaction rate is determined as follows 32 gbs transaction rate 10 beatstransaction 64 bitsbeat transaction rate 50m transactionss93 supported memory configurations stream processor lexra inc proprietary confidential 71 rev 21 august 1 2002 do not copy93 supported memory conﬁgurations one or two memory controllers are supported per stream processor the available memory bandwidth and memorydepthvarywiththenumberofmemorycontrollerswhenusingdimmmemorythememoryclock ratedaterateislimitedto133mhz266mhzconfigurationsusingdimmmemoryareshownintable32 table 32 memory conﬁgurations wdimms when using component memory the memory clock ratedate rate can reach 200 mhz 400 mhz these rates require careful board layout and routing and may not be achievable with the larger component quantities configurations using component memory are shown in tables 33 34 and 35 table 33 memory conﬁgurations w 128 mb components table 34 memory conﬁgurations w 256 mb components table 35 memory conﬁgurations w 512 mb componentsnumber of mcmemory bandwidthtotal memory size dimm quantity 128 mb dimm256 mb dimm512 mb dimm1 gb dimm2 gb dimm 1 17 gbs 128 mb 1 256 mb 1 512 mb 1 1gb1 2gb1 2 34 gbs 256 mb 2 512 mb 4512 mb 2 1 gb 41 gb 2 2 gb 42gb2 4gb44gb2 8gb4 number of mcmemory bandwidthtotalmemorysize componentquantity 128 mb 16 mb x 8128 mb 8 mb x 16128 mb 4 mb x 32 1 26 gbs 128 mb 9 64 mb 5 32 mb 3 2 51 gbs 256 mb 18 128 mb 10 64 mb 6 number of mcmemory bandwidthtotalmemorysize componentquantity 256 mb 32 mb x 8256 mb 16 mb x 16256 mb 8 mb x 32 1 26 gbs 256 mb 9 128 mb 5 64 mb 3 2 51 gbs 512 mb 18 256 mb 10 128 mb 6 number of mcmemory bandwidthtotal memory size component quantity 512 mb 64 mb x 8512 mb 32 mb x 16 1 26 gbs 512 mb 9 256 mb 5 2 51 gbs 1gb 18 512 mb 10chapter 9 memory subsystem ms 72 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200294 messages and transactions the stream processor utilizes the coherency engine che to ensure that the l1 caches l2 caches and memory are coherent each memory subsystem has it own che and l2 cache crossbardataaregroupedin messageswhichare12or964bitbeatslong thefirstbeatofeverymessage contains message header this header identifies the message and specifies what action to perform crossbar messages in the stream processor directed towards che are called eastbound messages messages coming from che are westbound messages crossbar messages are grouped in the following message classes request eastbound message from dma engine or cpu for memory or device operation reqreply westbound message in reply to an eastbound request may contain acknowledgement and data inquiry westbound message from che to cpu the inquiry is used to alter l1 cache state and may initiate an eviction inqreply eastbound message in reply to westbound inquiry may contain acknowledgement and data eastboundrequestandinqreplymessagesclasseshaveseparatecrossbarqueuesthatallowthemessagesto pass each other this is done because an inqreply may be needed to complete pending request westbound inquiry and reqreply message classes share the same crossbar queue certain request messages spawn sequence of other messages the sequence of messages required to coherently complete request message is called transaction che is responsible for managing the sequence of messages in transaction che may perform l2 cache andor memory accesses in order to complete transaction transaction consists of the following messages one eastbound request zero or more westbound inquiry messages requests with their associated eastbound inqreply messages onewestboundreqreplymessageinreplytotheoriginalrequest reqreplymessages are not provided for cpu cacheop or l1 eviction requests before the reqreply message is sent all inquiryinqreply message pairs required to maintain coherency mustcomplete thecpumustprioritizeinquirymessagestopreventstallsatthememorysubsystem when all inqreply messages are returned to che the following events occur the l2 tags and duplicate l1 tags are updated the reqreply message is returned chemaintainsapipelineofrequestmessagesinvariousstagesofcompletion thispipelineisorganizedso that the transaction rate requirement is met 95 memory ordering and interleave the stream processor two independent interleaved memory subsystems therefore it is possible return reqreply messages in different order than the initiating requests occurred96 l2 cache stream processor lexra inc proprietary confidential 73 rev 21 august 1 2002 do not copyto maintain strong memory ordering an individual cpu thread has only one outstanding read and one outstanding write request at time dma engine may have multiple requests outstanding and manages completion at higher level memory subsystems are interleaved on cache line boundaries message address bit a6 determines the relationship between cache line and memory subsystem messages are directed to the appropriate memory subsystem when they enter the crossbar message address bit a6 has constant value when it reaches the memory subsystem and is ignored 96 l2 cache each memory subsystem has 32 kb 4way set associative l2 cache the cache uses writethrough protocolwithcachestatesasdefinedintable36thereplacementalgorithmispseudolruthecacheline size is 64 bytes l2 cache tag updates occur when che sends reqreply message indicating transaction completion table 36 l2 cache states 97 duplicate l1 tags che maintains duplicates of the l1 data cache dcache tags for each cpu these tags are required because the l2 cache does not maintain inclusion with the l1 caches in addition the duplicate tags act as filter to prevent directing unnecessary inquiries to cpus duplicate l1 cache states are defined in table37 che does not track the state of the icache the duplicate tags are updated by che based on the outcome of transaction in the cases when request messageleadstoanupdateoftheduplicatel1tagtherequestmessageheadercontainsthel1wayselected for update duplicate l1 tag updates occur when che sends reqreply message indicating transaction completion in some cases there may be differences between the l1 tags and the duplicate l1 tags these cases are the cpu writes to line that was originally exclusive the l1 tag becomes modified while the duplicate l1 tag remains exclusive the cpu executes cache index store tag instruction the l1 tag is updated but the duplicate l1 tag is not unless otherwise noted references to the l1 cache in this document refer to the l1 dcache table 37 duplicate l1 cache statesstate abbreviation meaning invalid i not in cache shared s valid in cache state abbreviation meaning invalid i not in cache shared s unmodiﬁed in this cache and possibly others exclusive unmodiﬁed in this cache modiﬁed m modiﬁed in this cachechapter 9 memory subsystem ms 74 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200298 coherency protocol overview che is responsible for maintaining coherency between the l1 caches l2 cache and memory in the stream processor the unit of coherency is cache line che does not maintain inclusion between the l1 and l2 caches this means that line in an l1 cache is not required to be in the l2 cache coherency must be maintained when an l1 cache has been updated modified but other caches and memory have not they are stale for example when cpu c0 holds modified line and cpu c1 attemptstoreadthatlinethelineisstaleinmemory cheissuesaninquirymessagetorequestthatc0evict the line and returns it to c1 the l2 cache does not hold modified lines and so always contains the same information as memory modified l1 lines are writtenthrough to memory the l2 cache is allocated only for data line reads when the requested line is exclusive or shared in some l1 cache thel2cacheisintendedtoholddatasharedbetweencpus alineentersthesharedstatewhenitisreadby morethanonecpu howeveramodifiedlinedoesnotenterthesharedstate insteaditisreturnedonlyto the requesting cpu if line is marked exclusive in the duplicate l1 tag it is possible that the same line may be stale in the l2 cache and memory this occurs because the cpu can modify the line without external notification thecoherencyprotocolisdefinedinthetransactionstablessection917thetablesshowwhatactionsand messages result from all combinations of request message types and tag lookups 99 cacheability and coherence ifarequestis cacheable thetargetlinemaybeallocatedinthel2cacheifarequestis coherentcachesl1 andl2andmainmemoryareleftinastatesuchthatitispossibletodeterminewherefreshandstalecopies of the target line reside the relationship between requests and these attributes are shown in table38 table 38 request attributes if noncacheable request hits valid line in l2 cache the data in that cache is used to fulfill the request noncacheable requests never lead to allocation of the l2 cache ifasublineordmarequesthitsavalidlineinal1cachethatlineisinvalidated ifthelineismodifiedit is evicted certain cacheable requests do not lead to allocation of the l2 cache if there is performance advantage in doing sorequest agent and type l2 cacheable coherent cpu dcache line request yes yesa acertaincpuaddressregionsarenotcoherentrequestsfortheseregionsnever target the mscpu icache line request yes cpu icache dcache or ejtag or dma subline requestsno yes dma read line requests allocation yes dma write line requests allocation yes910 inquiry messages stream processor lexra inc proprietary confidential 75 rev 21 august 1 2002 do not copy910 inquiry messages inquirymessagesaresenttol1datacachesasaresultofrequestmessagesthatrequirel1dataorchangesin l1 state che determines that an l1 data cache inquiry is required from the request type and duplicate l1 tags l1 inquiries should never be received by cpu for line that is not valid inquiries always lead to state change in the target l1 cache line if the line is modified it is evicted from the l1 cache threetypesofinquiriesareinitiatedbyche whenanevictionresultstheevictedlinemovesfromthecpu to che as part of an inqreply message 1 unsolicited inquiry for valid line ii iie or ide inquiry trigger request where the requested line is valid in cpus l1 cache inquiry expected by cpu unsolicited inquiry inquiry address source 1st beat of request message tag lookup requirements determine if inquiry is required and target inquirytargetidentifiedbyduplicatel1taglookup iftherequestisnoncacheable orfromtheicachetheinquirytargetmaybethesamecpuastherequestsource 2 expected inquiry due to read with replacement eviction ire when the cpu requests line it is possible that the line being replaced is modiﬁed the request message indicates in the request type that l1 eviction is required in these cases che performs two tag lookups when servicing the request the ﬁrst lookup uses the address of the line being read and the second lookup uses the address of the evicted line tag consis tency checks are performed on both tag lookups ifareplacementevictionisrequiredchesendsareplacementinquiryiretotherequesting cpu replacement inquiries differ from other inquiries in that che does not wait for the inqreply before sending the reqreply for the original request this can occur because the evicted line is not required to complete the coherency operations for the requested line in anticipation of the inquiry the cpu stores the evicted line in an eviction buffer this frees space in the l1 cache for the requested line inquiry trigger rle or rlme request inquiry expected by cpu yes inquiry address source 2nd beat of request message tag lookup requirements determine if inquiry still required inquiry target request originator 3 expectedinquiryduetothecpucacheinstructionorindependentreplacementevictionire inquiry trigger wli or wls request inquiry expected by cpu yes inquiry address source 1st beat of request message tag lookup requirements determine if inquiry is still required inquiry target request originatorchapter 9 memory subsystem ms 76 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002911 l2 cache line replacement whenthel2cachelinemustbeallocatedasindicatedinthetransactiontable apseudolrupolicyisused to select the way for replacement if one or more invalid ways are available the lowest numbered invalid way is selected if all ways are valid the least recently or next to least recently used is selected thepseudolrualgorithmrequireathreebitfieldtostorestateinformation thisfieldisupdatedonalll2 cache accesses as follows if access to way 0 or 1 lru2 0 lru1 lru1 lru0 way else if access to way 2 or 3 lru2 1 lru1 way 2 lru0 lru0 the following algorithm is used to select way for replacement if one or more ways invalid way lowest numbered invalid way else if lru2 0 way lru1 2 else if lru2 1 way lru0 transaction table is included for l2 replacements when replacement occurs the new l2 state is based on the requesting transaction 912 coherency effects of crossbar queues when the cpu issues request message the message type is function of the cpu operation and the l1 cache state in certain cases the l1 cache state that led to particular request message may change before the request is serviced the xb provides queue that orders and serializes request messages from cpus and dma engines it is possibleforthequeuetocontainrequestsfromdifferentcpusthattargetthesamecacheline ifonecpus request leads to state change in second cpus l1 cache an inconsistency may exist when the second cpus request is subsequently processed the inconsistency appears as mismatch between the message typeandtheduplicatel1tags theseinconsistenciesandtherequiredactionsarereflectedinthetransaction tables inconsistencies of this type occur in cases where cpu issues requests involving lines that are valid this happens in the following cases912 coherency effects of crossbar queues stream processor lexra inc proprietary confidential 77 rev 21 august 1 2002 do not copy1whenacpuissuesanumrequestitintendstoupgradeal1linefromstom considerthissequence of events line l0 cpus c0 c1 l0 is s at c0 l1 is i at c1 c0 issues um for l0 c1 issues rlm for l0 che services c1 rlm for l0 l0 is i at c0 l0 is m at c1 che services c0 um for l0 l0 is m at c0 l0 is i at c1 cheassumesthatalthoughanumrequestfromc0forl0isreceived l0wasinvalidatedbyanothercpu this invalidation occurred between the time that the um request was issued and serviced as result che returns the target line to c0 2 when m state l1 line must be replaced to make room for new line the cpu indicates this in the request message consider this sequence of events lines l0 l1 cpus c0 c1 l0 is i at c0 l1 is i at c0 l0 is m at c1 l1 is i at c1 c0 issues rl for l0 c1 issues rle for l1 evicting l0 che services c0 rl for l0 l0 is at c0 l0 is i at c1 l1 is unchanged at c0 and c1 che services c1 rle for l1 evicting l0 l0 is unchanged at c0 and c1 l1 is unchanged at c0 l1 is at c1 che assumes that although rle request from c1 to evict l0 is received l0 was invalidated by another cpu as result che does not send an ire for l0 to c1chapter 9 memory subsystem ms 78 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002913 conﬁguration in the following sections n refers to the ms number 9131 msncfg register name msncfg size 32 bits address msbase 0x0 n0x40 restrictions modify only during system configuration must be set to the same value for all ms 9132 msnpld register name msnpld size 32 bits address msbase 0x100 n0x40 restrictions modify only during system configuration must be set to the same value for all ms3124 2316 156 54 32 1 0 branch0 branch1 tagnum reserved numcs nummc inittag field bits description rw reset branch0 3124 first character of branch ascii format r valid branch1 2316 second character of branch ascii format r valid tagnum 156 tag number r valid numcs 32 number of physical memory ranks chip selects 00 1 cs 01 2 cs 10 reserved 11 4 csrw 0 nummc 1 number of mcs to use 0 1 mc 1 2 mcrw 0 inittag 0 initialize the state of the l2 tags and l1 duplicate tags toinvalid thisbitisclearedautomaticallywhentagini tialization is completerw 0 3111 101 0 reserved memreqdly pld field bits description rw reset pld 0 implementation type 0 asic implementation 1 pld implementationrw 0 memreqdly 101 memory clocks that must elapse between memory requests in pld implementationsrw 09133 msnmemctl registers stream processor lexra inc proprietary confidential 79 rev 21 august 1 2002 do not copy9133 msnmemctl registers name msnmemctl size 16 bitsregister address msbase offset n0x40 restrictions modify only during system configuration must be set to the same value for all ms these registers reside within the denali memory controller refer to the denali databahn memory processor document for register details table 39 memory controller register offsets mc register offset msnmem_main 0x0200 msnmem_ctla 0x0202 msnmem_ctlb 0x0204 msnmem_ctlc 0x0206 msnmem_ctld 0x0208 msnmem_ctle 0x020a msnmem_ctlf 0x020c msnmem_ctlg 0x020e msnmem_ctlh 0x0210 msnmem_ctli 0x0212 msnmem_ctlj 0x0214 msnmem_ecc1 0x0216 msnmem_ecc2 0x0218 msnmem_ecc3 0x021a msnmem_ecc4 0x021c msnmem_ecc5 0x021e msnmem_ecc6 0x0220 msnmem_ecc7 0x0222 msnmem_ecc8 0x0224 msnmem_ecc9 0x0226 msnmem_ecc10 0x0228 msnmem_ecc11 0x022a msnmem_ecc12 0x022c msnmem_ecc13 0x022e msnmem_ecc14 0x0230 msnmem_ecc15 0x0232 msnmem_ecc16 0x0234 msnmem_ecc17 0x0236chapter 9 memory subsystem ms 80 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002914 performance counters there are two performance counters per ms the event counted by each counter may be independently selected in the msnpcntev registers the counters are enabled by writing to the msnpcnten register the localenablebitsarelocaltoeachmstheglobalbitsfromms0areandedwiththelocalbitsineachmsto form the counter enable signal the global bits in ms1 are unused 9141 msnpcnt0 msnpcnt1 register name msnpcnt0 msnpcnt1 size 32 bits address msbase 0x1000 n0x40 msbase 0x1100 n0x40 restrictions 9142 msnpcnten register name msnpcnten size 32 bits address msbase 0x1200 n0x40 restrictions global enables in ms 1 are unused310 count field bits description rw reset count 310 count value rw 0 314 3 2 1 0 reserved gblencnt1 gblencnt0 lclencnt1 lclencnt0 field bits description rw reset lclencnt0 0 local counter 0 enable rw 0 lclencnt1 1 local counter 1 enable rw 0 gblencnt0 2 global counter 0 enable only valid in ms0 rw 0 gblencnt1 3 global counter 1 enable only valid in ms0 rw 09143 msnpcntev0 msnpcntev1 register stream processor lexra inc proprietary confidential 81 rev 21 august 1 2002 do not copy9143 msnpcntev0 msnpcntev1 register name msnpcntev0 msnpcntev1 size 32 bits address msbase 0x1300 n0x40 msbase 0x1400 n0x40 restrictions some fields are mutually exclusive eg wr and rd can never occur 3129 2827 2625 2423 2221 2019 1817 1615 reserved inqsh inqmod inqexmod inqex inqevict up wr 1413 1211 109 87 65 43 21 0 rdevict rdintent rd l2hit size cpuagnt agnt mode field bits description rw reset mode 0 0 count clocks 1countrequestsmatchconditionsfromtheﬁeldsbelowareanded together to qualify thisrw 0 agnt 21 0x dont care 10 dma 11 cpurw 0 cpuagnt 43 0x dont care 10 icache 11 dcacherw 0 size 65 0x dont care 10 subline 11 linerw 0 l2hit 87 0x dont care 10 l2 miss 11 l2 hitrw 0 rd 109 0x dont care 10 not read 11 readrw 0 rdintent 1211 0x dont care 10 not read with intent to modify 11 read with intent to modifyrw 0 rdevict 1413 0x dont care 10 not read with replacement eviction 11 read with replacement evictionrw 0 wr 1615 0x dont care 10 not write 11 writerw 0 up 1817 0x dont care 10 not upgrade 11 upgraderw 0 inqevict 2019 0x dont care 10 inquiry for replacement eviction 11 inquiry for replacement evictionrw 0 inqex 2221 0x dont care 10 inquiry to exclusive line 11 inquiry to exclusive linerw 0 inqexmod 2423 0x dont care 10 inquiry to exclusive line that returns dirty data 11 inquiry to exclusive line that returns dirty datarw 0 inqmod 2625 0x dont care 10 inquiry to modiﬁed line 11 inquiry to modiﬁed linerw 0 inqsh 2827 0x dont care 10 inquiry to shared line 11 inquiry to shared linerw 0chapter 9 memory subsystem ms 82 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002915 error handling several types of errors are detected and reported in the ms when an enabled error condition occurs information on the type of the error and the associated message header is stored the cpu responsible for managingerrorsisinformedoftheerrorviaintpanic0orpanic1whenanenablederrorconditionnot related to data occurs inquiries and tag updates are inhibited in thecase of errors associated with data it is not possible to inhibit these actions the errors detected and possible actions are shown in table40 table 40 ms errors error type encoding descriptioninquiries and tag updatesheader type saved tagcons 0000 inconsistency between tags l1 m and l2 s one l1 and another l1 valid one l1 m and another l1 valid more than one l1 way valid more than one l2 way validno request typcons 0001 inconsistency between request type and l1 tag these cases are deﬁned in the transaction tablesno request adrcons 0010 inconsistency between request type and address line request to register address spaceno request agntcons 0011 inconsistency between request type and agent rln wln from cpu rl rle rlm rlme um from dmano request requn 0100 request message unexpected request iqrun 0101 inqreply message unexpected or of incorrect type inqreply reqbt 0110 incorrect number of beats in request message request iqrbt 0111 incorrect number of beats in inqreply message inqreply iqrto 1000 inqreply message timeout inquiry westo 1001 crossbar unavailable for westbound beat yesinquiry or reqreply tagpar 1010 tag parity error request l2datpar 1011 l2 data parity error yes reqreply uncorrecc 1100 uncorrectable memory ecc error yes reqreply correcc 1101 correctable memory ecc error yes reqreply9151 msnerren0 msnerren1 register stream processor lexra inc proprietary confidential 83 rev 21 august 1 2002 do not copy9151 msnerren0 msnerren1 register the action performed in response to each error type may be separately enabled in all cases the normal reqreply cycle is returned to the requesting cpu the msnerren register is used to enable error actions each error has three possible actions which are enabled by setting the enable to 1 name msnerren0 msnerren1 size 32 bits address msbase 0x2000 n0x40 msbase 0x2004 n0x40 restrictions modify only during system configuration must be set to the same value for all ms msnerren0 msnerren1 3124 230 reserved 3118 170 reserved field register bits rw reset tagconsen 0 20 rw 0 typconsen 0 53 rw 0 adrconsen 0 86 rw 0 agntconsen 0 119 rw 0 requnen 0 1412 rw 0 iqrunen 0 1715 rw 0 reqbten 0 2018 rw 0 iqrbten 0 2321 rw 0 iqrtoen 1 20 rw 0 westoen 1 53 rw 0 tagparen 1 86 rw 0 l2datparen 1 119 rw 0 uncorreccen 1 1412 rw 0 correccen 1 1715 rw 0 bit enable 0 panic0 1 panic1 2 err_intchapter 9 memory subsystem ms 84 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20029152 msnerrto register name msnerrto size 32 bits address msbase 0x2100 n0x40 restrictions modify only during system configuration must be set to the same value for all ms 9153 msnerrstat0 msnerrstat1 register when an error occurs the ms stores the error type and copy of the message header associated with the error this data is stored in the msnerrstat registers if only correctable ecc errors occur these registers hold information about the first correctable ecc error if any fatal errors occur these registers contain information about the first fatal error name msnerrstat0 msnerrstat1 size 32 bits address msbase 0x2200 n0x40 msbase 0x2204 n0x40 restrictions msnerrstat0 msnerrstat13116 158 70 reserved westoval iqrtoval field bits description rw reset westoval 158 bits 158 of timeout count on crossbar availability for westbound beatrw 0 iqrtoval 70 bits 158 of timeout count on receiving all expected inqreply messagesrw 0 6360 5932 error type message header 310 message header field bits description rw reset error type 6360 error type see table40 ms errors rw 0 message header590 message header see crossbar chapter for format rw 0916 interfaces stream processor lexra inc proprietary confidential 85 rev 21 august 1 2002 do not copy916 interfaces 9161 crossbar interface table 41 control interface table 42 eastbound request message interface table 43 eastbound inqreply message interface table 44 westbound message interfacesignal bits io description xb_clk 1 i crossbar clock xb_reset_n 1 i system reset signal bits io description req_vld 1 i message beat present on req_dat req_sta 1 i first message beat present on req_dat req_rdy 1 ms accepts current message beat req_dat630 64 i message beat contents signal bits io description iqr_vld 1 i message beat present on iqr_dat iqr_sta 1 i first message beat present on iqr_dat iqr_rdy 1 ms accepts current message beat iqr_dat630 64 i message beat contents signal bits io description wes_vld 1 i message beat present on wes_dat wes_sta 1 i first message beat present on wes_dat wes_rdy 1 ms accepts current message beat wes_dat630 64 i message beat contentschapter 9 memory subsystem ms 86 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20029162 interrupt interface table 45 interrupt interface 9163 sdram interface table 46 sdram interfacesignal bits io description ms_err_int_r 1 cpu interrupt ms_panic0_r 1 panic0 signal ms_panic1_r 1 panic1 signal signal bits io description mc_ras_n 1 row address strobe mc_cas_n 1 column address strobe mc_we_n 1 write enable mc_s_n30 4 chip select mc_ba10 2 bank address mc_a130 14 address mc_dq710 72 io data bus mc_dqs80 9 io data strobe mc_dqm80 9 data mask mc_cke 1 clock enable mc_memclk 1 i sdram clock917 che transactions stream processor lexra inc proprietary confidential 87 rev 21 august 1 2002 do not copy917 che transactions thefollowingtransaction tablesdefinethe actionsandnewstate forallpossiblecombinations ofrequests and current cache states the following notes apply to all tables valid states s m imply address match alll1statereferstoaggregatestateofallcpudcachesasreflectedintheduplicatel1 tags req l1state refers to state of requestors cpu dcache as reflected in the duplicate l1 tags other l1 state refers to aggregate state of all cpu dcaches other than the requestor as reflected in the duplicate l1 tags whenenabledtagconsortypeconserrorsoccurinquiriesandtagupdatesdonotoccur however the appropriate reqreply is always returned the reqreply when an error is enabled is the same as the reqreply when the error is disabledchapter 9 memory subsystem ms 88 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002note there is l1 dcache state change due to the reqreply message for icache requests dcache state changes occur only due to inquiry messageseastbound transaction requestcurrent state actionsnew state notes all l1l2all l1l2 rl icache i i data mem rqr dls to requestori i s i data mem rqr dls to requestors i i ide to l1 data mem rqr dls to requestors i if l1 returns modiﬁed data treat as m i iie to l1 data iqr mem rqr dls to requestori i i s data l2 rqr dls to requestori s s s data l2 rqr dls to requestors s s ide to l1 data l2 rqr dls to requestors s if l1 returns modiﬁed data treat as ms error dis abled m s tagcons error nc nc if error disabled iie to l1 data iqr l2 mem rqr dls to requestori s917 che transactions stream processor lexra inc proprietary confidential 89 rev 21 august 1 2002 do not copyeastbound transaction requestcurrent state actionsnew state notes req l1other l1l2req l1other l1l2 rl rlei i i data mem rqr dle to requestore i i i s i allocate l2 data mem l2 rqr dls to requestors s s i i ide to other allocate l2 data mem l2 rqr dls to requestors s s if other returns modiﬁed data treat as imi i m i iie to other data iqr mem rqr dle to requestore i i i i s data l2 rqr dle to requestore i s i s s data l2 rqr dls to requestors s s i s ide to other data l2 rqr dls to requestors s s if other returns modiﬁed data treat as ims error disabled i m s tagcons error nc nc nc if error disabled iie to other data iqr l2 mem rqr dle to requestore i schapter 9 memory subsystem ms 90 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002note cases where req l1 i on um occur due to invalidation by other cpu between the time the request is issued and serviced eastbound transaction requestcurrent state actionsnew state notes req l1other l1l2req l1other l1l2 rlm rlme umi i i data mem rqr dlm to requestorm i i i s i ii to other data mem rqr dlm to requestorm i i i i iie to other data mem rqr dlm to requestorm i i if other returns modiﬁed data treat as imi i m i iie to other data iqr rqr dlm to requestorm i i i i s data l2 rqr dlm to requestorm i i i s s ii to other data l2 rqr dlm to requestorm i i i s iie to other data l2 rqr dlm to requestorm i i if other returns modiﬁed data treat as ims error disabled i m s tagcons error nc nc nc if error disabled iie to other data iqr rqr dlm to requestorm i i eastbound transaction requestcurrent state actionsnew state notes req l1other l1l2req l1other l1l2 rl rle rlm rlmes m typcons error nc nc nc if error disabled treat as i in previous tables917 che transactions stream processor lexra inc proprietary confidential 91 rev 21 august 1 2002 do not copyeastbound transaction requestcurrent state actionsnew state notes req l1other l1l2req l1other l1l2 um s i i uma to requestor m i i s s i ii to other uma to requestorm i i s i tagcons error nc nc nc if error disabled treat as ssi s m i tagcons error nc nc nc if error disabled treat as ssi s i s uma to requestor m i i s s s ii to other uma to requestorm i i s s tagcons error nc nc nc if error disabled treat as sss s m s tagcons error nc nc nc if error disabled treat as sss m typcons error nc nc nc if error disabled treat as schapter 9 memory subsystem ms 92 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002notes address supplied with li is only tag index address match is not checked requested way is unconditionally invalidatedeastbound transaction requestcurrent state actionsnew state notes req l1other l1l2req l1other l1l2 ve wli wlsi i i none i i i i s i none i s i i i none i i i m i none i m i i i s none i i s i s s none i s s i s none i s i m s tagcons error nc nc nc if error disabled treat as iis s typcons error nc nc nc if error disabled treat as i m i i ire to requestor data iqr memi i i on wls new req l1 s msem i tagcons error nc nc nc if error disabled treat as emii i s ire to requestor data iqr l2 memi i s on wls new req l1 s m i s tagcons error nc nc nc if error disabled treat as eis msem s tagcons error nc nc nc if error disabled treat as eis eastbound transaction requestcurrent state actionsnew state notes req l1other l1l2req l1other l1l2 li none i nc nc917 che transactions stream processor lexra inc proprietary confidential 93 rev 21 august 1 2002 do not copyeastbound transaction requestcurrent state actionsnew state notes all l1l2all l1l2 rln i i data mem rqr dl to requestori i s i ii to l1 data mem rqr dl to requestori i i iie to l1 data mem rqr dl to requestori i if l1 returns modiﬁed data treat as m i iie to l1 data iqr mem rqr dl to requestori i i s data l2 rqr dl to requestori s s s ii to l1 data l2 rqr dl to requestori s s iie to l1 data l2 rqr dl to requestori s if l1 returns modiﬁed data treat as ms error dis abled m s tagcons error nc nc if error disabled iie to l1 data iqr l2 mem rqr dl to requestori schapter 9 memory subsystem ms 94 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002eastbound transaction requestcurrent state actionsnew state notes all l1l2all l1l2 wln i i data req mem wla to requestori i s i ii to l1 data req mem wla to requestori i i ii to l1 data req mem wla to requestori i m i ii to l1 data req mem wla to requestori i i s data req l2 mem wla to requestori s s s ii to l1 data req l2 mem wla to requestori s s ii to l1 data req l2 mem wla to requestori s m s tagcons error nc nc if error disabled ii to l1 data req l2 mem wla to requestori s917 che transactions stream processor lexra inc proprietary confidential 95 rev 21 august 1 2002 do not copyeastbound transaction requestcurrent state actionsnew state notes all l1l2all l1l2 rb rh rt rwi i data mem rqr ds to requestori i s i ii to l1 data mem rqr ds to requestori i i iie to l1 data mem rqr ds to requestori i if l1 returns modiﬁed data treat as m i iie to l1 data iqr mem data mem rqr ds to requestori i i s data l2 rqr ds to requestori s s s ii to l1 data l2 rqr ds to requestori s s iie to l1 data l2 rqr ds to requestori s if l1 returns modiﬁed data treat as ms error dis abled m s tagcons error nc nc if error disabled iie to l1 data iqr l2 mem data l2 rqr ds to requestori schapter 9 memory subsystem ms 96 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002eastbound transaction requestcurrent state actionsnew state notes all l1l2all l1l2 wb wh wt wwi i data req mem wsa to requestori i s i ii to l1 data req mem wsa to requestori i i iie to l1 data req mem wsa to requestori i if l1 returns modiﬁed data treat as m i iie to l1 data iqr mem data req mem wsa to requestori i i s data req mem wsa to requestori i s s ii to l1 data req mem wsa to requestori i s iie to l1 data req mem wsa to requestori i if l1 returns modiﬁed data treat as ms error dis abled m s tagcons error nc nc if error disabled iie to l1 data iqr mem data req mem wsa to requestori istream processor lexra inc proprietary confidential 97 rev 21 august 1 2002 do not copychapter 10 direct memory access dma 101 direct memory access overview the stream processor provides multiple direct memory access dma controllers for highspeed data transfer between the sdram and external interfaces and from sdram to sdram three ethernet dma controllers ethernet to sdram sdram to ethernet 1 gbps full duplex bandwidth for gigabit ethernet sustainable 64byte packet transfers programmable hashing to depth of 128 bytes to determine input queue assignment one pcix dma controller pcix to sdram sdram to pcix 2 gbps data bandwidth one memory move dma controller sdram to sdram transfer 10 gbps data bandwidth features common to all dma controllers 36bit physical address space memoryresident buffer descriptors and queues up to 1m entries each atomic enqueue and dequeue supports multiprocessor access to dma controller minimal use of interrupts performance counters checksum calculation figure17 shows the stream processors dma controllers representative dma pathways are shown figure 17 direct memory access system overviewcpus dmamac dmamem move crossbar4 dmamac streaming dmamemory to memory dma sdramstream processordmamac memory subsystempcix dmachapter 10 direct memory access dma 98 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the stream processors ethernet interfaces and pcix interface include dedicated dma controller depending on the nature of the interface each controller supports streaming or memory to memory data transfer mode the streaming mode transfers packet data between fifo and sdram the memory to memory mode transfers data from sdram to sdram or between sdram and memory on the pcix bus table47 indicates the bandwidths associated with each dma controller more detailed view of performance is given in section1014 102 addressing thedmacontrollersoperateinthestreamprocessors36bit physicaladdressspace64gbytessoftware typically employs the cpus mmu to translate addresses in the cpus 32bit logical address space to the stream processors 36bit physical address space these logical to physical mappings are not accessible to the dma controllers all pointers that are stored in dma data structures consist of physical addresses softwaremustperformlogicaltophysicaltranslationstoconstructdmadatastructuressoftwaremustalso ensure that dma data structures spanning more than one physical page frame occupy consecutive page frames in physical memory depending on the memory management and buffer allocation methods employed by software the buffer space addressable by dma may be limited to 2 gbytes or may be as large as 64 gbytes the 2 gbyte configuration allows the simplest memory management and buffer allocation scheme larger dma configurations require more software overhead for buffer management although the stream processor supports 64 gbyte physical address space the memory subsystem supports up to 8 gbytes of attached sdram thus ethernet mac dma and memory move dma operations are limited to the low 8 gbytes of the physical address space memory that is attached to the stream processor through pcix may increase total physical memory beyond 8 gbytes this additional memory is generally accessible by the processors and can also be accessed for dma through the stream processors pcix dma controllertable 47 dma capabilities interface modesdata bw gbps eth0_rx streaming 10 eth0_tx streaming 10 eth1_rx streaming 10 eth1_tx streaming 10 eth2_rx streaming 10 eth2_tx streaming 10 pcix streaming memory to memory 20 mm memory to memory 1001021 ethernet and pcix dma controller organization stream processor lexra inc proprietary confidential 99 rev 21 august 1 2002 do not copy1021 ethernet and pcix dma controller organization figure18 illustrates the structure of the stream processors ethernet and pcix dma controllers including the onchip ethernet mac the ethernet and pcix dma controllers are composed of the following modules ethernet mac or pcix bridge provides standard gmiimii or pcix interface converts the external data paths to internal 250 mhz data paths sources input data and requests output data the pcix bridge also supports transparent mastertarget access between the pcix bus and the crossbar input buffers obtains data from the macs input interface provides buffering input mapper parses the beginning of each packet up to 128 bytes and generates the input queue assignments passes all packet data and queue assignments to the dma engines crossbar processor interface and queue management provides interface functions between processors and the dma controller through the crossbar responds to uncached load and store instructions that are used to configure the dma controller monitor status and interact with the queue logic dma engines and crossbar memory interface accepts input packets and queue assignments from the input mapper and passes output packets to the output buffers performsmemoryreadsandwritesfordescriptorsandpacketdatathroughthecrossbar includes multiple parallel engines to maintain high concurrency output buffers provides buffering of transmit data supplies data requests to the output interface the ethernet and pcix dma controllers include programmable packet mapper that examines each input packet up to depth of 128 bytes to determine the id of input queue to which the packet is assigned typically the mapper is programmed to generate hash number from fields in the layer 3 and 4 headers to determine the input queue assignment alternatively the mapper can also be programmed to extract queue assignmentdirectlyfromthepacketorperformaroundrobinassignmentthemapperisdescribedinmore detail in sections 106figure 18 ethernet and pcix dma controller organizationoutput buffers dma engines and crossbar memory interfacedatacommands io interface ethernet mac or pcix bridgecrossbar interfacesexternal signalsinput buffersinput mappercrossbar command interfaceand q mgmtinput data output data transparent accesses pcix onlychapter 10 direct memory access dma 100 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the ethernet and pcix dma controllers provide five categories of queues 128 input pending queues 128 input completed queues 1 high priority output pending queue 1 low priority output pending queue 128 output completed queues the output pending queues are shared among all software threads the association of all other queues to software threads is under software control there may be onetoone mapping of queues to threads alternatively manytoone mapping allows the software to dynamically adjust the workload by changing the assignment of input queues to software threads the dma controller provides an efficient exclusive access mechanism for all queues that does not require software to resort to semaphores even when multiple threads are accessing the same queue figure19 illustrates the flow of ethernet and pcix dma transactions two basic alternatives are shown one involves software in the recycling of buffers from transmit to receive operations the other alternative allows the dma controller to directly recycle free buffers after transmit operation is successfully completed shown with dotted lines tosetupaninputoroutputdmaoperationsoftwareenqueuesabufferdescriptorintoapendingqueuethe dmacontrollerdequeuesdescriptorsfromthisqueueperformsatransferandenqueuesthedescriptorintoa completed queue the pcix dma controller can perform streaming and memorytomemory dma operations while the pcix interface itself is not inherently streaming the dma architecture include provisions for transfers to andfromfifolikedevicesonthepcixbusstaticaddressesmaybeusedforreadandwriteoperationson the pcix bus in contrast to incrementing the address as transfer progresses the mapper can be used to parse the headers of streaming pcix data to determine the transfer lengthfigure 19 ethernet and pcix dma flowinput dma output completed queuessoftware threads output dmasoftware buffer recycling protocol stacks memory readsoutput pending queuesinput completed queuesmemory writesinput pending queuesoutput datainput datahardware buffer recycling1022 memory move dma controller organization stream processor lexra inc proprietary confidential 101 rev 21 august 1 2002 do not copy1022 memory move dma controller organization figure20 illustrates the structure of the stream processors memory move mm dma controller the memory move dma controller is composed of the following modules crossbar processor interface and queue management provides interface functions between processors and the dma controller through the crossbar responds to uncached load and store instructions that are used to configure the dma controller monitor is status and interact with the queue logic dma engines and crossbar memory interface accepts queue information from the queue management logic performs memory reads and writes for descriptors and packet data through the crossbar includes multiple parallel engines to maintain concurrency in he mm dma controller data is transferred from sdram to sdram the memory to memory dma controller provides two categories of queues 16 transfer pending queues 16 transfer completed queues the association between queues and software threads is software defined figure21 illustrates the flow of memory move dma transactionsfigure 20 memory move dma controller organization figure 21 memory move dma flowdma engines and crossbar memory interfacedatacontrol crossbar interfacescrossbar command interface and q mgmt dmasoftware threadsbuffer recycling application code mm completed queuesmemory writesmm pending queuesmemory readschapter 10 direct memory access dma 102 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002to set up memory move dma transfer software enqueues buffer descriptor into pending queue the dmacontrollerdequeuesdescriptorsfromthisqueueperformsatransferandenqueuesthedescriptorintoa completed queue 103 queue conﬁguration the location and size of the dma controllers queues in main memory are specified with five sets of queue configuration registers corresponding to the four queue types all queues of type have the same characteristics which are governed by the configuration registers table48 summarizes the registers that configure queue type there are four such register sets in the dma controller the dma controller also maintains hardware registers specific to each individual queue which contain the state summarized in table49 these registers are not accessed by software during normal operation 104 queue operation software follows these steps to enqueue buffer descriptor 1 software executes an uncached load word instruction that targets memory mapped register within the dma controller see table 53 the dma controller returns the byte offset of newly allocated location in the queue the dma controller sets the high order bit bit 31 in the returned value if the queue is full in which case software should repeat step 1 the dma controller can be conﬁgured to also cause an interrupt for this condition 2 softwareaddsthebyteoffsettothelogicaladdressofthebaseofthequeuewhichitmaintains independentofthedmacontrollertheresultisabytepointertoa64byteregioninmemory that is 64byte aligned the valid ﬂag in word 0 is currently zero indicating that the descrip tor is currently invalidtable 48 queue conﬁguration registers name size bits description flags control and status information tbd startptr 30 address of start of queue high order 30 bits of 36bit pointer ie 64byte aligned size 20 number of queue entries highcount 20 high water entry count lowcount 20 low water entry count table 49 perqueue state registers name size bits description flags control and status information tbd enqptr 20 current enqueue offset deqptr 20 current dequeue offset entrycount 20 current number of allocated entries104 queue operation stream processor lexra inc proprietary confidential 103 rev 21 august 1 2002 do not copy3 software writes the required descriptor words described in section 105 the last write must be to the word that holds the descriptors valid ﬂag set to 1 to ensure mutual exclusion with dma controllers access to the queue after software sets the valid ﬂag in the descriptor it is available for use by the dma controller software must not read or write the descriptor after the valid ﬂag has been set up to 64 consecutive queue descriptors can be allocated with single load word instruction in step 1 the dma controller provides 64 target addresses for the load word operation in step 1 corresponding to allocation requests from 1 to 64 entries the dma controller reserves the appropriate number of queue entriesbeforereturningthequeueoffsetvaluethehighorderbitissetappropriatelytoindicatetheoutcome of the allocation attempt when valid offset is obtained software must perform steps 2 and 3 for each allocateddescriptorhoweverifthesoftwareissettingupdescriptorsspecifyaseriesofbufferstotransfera single packet the valid flag for the firstdescriptor must not be set until all other descriptors of the packet have been written software follows these steps to dequeue buffer descriptor 1 softwareexecutesanuncachedloadwordinstructionthattargetsamemorymappedregisterin the dma controller see table 53 the controller returns the byte offset within the queue of thebufferdescriptortobedequeuedthedmacontrollersetsthehighorderbitbit31inthe returned value if the queue is empty in which case software should repeat step 1 the dma controller can be conﬁgured to also cause an interrupt for this condition 2 software adds the byte offset to logical address of the base of the queue which it maintains independentofthedmacontrollertheresultisabytepointertoa64byteregioninmemory that is 64byte aligned the valid ﬂag in word 0 indicates the validity of the entry however the descriptor is not necessarily valid at this time 3 if the valid bit is 0 the queue entry is invalid ie has not yet been updated by the dma troller this is queue underﬂow condition and is rare in normal operation software must loop and test the valid bit until it is set to 1 by the dma controller note that the descriptor is residentinthecpuscachesorepeatedtestingdoesnotcostsystemperformancebecausethe stream processor maintains memory coherency software will automatically observe the new descriptor contents when it is updated by the dma controller 4 softwareclearsthevalidbitinthedescriptorwithinthequeueaftersoftwareclearsthevalid ﬂag in the descriptor the queue entry is free for reuse by the dma controller software must not read or write the descriptor within the queue after the valid ﬂag has been cleared instead it must use its descriptor copy for the ethernet and pcix dma controllers it is not possible to dequeue multiple entries in step 1 for the memory move dma controller up to 64 consecutive queue descriptors can be deallocated with single load word instruction in step 1 the dma controller provides 64 target addresses for the load word operation in step 1 corresponding to deallocation requests from 1 to 64 entries the dma controller allocates the appropriate number of queue entries before returning the queue offset value the high order bit is set appropriately to indicate the outcome of the deallocation attempt when valid offset is obtained software must perform steps 2 through 4 for each deallocated descriptor theassociationofdmacontrollerqueuestothreadsismanagedbysoftwareandisnotknowntothedma controllerthetypesofassociationshaveanimpactontheamountofmemorythatcanbesharedinsoftware globally managed queue may accessed by all software threads dedicated queue is accessed only by specific software thread the use of global queues requires globally shared buffers in both the logical and physicaladdressspaceswhicheffectivelylimitsdmabuffersto2gbytesofsdramtheuseofdedicated queuesallowsseparatelogicaladdressspacestobemaintainedforeachsoftwarethreadorpoolsofthreads which in turn allows dma buffers to access all 8 gbytes of available sdramchapter 10 direct memory access dma 104 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002105 buffer descriptors bufferdescriptorsarestoredinsdramresidentqueuesasdescribedinsection104agivenqueueisused for input output or memory to memory dma operations and holds only the corresponding type of buffer descriptor each descriptor is stored in one 64byte aligned location within the queue and includes pointer to the data buffer the buffer size and other parameters the contents of the buffer descriptors are shown in table50 the eight columns at the right of the table correspond to the ways that descriptors may be used code in the eight columns indicate when the descriptor field is used softwaremustsupplyzeroesforunusedfieldswhenwritingdescriptorsthedmacontrollersupplieszeroes for any unused fields when writing descriptorsip input buffer descriptor in ethernet or pcix input pending queue ic input buffer descriptor in ethernet or pcix input completed queue op output buffer descriptor in ethernet or pcix output pending queue oc output buffer descriptor in ethernet or pcix output completed queue dp destination buffer descriptor in mm pending queue dc destination buffer descriptor in mm completed queue sp source buffer descriptor in mm pending queue sc source buffer descriptor in mm completed queue ethernet transfer p pcix transfer b ethernet or pcix transfer m memory to memory sdram transfer blank field is not used must be zero table 50 buffer descriptor contents wordfield name description ip ic op oc dp dc sp sc 0 31 valid indicates the validity of the buffer descriptor 1 descriptor is valid 0 descriptor is not valid set by software when descriptor is enqueued in pend ing queue cleared by the dma controller when descrip tor is dequeued set by the dma controller when descriptorisenqueuedinacompletedqueueclearedby software when descriptor is dequeuedb b b b m m m m 030 errtruncated 1 datawastruncatedbecausethepacketislargerthan the conﬁgured maximum packet size conﬁguration method is tbd 0 data was not truncatede 029 errunderrun 1 transmit fifo underrun occurred and automatic retransmit was not enabled via dma conﬁguration 0 underrun occurrede 028 erriphdrchk 1 error in ip header checksum 0 p header checksum ok or ip header not checkede 027 errframecrc 1 error in frame crc 0 frame crc oke 026 errabort 1 packet was aborted by the receiver interface 0 packet was not abortede105 buffer descriptors stream processor lexra inc proprietary confidential 105 rev 21 august 1 2002 do not copy025 erraddr 1 an address error occurred while transferring data to or from memory 0 address error occurredb b m m 024 iphdrchecked 1 ip header checksum was veriﬁed erriphdr1 if error 0 ip header checksum was not veriﬁedb 023 more 1 nextdescriptorspeciﬁesmoredataorstorageforthis transfer 0 data or storage is concluded with this descriptorb b b m m m m 022 continuation 1 dataorstorageiscontinuedfrompreviousdescriptor 0 first descriptorb b b m m m m 021 interrupt enablesinterruptgenerationuponcompletionoftransfer the target of the interrupt is deﬁned by the tbd regis ter this feature should be used sparingly as frequent interrupts can reduce performance substantially 1 generateaninterruptuponcompletionofthetransfer 0 interrupt is generatedb b b b m m m m 020 zerobuffer controls clearing of data buffers after the transfer when enabled the dma controller writes the entire buffer with zeroes after the transfer is completed the buffsize value not the xfersize value is used to determine the size of the region that is cleared the dma controller delays enqueueing the descriptor onto the completed queue until the buffer is cleared 1 clear the buffer after the transfer is completed 0 do not clear the buffer after the transferm m 019 inhibittranfser inhibits the use of the descriptor for data transfer 1 do not use descriptor for data transfer software can use this mode to measure the elapsed time from soft ware enqueue into pending queue to software dequeue from completed queue for this use soft ware typically puts timestamp into the pending descriptors swvalue ﬁeld buffer clear operation without transmission is per formed when zerobuffer1 and inihibit1 for an out put descriptor 0 normal use of descriptorb b b b m m m m 018 staticaddress 1 do not increment the buffer pointer during data trans fer this mode is used to access fifo attached to the pcix bus 0 increment the buffer pointer during data transferp p p p m m m m 01712 reserved must be zero 118 portnumber dma interface through which input packet was received 0 ethernet mac 0 1 ethernet mac 1 2 ethernet mac 2 3 pcixb 0 70 buffptrhi high order 4 bits of the 36bit byte pointer to the data buffer the 4 bits are stored right justiﬁed in this 8bit ﬁeld and the remaining 4 bits of the ﬁeld must be zerob b b b m m m m 1 310 buffptrlo low order 32 bits of the 36bit byte pointer to the data buffer for input buffer descriptors this address must be 64byte alignedb b b b m m m mtable 50 buffer descriptor contents continued word field name description ip ic op oc dp dc sp scchapter 10 direct memory access dma 106 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20022 3116 buffsize for pending descriptors written by software to indicate the buffers allocated byte size in 64byte increments forcompleteddescriptorsthedmacontrollercopiesthe value from corresponding pending descriptor the value isencodedmodulo64k65536avalueof0represents buffer size of 65536 bytes must be multiple of 64 bytesb b b b m m m m 2 150 xfersize transfer size in bytes modulo 64k 65536 updated by thedmacontrollertoindicatetheactualnumberofbytes transferredb b m m 3 3116 startoffset byte offset of ﬁrst data byte within buffer for input pack ets the cache lines that are skipped as result of non zero startoffset are not modiﬁed by the dma controller and the contents of the beginning of the ﬁrst partially modiﬁed cache line are undeﬁnedb b b m m m m 3158 compqifgood identiﬁes the queue to which the descriptor is enqueued after the transfer is successfully completedb 370 compqifbad identiﬁes the queue to which the descriptor is enqueued if the transfer is not successfully completedb 43124 timestamp an8bitpackettimestamprepresentingthetimethatthe packet entered the mapper the 8bit timestamp is obtained from timestamp counter which is described in section 109e 4230 reserved must be zero 5 310 softwarevalue this ﬁeld is application dependent typically it is used to holdthelogicaladdressofthedatabufferorapointerto data structure that software uses to access the data bufferthedmacontrollerpreservesthecontentsofthis ﬁeld when modifying or copying an input descriptor from the pending queue to the completed queue the data in this ﬁeld has effect on packet receipt or transmissionb b b b m m m m 6 3116 checksum updated with the 16bit ones complement of the ones complement sum of all 16bit words in the packet not including the mac header if the data to be check summed consists of an odd number of bytes the last byte is rightpadded with zeroes for the purpose of the checksum calculationb m 6 158 destoffset offset of the destination buffer descriptor relative to the location of this descriptor this ﬁeld is valid only in the ﬁrstdescriptorofamemorytomemorycopywhichisthe ﬁrst source buffer descriptorm m m m 6 70 reserved must be zero 7 310 mapperout0 the contents of mapper output registers r0 through r3 at the conclusion of the mapper programb 8 310 mapperout1 the contents of mapper output registers r4 through r7 at the conclusion of the mapper programb 9 310 mapperout2 thecontentsofmapperoutputregistersr8throughr11 at the conclusion of the mapper programb 10 310 mapperout3 the contents of mapper output registers r12 through r15 at the conclusion of the mapper programbtable 50 buffer descriptor contents continued word field name description ip ic op oc dp dc sp sc105 buffer descriptors stream processor lexra inc proprietary confidential 107 rev 21 august 1 2002 do not copythe following figures illustrate the relationships between queues the buffer descriptors and buffers11 310 devicestatus0 status bits supplied by the interface device after comple tion of transfer see section 113b b 12 310 devicestatus1 status bits supplied by the interface device after comple tion of transfer see section 113b b 13 15310 pad pad descriptor to 64 bytes figure 22 input pending queuetable 50 buffer descriptor contents continued word field name description ip ic op oc dp dc sp sc queue descriptor descriptor descriptor descriptorbuffer free buffer free buffer free buffer freechapter 10 direct memory access dma 108 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002figure 23 input completed output pending output completed queues figure 24 memory to memory copy pending and completed queuesqueue descriptor descriptor more descriptor morecont descriptor contbuffer packet buffer packet b buffer packet b buffer packet b queue src descriptor more src descriptor more cont src descriptor cont des descriptorbuffer source buffer source buffer source buffer dest a106 input queue assignment with packet mapper stream processor lexra inc proprietary confidential 109 rev 21 august 1 2002 do not copywhen software does not employ pagelevel logical to physical address mapping there are restrictions on thesizesandpagealignmentofindividualbuffersthedirectmappingapproachimposesverylittleoverhead on buffer management but exposes all of memory to different processes and requires more complex safe programming practices page level mapping requires more overhead in buffer management but shields processes from each other the method used for given operating system and application depends on required levels of performance and protection software that uses pagelevel mapping must ensure that individual data buffers fit within page of memory as defined by the mmu tlb settings in its logical address space buffer may have an arbitrary size and page alignment due to pagelevel logical to physical address mapping data region that spans more than onelogicalpagecannotbeexpectedtoresideincontiguousphysicalpagesitistheresponsibilityofsoftware to account for this by constructing an appropriate list of buffer descriptors 106 input queue assignment with packet mapper the ethernet and pcix dma controllers include packet mapper that determines the pending and completed queue assignments for inbound packets the mapper parses packets to depth of 128 bytes to identifyprotocolsandextractbitfieldsprogrammablemapperfunctionsoperateonextractedbitstogenerate the assigned packet queue numbers and other values as shown in 25 whenthestreamprocessorisresetthemapperisdisabledandallregistercontentsareclearedtozerountil themapperprogramisloadedallinputpacketsbypassthemapperandarereferredtoinputpendingqueue0 and input completed queue 0 the mapper program is loaded with lexrasupplied api that runs on one of thestreamprocessorscpustypicallyduringsysteminitializationtheapicopiestheprogrambinaryfrom the stream processors shared sdram into the mappers control store by storing the program words into memorymappedlocationsthatfallwithinthemappersconfigurationspacewhenthecopyingiscompleted the api enables mapper operation by setting bit in mapper control registerfigure 25 packet mapper data flowcontrol storepacket data from input fifo parse and extract extracted fields output values to dma engine input pending queue number inputcompletedqueuenumber drop flag fill size user defined valuespacket data to dma engine mapper functions and registerspacket mapperall packet data first 128 byteschapter 10 direct memory access dma 110 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002a total of sixteen general purpose 8bit registers are available to the mappers user program when the mapper program has completed processing of the first 128 bytes the final contents of these registers are passed to the dma engines and determine how the packet will be handled see table51 variety of queue assignment schemes can be programmed for example packet field values can directly determine the assigned queues alternatively the packet field values can be constructed into key that is hashedtodistributethepacketsamongapoolofqueueshashkeyscanbeselectedsuchthatrelatedpackets are always assigned to the same queue these details are applicationdependent and are supported with the mappers programmable architecture themappersparservalidateseachpacketandpassespacketfieldstothefieldprocessingfunctionstable52 summarizes the field processing functions that are supported the following conventions are usedtable 51 mapper registers register bits use upon completion of program 0 70 input pending queue assignment 1 70 input completed queue assignment 2 73 reserved must be zero 2 21 fill size 0 to 64 bytes 2 0 packet drop ﬂag 3 70 byte offset for start of crc calculation 415 70 user deﬁned values written to descriptor boldface statement keywords statements one or more of the statements listed in table52 reg identifiesoneof16generalpurpose8bitregistersthefinal valuesofthefollowingregistersdeterminehowthepacketis handled by the dma engines see table51 packet_field identifiles bit field from the parsed packet this consists of the field name from the formal packet description followed by an optional bit range in square brackets bits are numbered with 0 in the least signficant bit position constant8 an 8bit constant specified with standard verilog notation constant any size constant specified with standard verilog notation table 52 field processing statements statement description reg constant8 load register with 8bit constant regpacket_ﬁeld regd regs copy register contents regdregs106 input queue assignment with packet mapper stream processor lexra inc proprietary confidential 111 rev 21 august 1 2002 do not copyreg packet_ﬁeld load register from packet ﬁeld regpacket_ﬁeld thedatafrom packet_ﬁeld isloadedrightjustiﬁedinto regtheﬁeldmustspecify 8 bits or less of data reg offset packet_ﬁeld load register with byte offset of packet ﬁeld regoffset packet_ﬁeld thebyteoffsetofthebeginningof packet_ﬁeld relativetothestartoftheframeis loaded into reg reg reg constant8 load register with bitwise and of register contents and 8bit constant regreg constant8 reg reg constant8 load register with sum of register contents and 8bit constant regreg constant8 reg rotr reg rotate register right by 1 bit savereg0 reg60reg71 reg7save reg rotl reg rotate register left by 1 bit savereg7 reg71reg60 reg0save reg crc8 regpacket_ﬁeld crc8 accumulation of register with packet ﬁeld regcrc8 regpacket_ﬁeld the data speciﬁed by packet_ﬁeld is rightpadded to an 8bit boundary and is crc8accumulated with the current contents of reg the result is stored in reg regxor8regpacket_ﬁeld 8bit xor accumulation of register with packet ﬁeld regxor8 regpacket_ﬁeld thedataspeciﬁedby packet_ﬁeld isrightpaddedtoan8bitboundaryindividual bytes from the padded ﬁeld are xoraccumulated with the current contents of reg the result is stored into reg ﬁnish finish program themapperterminatesprocessingofthecurrentpacketpacketdataandregister values are passed to the dma engine the mapper waits for new packet if expression statements if statement ifexpression evaluates true execute the statements in the if clause theexpression is one of the following forms reg constant8 reg constant8 unsigned arithmetic packet_ﬁeld constant packet_ﬁeld constantunsigned arithmetictable 52 field processing statements continued statement descriptionchapter 10 direct memory access dma 112 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002by assigning values to the output registers the users mapper program determines the input pending and inputcompletedqueuesthatareusedtoprocessapackettheassociationofthesequeuestosoftwarethreads is managed in the software domain and is not known to the dma controller although it is possible for any software thread to dequeue packet from any queue software typically assigns queues to specific threads thequeuetothreadassociationsthataremaintainedbysoftwareneednotbestaticanefficientformofload balancing can be implemented in software by configuring sufficiently more input queues than threads and modifying the queue to thread associations when thread workload imbalance arises figure26 illustrates an example use of the mapper it discriminates three types of traffic and directs each packet type to pool of queues reserved for that type application specific software threads in turn dequeue packets from their assigned queues the figure also illustrates how software can perform load balancing by modifying the queue to thread associations 1 the dma controller directs the ﬁrst 128 bytes of each input packet to the mapper 2 the mapper program parses the packet to determine the packet type 3 depending on the type the mapper program selects hash key ﬁelds from the packet and accu mulates hash number the hash number is added to base numbers to determine the input pending and input completed queues from pools that are dedicated to the packet type alterna tively direct queue assignment can be made based on the protocol type 4 the dma controller dequeues descriptor from the assigned input pending queue performs the dma transfer and enqueues the descriptor to the assigned input completed queue 5 the software thread that is responsible for the input completed queue dequeues the packet 6 software processes the packet 7 software typically maintains state for the packet and other packets in the same microﬂow 8 software can reassign an entire input completed queue and associated state to different thread this process is efﬁcient if software maintains separate microﬂow state tables for each queueif expression statements else statements ifelse statement ifexpression evaluates true execute the statements in the if clause otherwise executethe statements intheelseclausethe expression formsarelistedabovetable 52 field processing statements continued statement description107 inserting leading fill into input packets stream processor lexra inc proprietary confidential 113 rev 21 august 1 2002 do not copy107 inserting leading fill into input packets whenthemapperprogramcompletestheprocessingofapacketthevalueinmapperregister2specifiesthe number of zero fill bytes 0 to 64 to insert at the front of the packet in memory one use of fill is to align frequently accessed packet fields at 32bit word boundary in memory to allow efficient access to the fields from the application running on the stream processors cpus for example without inserting fill an ip header within mac frame would start at halfword boundary and unaligned loads would be required to reference the 32bit fields within the ipv4 and higher layer headers when the mapper is programmed to insert two bytes of fill at the start of mac frame the application can access the 32bit fields with aligned memory references another use of fill is to make room for proprietary headers that are subsequently updated and maintained by the applicationfigure 26 input mapping and workload assignmenthash hash parseassignable workload input packets input queuessoftware threadsmicroflow stateinput mapping123456 78 dma dma dmachapter 10 direct memory access dma 114 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002108 skipping leading fill from output packets skipping data from an output packet is the analogous to inserting fill into input packets as described in the previous section when an application running on the stream processors cpus prepares an output packet the most efficient program execution is realized if packet headers are properly aligned in memory if the outputpacketwasoriginallyaninputbufferfillbytesmayhavebeeninsertedbytheusersmapperprogram the number of fill bytes inserted by the mapper can be find in the mapperout0 word of the buffer descriptorifthepacketisheldinabuffercreatedbycpusoftwarefillbytesmayhavebeeninsertedbythe software in either case software can cause the fill bytes to be skipped when the packet is enqueued to the dma controller for an output operation by storing an appropriate value the startoffset field of the output descriptor note that skipping leading fill for output packets does not involve the dma controllers mapper 109 input packet timestamp the ethernet dma controller generates an 8bit timestamp for all input packets and includes it in the descriptor that is written to the input completed queue the timestamp is derived from 24bit freerunning counterthatincrementsevery256nsabout12thetimeforaminimumsizepacketaconfigurationregister tbdcontrolstheselectionofthecontiguous8bitfieldfromthecounterthatisusedasthetimestampthe timestamp is captured at the moment the first byte of packet enters the packet mapper software thread that manages multiple input queues can use the timestamp to ensure that it services the queues fairly 1010output queue selection the ethernet and pcix dma controllers provide low priority output pending queue and high priority outputpendingqueuethedmacontrollerservicesallentriesinthehighpriorityoutputqueueaheadofany entries in the low priority queue 1011interrupts interrupts can be enabled independently for controller and targeted to specific cpu contexts and interrupt lines the following interrupt events can be enabled per queue queue underflow queue overflow low water crossing high water crossing packetspecific events as defined in buffer flags see table50 on page104 first packet ie input packet is enqueued to previously empty queue thegenerationofaninterruptforthefirstpacketcanbedelayeduptotbdprocessorcyclesthisallowsthe application to establish maximum interrupt delay for low rate data streams without causing excessive interrupts when burst of packets arrives1012 checksum calculation stream processor lexra inc proprietary confidential 115 rev 21 august 1 2002 do not copy1012checksum calculation the dma controller performs checksum calculations for data transferred in streaming and memory to memory modes theethernetdmacontrollerverifiestheipheaderchecksumofinputpacketsandstores the result in erriphdrchk flag of the buffer descriptor theethernetdmacontrollercalculatesthe16bitchecksumovertheentireinputpacket startingatabyteoffsetthatisdeterminedbythepacketmapperandexcludingthetrailing fcs field the result is stored in the checksum field of the buffer descriptor the memory to memory and pcix controllers calculate the 16bit checksum over the entire data transfer and stores the result in the checksum field of the destination buffer descriptor software can utilize the checksum in the buffer descriptor of packets received through ethernet dma to simplify the calculation of higher layer checksums such as tcp and udp to compute the tcp checksum for example software can subtract ip header contents from the entire packet checksum value 1013error detection and handling the following error conditions are detected by the dma controller bus error bad frame mac status output fifo underflow input fifo overflow interface parity error internal sram parity error allerrorsareindicatedindescriptorthatisenqueuedonthetransfercompletedqueuethedmacontrollers can be also configured signal hardware error in the event of parity error see chapter17 additional details to be suppliedchapter 10 direct memory access dma 116 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20021014memory bandwidth requirement figure27 shows the memory bandwidth required for the dma of different packet sizes through the gigabit ethernet interface for example receiving 500 byte packets over 1 gbps interface requires about 15 gbps of memory bandwidth thereareseveralimportantcharacteristicsofthiscurvefirstthetotalmemorybandwidthrequiredgenerally decreases as the packet size increases this is because fixed amount of memory bandwidth overhead is present for each packet due the buffer descriptors which must be read and written by the dma controller second the curve shows spikes as result of 64byte quantization that occurs when data is transferredfigure 27 gigabit ethernet memory bandwidth requirement0005101520253035404550 64 564 1064 1564 packet size bytesmemory bandwidth requirement gbps1015 dma controller registers stream processor lexra inc proprietary confidential 117 rev 21 august 1 2002 do not copy1015dma controller registers alldmacapabilitiesareaccessedthroughregistersthataremappedwithintheina64kbyteaddressspace that is dedicated to each dma controller this region also provides access specific interface functions as summarized in section114 table53 summarizes the dma controllers queue access configuration and statusregistersthesystemaddressofeachregisterisdeterminedbyaddingtheoffsettotheapplicablebase value defined in section55 table 53 mac conﬁguration and status registers offset bit deﬁnition access reset ethernet and pcix enqueue and dequeue operations 0x0000 0x0004 0x00fc310 310 310input pending queue 0 enqueue 1 entry input pending queue 0 enqueue 2 entries input pending queue 0 enqueue 64 entriesread read read0 0 0 0x0100 0x0104 0x01fc310 310 310input pending queue 1 enqueue 1 entry input pending queue 1 enqueue 2 entries input pending queue 1 enqueue 64 entriesread read read0 0 0 0x7f00 0x7f04 0x7ffc310 310 310input pending queue 127 enqueue 1 entry input pending queue 127 enqueue 2 entries input pending queue 127 enqueue 64 entriesread read read0 0 0 0x8000 0x8004 0x81fc310 310 310input complete queue 0 dequeue 1 entry input complete queue 1 dequeue 1 entry input complete queue 127 dequeue 1 entryread read read0 0 0 0x8200 0x8204 0x82fc310 310 310output pending queue 0 enqueue 1 entry output pending queue 0 enqueue 2 entries output pending queue 0 enqueue 64 entriesread read read0 0 0 0x8300 0x8304 0x83fc310 310 310output pending queue 1 enqueue 1 entry output pending queue 1 enqueue 2 entries output pending queue 1 enqueue 64 entriesread read read0 0 0 0x8400 0x8404 0x85fc310 310 310output complete queue 0 enqueue 1 entry output complete queue 1 enqueue 1 entry output complete queue 127 enqueue 1 entryread read read0 0 0chapter 10 direct memory access dma 118 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002memory move enqueue and dequeue operations 0x0000 0x0004 0x00fc310 310 310transfer pending queue 0 enqueue 1 entry transfer pending queue 0 enqueue 2 entries transfer pending queue 0 enqueue 64 entriesread read read0 0 0 0x0100 0x0104 0x01fc310 310 310transfer pending queue 1 enqueue 1 entry transfer pending queue 1 enqueue 2 entries transfer pending queue 1 enqueue 64 entriesread read read0 0 0 0x0f00 0x0f04 0x0ffc310 310 310transfer pending queue 16 dequeue 1 entry transfer pending queue 16 enqueue 2 entries transfer pending queue 16 enqueue 64 entriesread read read0 0 0 0x1000 0x1004 0x10fc310 310 310transfer complete queue 0 dequeue 1 entry transfer complete queue 0 dequeue 2 entries transfer complete queue 0 dequeue 64 entriesread read read0 0 0 0x1100 0x1104 0x11fc310 310 310transfer complete queue 1 dequeue 1 entry transfer complete queue 1 dequeue 2 entries transfer complete queue 1 dequeue 64 entriesread read read0 0 0 0x0f00 0x0f04 0x0ffc310 310 310transfer complete queue 16 dequeue 1 entry transfer complete queue 16 dequeue 2 entries transfer complete queue 16 dequeue 64 entriesread read read0 0 0 ethernet and pcix mapper conﬁguration and status registers 0x8680 3116 maximum instruction count readwrite 0 0x8680 70 interface clock divider readwrite 0 0x8684 110 mapper instruction store depositexamine address readwrite 0 0x8688 180 mapper instruction store depositexamine data readwrite 0table 53 mac conﬁguration and status registers continued offset bit deﬁnition access resetstream processor lexra inc proprietary confidential 119 rev 21 august 1 2002 do not copychapter 11 ethernet media access controller mac 111 ethernet media access controller overview the stream processor provides three 3 media access controllers macs each connected to dedicated dma controller this chapter describes the operation of the macs the dma operation is described separately in chapter10 ethernetisawidelyusedpacketcommunicationsprotocolitsoperationisspecifiedbytheieee8023series of documents in particular the macs in the stream processor are compliant with 8023 8023u 8023x 8023z and 8023ac they can be connected to external 101001000 mbps phys through gigabit media independent interfaces gmii the ethernet media access controller provides the following 10100 mbps full and halfduplex operation 1000 mbps fullduplex operation gmiimii interface with phy management unbounded frame size automatic pad and crc appending configurable deference pause frame flow control error condition signalling metering and statistics data figure 28 ethernet media access controller connectivitygmii or mii 3stream processor lx4580 cpu 4 ethernet media access controller 3crossbar interface dma controller 3crossbarchapter 11 ethernet media access controller mac 120 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002112 gigabit media independent interface gmii each mac can be connected to an external phy using standard gmiimii interface augmented with two optional clock enable pins from the phy rxcen and txcen 113 error signalling and statistics reporting after the reception or transmission of each frame the mac generates status vector containing error and statistics information including the link condition deference delay frame length consistency and payload integrity the dma controller attached to the mac saves this information for later use by softwaretable 54 gmii external interface name pins direction description col 1 input collision detect from phy crs 1 input carrier sense from phy mdc 1 output management clock to phy mdio 1 inout management data tofrom phy rx_clk 1 input receive clock from phy rx_dv 1 input receive data valid from phy rx_er 1 input receive error control from phy rxcen 1 input receive clock enable from phy rxd70 8 input receive data from phy gtx_clk 1 input transmit reference clock tx_clk 1 output transmit clock to phy tx_en 1 output transmit data enable to phy tx_er 1 output transmit error control to phy txcen 1 input transmit clock enable from phy txd70 8 output transmit data to phy table 55 receive status vector bit deﬁnition 32 frame truncated 31 long frame 30 vlan tag detected 29 unsupported opcode 28 pause control frame 27 control frame 26 dribble nibble113 error signalling and statistics reporting stream processor lexra inc proprietary confidential 121 rev 21 august 1 2002 do not copy25 broadcast frame 24 multicast frame 23 ok 22 length out of range 21 length check error 20 crc error 19 code error 18 false carrier 17 short frame 16 previous packet dropped 150 byte count table 56 transmit status vector bit deﬁnition 51 vlan tagged frame 50 backpressure applied 49 pause control frame 48 control frame 4732 total bytes transmitted 31 underrun 30 long frame 29 late collision 28 maximum collisions 27 excessive defer 26 packet defer 25 broadcast frame 24 multicast frame 23 donetable 55 receive status vector continued bit deﬁnitionchapter 11 ethernet media access controller mac 122 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002114 registers allmaccapabilitiesareaccessedthroughregistersthataremappedwithintheina64kbyteaddressspace that is dedicated to each dma controller this region also provides access to other dma functions as summarized in table53 on page117 table57 summarizes the mac configuration and status registers the system address of each register is determined by adding the offset to the applicable base value defined in section5522 length out of range 21 length check error 20 crc error 1916 collision count 150 byte count table 57 mac conﬁguration and status registers offset bit deﬁnition access init mac conﬁguration and status registers 0x8600 31 soft reset resets all of the mac except the host interfacereadwrite 1 0x8600 30 simulation reset readwrite 0 0x8600 19 rx control reset readwrite 0 0x8600 18 tx control reset readwrite 0 0x8600 17 rx data reset readwrite 0 0x8600 16 tx data reset readwrite 0 0x8600 8 loop back readwrite 0 0x8600 5 rx ﬂow control enable readwrite 0 0x8600 4 tx ﬂow control enable readwrite 0 0x8600 3 synchronized rx enable read 0 0x8600 2 rx enable readwrite 0 0x8600 1 synchronized tx enable read 0 0x8600 0 tx enable readwrite 0 0x8604 1512 preamble length readwrite 7 0x8604 98 interface mode 1 10mbps100mbps 2 1000mbpsreadwrite 0 0x8604 5 maximum frame disable readwrite 0table 56 transmit status vector continued bit deﬁnition114 registers stream processor lexra inc proprietary confidential 123 rev 21 august 1 2002 do not copy0x8604 4 length ﬁeld check enable readwrite 0 0x8604 2 pad and crc enable readwrite 0 0x8604 1 crc enable readwrite 0 0x8604 0 fullduplex readwrite 1 0x8608 3024 ipgr1 carrier window readwrite 64 0x8608 2216 ipgr2 carrier window readwrite 96 0x8608 158 minimum interframe gap readwrite 80 0x8608 60 minimum interpacket gap readwrite 96 0x860c 2320 alternate backoff limit readwrite 10 0x860c 19 alternate backoff enable readwrite 0 0x860c 18 backpressure backoff retransmit immediately during backpressurereadwrite 0 0x860c 17 backoff retransmit immediately after collisionreadwrite 0 0x860c 16 maximum defer disable readwrite 1 0x860c 1512 maximum defer limit readwrite 15 0x860c 90 collision window readwrite 55 0x8610 150 maximum frame length readwrite 1536 0x8620 31 management reset readwrite 0 0x8620 5 multiphy scan enable read roundrobin from 32 attached physreadwrite 0 0x8620 4 preamble suppression ieee 8023222442readwrite 0 0x8620 20 management clock select 0 3125mhz 1 3125mhz 2 2083mhz 3 1563mhz 4 1250mhz 5 893mhz 6 625mhz 7 446mhzreadwrite 0 0x8624 1 scan cycle execute continuous management read from phyreadwrite 0 0x8624 0 read cycle execute single management read from phyreadwrite 0 0x8628 128 phy address readwrite 0 0x8628 40 register address readwrite 0table 57 mac conﬁguration and status registers continued offset bit deﬁnition access initchapter 11 ethernet media access controller mac 124 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20020x862c 150 register write data write 0 0x8630 150 register read data read 0 0x8634 2 register data not valid read 0 0x8634 1 scan cycle in progress read 0 0x8634 0 phy access in progress read 0 0x8638 31 interface reset reset only host interfacereadwrite 0 0x8638 27 tbi mode readwrite 0 0x8638 26 halfduplex gmii mode readwrite 0 0x8638 25 halfduplex mii mode readwrite 0 0x8638 24 phy mode readwrite 0 0x8638 23 mii reset readwrite 0 0x8638 16 speed select 0 10mbps 1 100mbpsreadwrite 0 0x8638 15 cipher reset readwrite 0 0x8638 10 force transmit quiet readwrite 0 0x8638 9 cipher disable readwrite 0 0x8638 8 link fail disable readwrite 0 0x8638 7 gpsi reset readwrite 0 0x8638 0 jabber protection enable readwrite 0 0x863c 9 excessively deferring read 0 0x863c 8 misconﬁgured interface read 0 0x863c 7 jabber detected read 0 0x863c 6 link ok read 0 0x863c 5 fullduplex read 0 0x863c 4 speed setting 0 10mbps 1 100mbpsread 0 0x863c 3 link fail read 0 0x863c 2 loss of carrier read 0 0x863c 1 sqe error read 0 0x863c 0 jabber detected read 0 0x8640 3124 station address octet 1 readwrite 0table 57 mac conﬁguration and status registers continued offset bit deﬁnition access init114 registers stream processor lexra inc proprietary confidential 125 rev 21 august 1 2002 do not copy0x8640 2316 station address octet 2 readwrite 0 0x8640 158 station address octet 3 readwrite 0 0x8640 70 station address octet 4 readwrite 0 0x8644 3124 station address octet 5 readwrite 0 0x8644 2316 station address octet 6 readwrite 0table 57 mac conﬁguration and status registers continued offset bit deﬁnition access initchapter 11 ethernet media access controller mac 126 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 127 rev 21 august 1 2002 do not copychapter 12 pcix bridge pxb 121 pcix bridge overview thestreamprocessorspcixbridgeallowsastandardconnectiontobemadefromthestreamprocessorto other devices in the system the bridge includes dedicated dma controller this chapter describes the operation of the pcix bridge the dma programming architecture is described separately in chapter10 the pcix bridge provides the following 133 mhz 32bit operation 42 gbps bandwidth tbd configurable address windows internal or external arbiter as bus master supports access from lx4580 cpus to pcix bus devices access from dedicated pcix dma controller to pcix bus devices noncoherent line reads and writes to pcix memory noncoherent subline io reads and writes pcix configuration cycles as bus target supports coherent line reads and writes to the stream processors attached sdram noncoherent subline io reads and writes to the stream processors uart i2c and generic io modules noncoherent line reads and writes to the stream processors generic io module pcix configuration cycles devices on the pcix bus may signal interrupts to the lx4580 cpus over the stream processors external levelsensitive interrupt inputs see section421 figure 29 overview of pcix bridgepcix busstream processor lx4580 cpu 4 crossbar interface dma controllerpcix bridgecrossbarchapter 12 pcix bridge pxb 128 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002122 pcix interface 123 pcix arbitration the pcix bridge includes an internal arbiter that supports four masters three external masters and the bridge itself the internal arbiter may be disabled via configuration register in which case the bridge communicates with an external arbiter through requestgrant signal pair details of the internal arbiter to be suppliedtable 58 pcix interface name pins direction description pcix_clk 1 input clock pcix_par 1 inout parity pcix_rst_n 1 input reset pcix_ad310 32 inout address or data pcix_cbe_n30 4 inout command and byte enable ﬂags pcix_frame_n 1 inout frame pcix_irdy_n 1 inout initiator ready pcix_trdy_n 1 inout target ready pcix_stop_n 1 inout stop pcix_devsel_n 1 inout device select pcix_idsel 1 input initialization device select pcix_lock_n 1 inout lock target pcix_perr_n 1 inout parity error pcix_serr_n 1 inout system error pcix_req_n 1 output stream processors request to external arbiter pcix_gnt_n 1 input grant from external arbiter pcix_reqin_n20 3 input requests from external pci devices to stream processors internal arbiter pcix_gntout_n20 3 output grants to external pci devices to stream proces sors internal arbiter124 pcix master operation stream processor lexra inc proprietary confidential 129 rev 21 august 1 2002 do not copy124 pcix master operation the pcix bridge operates as pcix master internal transactions received from the bridges dedicated dma controller an the lx4580 cpus through the crossbar are converted to pcix bus transactions as listed in table59 coherency is not maintained for accesses made from the cpus to pcix bus 125 pcix target operation the pcix bridge operates as pcix target pcix transactions that target the bridge are converted into crossbar transactions as listed in table60 these transactions may reference main memory and the i2c uart and gio interfaces access to main memory from the pcix bus is coherent with l1 and l2 caches 126 pcix registers to be suppliedtable 59 conversion of internal transactions to pcix transactions internal transaction pcix transaction line read memory read block 64 bytes line write memory write block 64 bytes subline read 1 2 or 4 bytes memory read block 1 2 or 4 bytes subline write 1 2 or 4 bytes memory write 1 2 or 4 bytes table 60 pcix transactions to crossbar transactions pcix transaction crossbar transaction memory read block line reads as many line reads as required are issued to satisfy the size of the pcix transactiontheaddressandsizeofthemem oryreadblockcommandneednotbealigned to 64 bytes data is truncated as needed before it is sourced on the pcix bus memory write block line writes as many line writes as required are issued to satisfy the size of the pcix transactiontheaddressandsizeofthemem orywriteblockcommandneednotbealigned to 64 bytes write merging with current mem ory contents is performed as needed memory read block 1 2 or 4 bytes subline read 1 2 or 4 bytes memory write 1 2 or 4 bytes subline write 1 2 or 4 byteschapter 12 pcix bridge pxb 130 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 131 rev 21 august 1 2002 do not copychapter 13 system control module sc 131 system control module overview the stream processors system control module sc functions provide i2c interface to external devices crossinterrupt message reflection two generalpurpose 32bit countdown timers with interrupts one rs232 serial uart generic io interface for up to 4 external devices the crossbar ports connect to shared peripheral bus the peri bus the crossbar sc output module is the only initiator of peripheral bus transactions and it initiates transaction for each crossbar message received the sc input module captures read data error responses or write acknowledgements from the peripherals and generates an appropriate crossbar response message only one transaction at time is in progress in the sc though multiple transactions may be buffered in the output module fifo the address driven on the peri bus is taken directly from the address specified in the header of the initiating sc output message the address space required by each peripheral varies and for the generic io devices is configurable the address range within the 36bit physical address space to which the generic io devices are mapped may be configured by writing base address and address mask registers attentionwhentheaddressrangeregistersforagenericiodeviceareconfiguredtheaddressmapping ineachcpuscrossbar interfacemustbeconfiguredcorrespondingly sothatperipheralaccesses inthecpu generate messages destined for the system control module crossbar portfigure 30 system control module overviewsc outputcross interrupt reflector scl sda crossbar signalsi2c interfacesystem timers txd dtrrs232 serial uart rxddsrcrossbar signals sc inputperi bus gio_ad gio_sel genericio interfaces gio_rdy gio_ctlsystem controlstream processorchapter 13 system control module sc 132 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002132 cross interrupt reﬂector the cross interrupt reflector is mapped to the physical address range starting at irr_base see section43 133 system timers there are two system timers in the system control module block of the stream processor one is driven by the cpu clock the other is driven by an external realtime clock input the timers can be used to generate two different interrupts at precisely specified numbers of clock ticks eachtimerhas4wordlengthregistersthataremappedtorangesstartingattimer_baseforthesystemclock timer and timer_base 0x10 for the real time clock timer name timer_count size 32 bits address timer_base 0x0 restrictions read only 310 count field bits description rw reset count 310 count value the count increments once for every cycle of the clock that drives the counter the count can neither be written nor reset the count wraps to zero when it overﬂowsr 0133 system timers stream processor lexra inc proprietary confidential 133 rev 21 august 1 2002 do not copyname timer_config size 32 bits address timer_base 0x4 name timer_compare_0 size 32 bits address timer_base 0x83116 1512 118 74 3 2 1 0 reserved tgtid1 tgtid0 reserved m1 m0 p1 p0 field bits description rw reset reserved 3116 must be zero rw 0 tgtid1 1512 target global thread id for interrupt 1 tgtid0 118 target global thread id for interrupt 0 reserved 74 must be zero rw 0 m1 3 interruptmask1interrupt1isenabledwhensetto1 rw 0 m0 2 interruptmask0interrupt0isenabledwhensetto1 rw 0 p1 1 interrupt 1 pending this activehigh signal indicates that match 1 has occurred this bit is asserted regardless of the interrupt mask bits writing 1 to this bit clears the pending interruptrw 0 p0 0 interrupt 0 pending this activehigh signal indicates that match 0 has occurred this bit is asserted regardless of the interrupt mask bits writing 1 to this bit clears the pending interruptrw 0 310 compare0 field bits description rw reset compare0 310 comparevalue0whenthecountreachesthisvalue the interrupt pending 0 bit is asserted if the interrupt 0 mask is not asserted an interrupt signal will be assertedrw 0chapter 13 system control module sc 134 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002name timer_compare_1 size 32 bits address timer_base 0x8 the clocktick count is readonly the compare registers can be read and written the count increments on every clock cycle when the count value equals the value in compare register the corresponding interrupt will be set as pending the timer signals the interrupt using an interrupt in crossbar message to the target cpu and context indicated by the tgtid1 or tgtid0 fields of the timerconfig register the state of interrupts can be polled by reading from the statuscontrol bit register at offset 4 interrupts are cleared by writing 1 to their corresponding bits implementationnotetogenerateaninterruptatapreciseregularintervaltheexactnumberofdesiredclock ticksbetweeninterruptsshouldbeaddedtothecompareregisterintheinterruptserviceroutinereadingthe count register adding to it and writing to the compare register is an imprecise method and should be done only during system initialization to calculate the number of desired clock ticks between interrupts divide the timer clock source frequency by the desired interrupt frequency 134 i2c interface the i2c interface peripheral is an i2c bus master and slave it conforms to the philips i2c specification version 21 including multimaster arbitration the interface supports 10 bit addressing in standard 100 kbps and fast 400 kbps modes additional details to be supplied 135 test and set thetestandsetregisterisimplementedinthesystemcontrolmoduleseesection341fordescriptionof this register 136 rs232 serial uart the stream processor includes simple serial uart it supports rs232 communication with 1 start bit 8 databits1stopbitandnoparitytheuartsupportsarangeofbaudratesitdefaultsto9600baudatreset the uart has data and configuration wordsized memorymapped register both respond only to word sized accesses for data register access only the lower 8bits of data are valid write to the data register initiatesthetransmissionofacharacterareadfromthedataregisterreturnsthenextcharacterinthereceive buffer an interrupt line output from the uart is asserted whenever one or more characters are queued in the receive buffer310 compare1 field bits description rw reset compare1 310 comparevalue1whenthecountreachesthisvalue the interrupt pending 1 bit is asserted if the interrupt 1 mask is not asserted an interrupt signal will be assertedrw 0136 rs232 serial uart stream processor lexra inc proprietary confidential 135 rev 21 august 1 2002 do not copyname uart_data size 32 bits address scbase 0x4 name uart_status_config size 32 bits address scbase 0x0 sw init to use uart interrupts the interrupt enable fields of this register must be written318 70 reserved uartdata field bits description rw reset reserved 318 unused rw 0 uart data 70 data written is transmitted by the uart data in the uart receive buffer is readrw 0 3128 27 26 25 24 2320 1916 150 reserved txinten txrdy rxinten rxrdy reserved tgtid baudrate field bits description rw reset reserved 3128 must be zero rw 0 txinten 27 transmit interrupt enable active high rw 0 txrdy 26 transmit ready active high character may be transmitted over the uart software should poll this bit before writing data to the uartr 1 rxinten 25 receive interrupt enable active high rw 0 rxrdy 24 receive data pending active high there is receive data in the receive bufferr 0 reserved 2320 must be zero rw 0 tgtid 1916 target global thread id for interrupt baudrate 150 baud rate see table below for baud rate encodings w 0chapter 13 system control module sc 136 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the 16 least significant bits of write to the configuration register define the baud rate if the receive interrupt enable flag is set then an interrupt in message will be generated whenever character is waiting in the receive buffer if the transmit interrupt enable flag is set then an interrupt will be generated whenever the transmit buffer is empty and ready for new character all configuration register accesses must be word sized 137 generic io interface 4 io devices are accessible through the generic io interface within the system control module their addressrangesareconfigurablebydefaultdevicezerorespondstoa4megabytesrangestartingatphysical address 0x1fc00000 and devices 13 are disabled for description of the generic io interface see chapter14baud rate conﬁg hex conﬁg binary 614400 0x000f 0000000000001111 307200 0x001e 0000000000011110 153600 0x003c 0000000000111100 76800 0x0078 0000000001111000 57600 0x00a0 0000000010100000 38400 0x00f0 0000000011110000 28800 0x0140 0000000101000000 19200 0x01e0 0000000111100000 14400 0x0280 0000001010000000 9600 0x03c0 0000001111000000 4800 0x0780 0000011110000000 2400 0x0f00 0000111100000000 1200 0x1e00 0001111000000000 600 0x3c00 0011110000000000 300 0x7800 0111100000000000 150 0xf000 1111000000000000stream processor lexra inc proprietary confidential 137 rev 21 august 1 2002 do not copychapter 14 generic io interface gio 141 generic io interface overview thegenericiointerfacegioprovidesaccesstooffchiplowbandwidthasynchronousdevicessoftware runningonthestreamprocessoraccessesgiodevicesthroughmemorymappedspacestheseaccessesmay be cacheable in l1 instruction and data caches depending on the nature of the gio device however cache coherency is not maintained for gio accesses applications requiring cache coherency for gio accesses must mange it in software the generic inputoutput interface includes the following features decode of four distinct gio devices with independently configurable timing and protocols conversion between crossbar transactions and external io transactions multiplexed addressdata bus mode with 32bit address and 8 16 or 32bit data shared addressdata bus mode with 24bit address 8bit data single beat and 2 4 8 16 32 64 and unlimited beat burst transactions data handshake and pure timing modes the gio interface accepts transaction requests from the stream processors internal crossbar the address from each request is decoded to determine which of four gio devices is targeted configurable timing and control parameters determine how crossbar transactions are converted into external gio transactions there is separate set of configuration parameters for each target device the active state high or low of all signals except gio_ad310 is configurable the gio_ad310 gio_sel30andgio_rdysignalsprovidededicatedprotocolfunctionsthegio_ctl30signalscan be configured to support wide variety of interface methods throughout this chapter the variable mrepresents generic io interface device number and the variable n represents signal number within busfigure 31 generic io interfacetransaction conversion transaction generatorgio_ad310 gio_sel30 gio_rdycrossbar transactions through peri bus timing parametergio_ctl30stream processorchapter 14 generic io interface gio 138 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002142 generic io interface signals and timing the generic io interface provides four independent gio device select signals and set of signals that are shared by all connected gio devices for each transaction one of the select lines is asserted and the shared signals provide address data readwrite control and handshaking for the transaction the active level of all signals except ad310 can also be set through the configuration registers table 61 generic io signals signal name direction description gio_sel30 output gio device select lines one of the these lines is asserted by the stream processor for the duration of generic io transaction to identify the selected device gio_ad310 inout address and data lines these lines operate in multiplexed or non multiplexed modes depending how the generic io interface is ﬁgured to support the selected gio device for multiplexed transaction the stream processor drives the low order32bitsofthephysicaladdressontoad310duringthetrans actions address phase and drives or receives data over ad310 during the transactions data phase for nonmultiplexed transaction the stream processor drives the low order 24 bits of the physical address onto ad230 and drives or receives data over ad3124 for clarity the names a230 and d70 refer to the ad signals when they are used in the nonmulti plexed mode gio_rdy input devicereadyassertedbytheselectedgiodevicetoindicatethat read or write operation has completed the stream processor observesthissignalonlyifthegenericiointerfaceisconﬁguredto honor the data handshake for the selected device otherwise the conﬁgured timing values are used to control the length of the trans actions data phase gio_ctl30 output programmable control signals output enable asserted low by the stream processor to enable the selected gio devices data output driver143 generic io configuration overview stream processor lexra inc proprietary confidential 139 rev 21 august 1 2002 do not copythetimingforallsignalsiscontrolledthroughconfigurationregistersspecifictoeachgiodevicetable62 shows the supported timing parameters all timing parameters are specified as time period in units of multiples of crossbar clock period 143 generic io conﬁguration overview this section provides an overview of generic io configuration the configuration registers are described in detail in section147 the stream processors generic io address space is configured with onchip registers that identify the total generic io address space and additional onchip registers that identify the address space and timing parametersforuptofourgiodevicestheaddressspaceofeachdevicemustfallwithinthetotalgenericio addressspacethetotaladdressspaceofeachdevicemaybe64kbytesto4gbytesandmustbeapowerof two in size applying reset to the stream processor configures generic io device 0 to support simple rom located at physical address range 0x0_1fc0_0000 through 0x0_1fff_ ffff theremaining three devices are disabled following reset the reset configuration allows processors to execute boot code from the rom starting attable 62 generic io timing parameters parameter description tam1 if asingle beattransactionduration thattheaddressis drivenifa mul tiple beat transaction duration that the ﬁrst address is driven if hand shakingtransactionthedurationthattheaddressisdrivenafterrdyis asserted tam2 minimum duration that address is not driven prior to starting the next transaction tam3 if the transaction is four beats or more duration that the address is driven for the second and subsequent beats other than the last beat not used for single beat and two beat transactions tam4 ifamultiplebeattransactiondurationthattheaddressisdrivenforthe last beat not used for single beat transactions tdm1 for write transactions delay to the start of driving the ﬁrst data beat not used for read transactions tdm2 for write transactions duration that each data beat is driven not used for read transactions trsm forhandshakereadsdelayfromassertionofrdyuntilthesamplingof read data for burst reads delay from last address transition until the samplingofthelastdataotherwisedelayfromthestartofthetransac tion until the sampling of read data tselm1 delay for the assertion of gio_sel m tselm2 delay for the deassertion of gio_sel m tctlmn1 delay for the assertion of gio_ctl n tctlmn2 delay for the deassertion of gio_ctl n tctlmn3 optional timing parameter for multibeat transactions delay between consecutive assertions of gio_ctl nchapter 14 generic io interface gio 140 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002physical address 0x0_1fc0_0000 boot code may then configure the generic io interface to support the specific gio devices that are attached to the stream processor the address space for generic io is configured within each processors address space decode logic via the as_giobase and as_giotop registers see section87 when processor makes requests to the crossbar itdecodesthephysicaladdresstoidentifythecrossbartargetusingthecontentsoftheseregistersandother address space decode registers if the address falls within the range specified in the as_giobase and as_giotop registers the crossbar request is directed to the generic io interface when request reaches the gio interface decode logic within the gio interface uses the address and the values in the gio_mask mand gio_addr mregisters m03 to determine which gio device is to be accessed in the case of an overlap in the device address spaces the lowest numbered device is selected if there is address match the generic io interface sends an error reply to the requestor thegioconfigurationregistersprovidethefollowinginformationforeachofthefourdecodedgiodevices timing parameters in units of the stream processors crossbar clock 250 mhz signal polarity except ad310 read data sample time addressdata mode multiplexed or nonmultiplex data signaling mode handshake or pure timing data transfer size 1 2 or 4 bytes supported data burst lengths 1 2 4 8 16 32 64 and unlimited beats 144 generic io transaction conversion thegiointerfacereceivestransactionrequestsfromthecpusoverthecrossbarandconvertseachcrossbar transaction to one or more transactions over the gio pins for example the gio interface converts line readrequestfromthecrossbarintoaseriesofreadrequeststotheselectedgiodevicegathersthereaddata to form 64byte line of data and returns the line read result over the crossbar the conversion process follows these rules the address from the original crossbar transaction determines which gio device is accessed an error response is generated if the request is to an address at which device or configuration register is mapped an error response is generated if the request is smaller than the devices configured size the crossbar transaction is broken into series of samesize gio transactions the largest size possible gio transaction is used including data bursting 145 generic io transactions this section describes all of the gio transaction types nonmultiplexed read nonmultiplexed write multiplexed read multiplexed write nonmultiplexed read with data handshake nonmultiplexed write with data handshake multiplexed read with data handshake multiplexed write with data handshake nonmultiplexed burst read nonmultiplexed burst write145 generic io transactions stream processor lexra inc proprietary confidential 141 rev 21 august 1 2002 do not copynote that burst transactions with addressdata multiplexing or data handshake are not supported the length forburst transactions maybeconfiguredfor twofour eightsixteen thirtytwosixtyfour andanunlimited number of beats representative burst length of four beats is shown in burst transaction timing diagrams toillustratehowgiotransactionsworkthissectionusesarepresentativecontrolprotocolwithaddresslatch enablereadenablewriteenableandoutputenablecontrolsasshowninfigure32forthisapplicationthere is mix of active high and active low signals the gio_ctl30 outputs are configured to provide address latch enable read enable write enable and output enable signals for the gio devices attached to the stream processor as described in table63 othercontrolprotocolsarepossibleforexampleinsteadofseparatereadenableandwriteenablecontrolsa strobe signal and readwrite flag could be used figure 32 example generic io interface applicationtransaction conversion transaction generatorgio_ad310gio_sel_n30 gio_we_n gio_oe_ngio_rdy_ncrossbar signals timing parametergio_re_ngio_alestream processorchapter 14 generic io interface gio 142 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the timing diagrams indicate the relationships between the timing parameters that control the transition of signals sourced by the stream processor each timing parameter is relative to one of several possible reference points depending upon the signal and gio devices mode of operation the transaction timing starts with the first transition on the address lines the first transition on each other signals is timed from the start of the transaction except for handshaking subsequent transitions are timed from the previous transition oftable 63 example gio application signals gio signal application direction description gio_sel30 sel_n30 output gio device select lines one of the these lines is asserted low by the stream processor for the duration of generic io transaction to identify the selected device gio_ad310 ad310 inout address and data lines these lines operate in mul tiplexed or nonmultiplexed modes depending on how the generic io interface is conﬁgured to sup port the selected device for multiplexed transaction the stream proces sor drives the low order 32bits of the physical address onto ad310 during the transactions address phase and drives or receives data over ad310 during the transactions data phase for nonmultiplexed transaction the stream pro cessor drives the low order 24 bits of the physical address onto ad230 and drives or receives data over ad3124 for clarity the names a230 and d70refertotheadsignalswhentheyareusedin the nonmultiplexed mode gio_ctl0 oe_n output output enable asserted low by the stream proces sortoenabletheselectedgiodevicesdataoutput driver gio_ctl1 ale output addresslatchenableformultiplexedtransactions asserted high by the stream processor to signal valid address gio_ctl2 re_n output read enable asserted low by the stream proces sor to enable read transaction for the selected gio device gio_ctl3 we_n output write enable asserted low by the stream proces sor to enable write transaction for the selected gio device gio_rdy rdy_n input device ready asserted low by the selected gio devicetoindicatethatareadorwriteoperationhas completed the stream processor observes this signal only if the generic io interface is conﬁgured to honor the data handshake for the selected deviceotherwisetheconﬁguredtimingvaluesare used to control the length of the transactions the data phase145 generic io transactions stream processor lexra inc proprietary confidential 143 rev 21 august 1 2002 do not copythe signal in the case of handshaking some transitions are timed from the assertion of rdy_n the reference points employed for each transaction type are defined in the timing diagrams the use of the timing parameters for the example protocol is shown in table64 these parameters are for representativegiodevicethedeviceinthisexampleisattachedtogiointerface0forclaritythe mandn subscripts in table62 are omitted from the timing parameter names in the example application timing diagrams warning it is possible to set timing parameters that do not make sense or might even damage the components that are connected to the gio interface checks are performed by the gio interface to prevent such problems it is the responsibility of the designer to choose reasonable timing parameterstable 64 example gio application parameters gio parameter application description ta01ta02ta03ta04 td01td02ta1ta2ta3ta4 td1td2address and data timing used as described in table62 trs0 trs delay for the sampling of read data tsel01 tsel1 delay for the assertion of sel_n0 tsel02 tsel2 delay for the deassertion of sel_n0 tctl001 toe1 delay for the assertion of oe_n tctl002 toe1 delay for the assertion of oe_n tctl003 disabled tctl011 tale1 delay for the assertion of ale tctl012 tale2 delay for the deassertion of ale tctl013 disabled tctl021 tre1 delay for the assertion of re_n tctl022 tre2 delay for the deassertion of re_n tctl023 disabled tctl031 twe1 delay for the ﬁrst assertion of we_n tctl032 twe2 delay for the deassertion of we_n tctl033 twe3 if multiple beat transaction delay for the second and sub sequentassertionsofwe_nnotusedforsinglebeattrans actionschapter 14 generic io interface gio 144 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002 figure 33 generic iosim ple read figure 34 generic iosim ple writea230 sel_ni oe_n re_n sampling d70 we_n aleta1 tsel1 tre1ta2 tsel2 tre2toe1 toe2 sample trs d0137 a230 sel_ni we_n d70 oe_n re_n aleta1 tsel1 twe1ta2 tsel2 twe2 td1 td2 d0139145 generic io transactions stream processor lexra inc proprietary confidential 145 rev 21 august 1 2002 do not copyfigure 35 generic iom ultiplexed read figure 36 generic io multiplexed writesampling ad310 sel_ni ale oe_n re_n we_naddress rd datata1 tsel1 tre1tsel2 tre2ta2 toe1 toe2tale1tale2sample trs d0138 ad310 ale sel_ni we_n oe_n re_naddress wr datata1 tsel1 twe1tsel2 twe2ta2 td1 td2 tale1 tale2 d0140chapter 14 generic io interface gio 146 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002 figure 37 generic io read with data handshake figure 38 generic iow rite with data handshakea230 sel_ni oe_n re_n rdy_n sampling d70 we_n aletsel1 tre1ta2 tre2ta1 tsel2 toe1 toe2 sample trs d0141 a230 sel_ni we_n d70 rdy_n oe_n re_n aleta1 tsel1 twe1ta2 tsel2 twe2 td1 td2 d0143145 generic io transactions stream processor lexra inc proprietary confidential 147 rev 21 august 1 2002 do not copy figure 39 generic iom ultiplexed read with data handshake figure 40 generic io multiplexed write with data handshakesampling ad310 sel_ni ale oe_n re_n rdy_n we_naddress rd datata1 tsel1 tre1tsel2 tre2ta2 toe1 toe2tale1 tale2trssample d0142 ad310 sel_ni ale we_n rdy_n oe_n re_naddress wr datata1 tsel1 twe1tsel2 twe2ta2 td1 td2 tale1 tale2 d0144chapter 14 generic io interface gio 148 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002 figure 41 generic ioburst read figure 42 generic ioburst w ritea232 a10 sel_ni oe_n re_n sampling d70 we_n alen n1 n2 n3 data n data n1 data n2 data n3tsel1 tre1tsel2 tre2toe1 toe2ta1 ta3 ta3 ta4 ta2 sample_0 sample_1 sample_2 sample_3trs d0146 a232 a10 sel_ni we_n d70 oe_n re_n alen n1 n2 n3 data n data n1 data n2 data n3tsel1 tsel2ta1 ta3 ta3 ta4 ta2 td1td2 td2 td2 td2twe1twe2twe3twe2twe3twe2twe3twe2 d0147146 errors and error reporting stream processor lexra inc proprietary confidential 149 rev 21 august 1 2002 do not copy146 errors and error reporting thegenericiointerfacerespondswithabuserrormessageifitreceivesatribyteaccessoranaccessthatis narrower than the configured data width of the device the generic io interface also responds with bus errormessageifanaccessismadetoanaddressthatisnotwithintheconfiguredrangeofanyofthedevices or does not match memory mapped configuration register 147 generic io conﬁguration registers theaddressspaceisusedtoaccessgiodevicesisconfiguredviaregistersinthecpucrossbarinterfacesee sections 876 and 877 the generic io interface also includes configuration registers for each device as described in table65 table 65 summary of gio conﬁg registers for each device register namerelative addressdescription gio_cfgm 0x00 master device conﬁguration ﬁelds gio_tam1 0x04 first transaction address assertion gio_tam2 0x08 transaction address deassertion gio_tam3 0x0c second transaction beat address assertion gio_tam4 0x10 last transaction beat address assertion gio_tdm1 0x14 transaction data delay gio_tdm2 0x18 transaction data assertion gio_trsm 0x1c transaction data read sampling gio_tselm10x20 device select delay gio_tselm20x24 device select duration gio_tctlm010x28 device control signal 0 delay gio_tctlm020x2c device control signal 0 assertion gio_tctlm030x30 device control signal 0 deassertion gio_tctlm110x34 device control signal 1 delay gio_tctlm120x38 device control signal 1 assertion gio_tctlm130x3c device control signal 1 deassertion gio_tctlm210x40 device control signal 2 delay gio_tctlm220x44 device control signal 2 assertionchapter 14 generic io interface gio 150 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002name gio_cfgm size 32 bits address giobase 0x58 mgio_tctlm230x48 device control signal 2 deassertion gio_tctlm310x4c device control signal 3 delay gio_tctlm320x50 device control signal 3 assertion gio_tctlm330x54 device control signal 3 deassertion 319 8 7 65 42 1 0 0 rdy sense enable width burst handshake multiplexed field bits description rw reset rdy sense 8 active state of rdy from device m this ﬁeld is only valid for handshaking devices enable 7 gio device interface m is enabled rw 1 for device0 m0 0 for oth ers width 65 the data width of the connected device 00 8 bits 01 16 bits 10 32 bits 11 illegal this ﬁeld is only valid for multiplexed devicesrw 00 burst 42 maximum burst size supported by the connected device 000 single cycle transactions only 001 2 beat bursts 010 4 beat bursts 011 8 beat bursts 100 16 beat bursts 101 32 beat bursts 110 64 beat bursts 111 unlimited bursts the gio will never perform larger than 64 beat burst since 64 beats from an 8bit wide device com pletes an entire cache line the largest transaction transferred over the crossbar this ﬁeld is only valid for nonmultiplexed devicesrw 000 handshake 1 1 wait for data ready rdy handshake from the connected device 0 rely only on timing for signal transitionsrw 0table 65 summary of gio conﬁg registers for each device continued register namerelative addressdescription147 generic io configuration registers stream processor lexra inc proprietary confidential 151 rev 21 august 1 2002 do not copyname gio_tam1 size 32 bits address giobase 0x58 m 0x04 name gio_tam2 size 32 bits address giobase 0x58 m 0x08multiplexed 0 1 address and data are multiplexed on the ad bus 0 the address is asserted on the lower 24 bits of the ad bus and the data is asserted on the upper 8 bitsrw 0 318 70 0tam1 field bits description rw reset tam1 70 the number of crossbar clock cycles for which the ﬁrst address of transaction is driven for device mrw 0xff 318 70 0tam2 field bits description rw reset tam2 70 the number of crossbar clock cycles for which the address is not driven between multiple device trans actions to device mrw 0xffchapter 14 generic io interface gio 152 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002name gio_tam3 size 32 bits address giobase 0x58 m 0x0c name gio_tam4 size 32 bits address giobase 0x58 m 0x10 name gio_tdm1 size 32 bits address giobase 0x58 m 0x14318 70 0tam3 field bits description rw reset tam3 70 the number of crossbar clock cycles for which the address is driven for the second and subsequent beats of many beat transaction to device m does not apply to the last beat of transactionrw 0xff 318 70 0tam4 field bits description rw reset tam4 70 the number of crossbar clock cycles for which the address is driven for the last beat of multibeat transactiontodevice mdoesnotapplytosinglebeat transactionsrw oxff 318 70 0 tdm1 field bits description rw reset tdm1 70 thenumberofcrossbarclockcyclesfromthestartof transaction until the ﬁrst write data beat is driven to devicemrw 0x55147 generic io configuration registers stream processor lexra inc proprietary confidential 153 rev 21 august 1 2002 do not copyname gio_tdm2 size 32 bits address giobase 0x58 m 0x18 name gio_trsm size 32 bits address giobase 0x58 m 0x1c name gio_tselm1 size 32 bits address giobase 0x58 m 0x20318 70 0tdm2 field bits description rw reset tdm2 70 the number of crossbar clock cycles for which each write data beat is driven to device mrw 0x55 318 70 0trsm field bits description rw reset trsm 70 thenumberofcrossbarclockcyclesafterthestartof areadtransactionuntilthereaddataissampledfrom devicem for burst transactions the number of crossbarclockcyclesafterthelastaddresstransition until the last read data is sampled from device mrw 0x55 31 308 70 active 0 tselm1 field bits description rw reset active 31 active state of tseln1 0 active low 1 active highrw 0 tselm1 70 thenumberofcrossbarclockcyclesfromthestartof the transaction until the assertion of gio_sel mrw 0x2achapter 14 generic io interface gio 154 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002name gio_tseln2 size 32 bits address giobase 0x58 m 0x24 name gio_tctlmn1 size 32 bits address giobase 0x58 m 0x28 0xc n318 70 0tselm2 field bits description rw reset tselm2 70 the number of crossbar clock cycles for which gio_sel m is assertedrw 0xaa 31 30 29 288 70 polarity read write 0 tctlmn1 field bits description rw reset polarity 31 active state of tctlmn1 0 active low 1 active highrw 0 read 30 indicates if control line is active for read operations 0 not active for reads 1 active for readsrw 0 write 29 indicates if control line is active for write operations 0 not active for writes 1 active for writesrw 0 tctlmn1 70 thenumberofcrossbarclockcyclesfromthestartof the transaction until the assertion of gio_ctl mnrw 0x3f147 generic io configuration registers stream processor lexra inc proprietary confidential 155 rev 21 august 1 2002 do not copyname gio_tctlmn2 size 32 bits address giobase 0x58 m 0x2c 0xc n name gio_tctlmn3 size 32 bits address giobase 0x58 m 0x30 0xc n318 70 0tctlmn2 field bits description rw reset tctlmn2 70 the number of crossbar clock cycles for which gio_ctl mn is assertedrw 0x6b 318 70 0tctlmn3 field bits description rw reset tctlmn3 70 the number of crossbar clock cycles between secutive assertions of gio_ctl mn in multibeat transactions does not apply to single beat transac tionsrw 0x5achapter 14 generic io interface gio 156 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 157 rev 21 august 1 2002 do not copychapter 15 ejtag ej the stream processor has fullyfeatured debug capability which allows full visibility to all lx4580 cpu functions this capability is based on the mips ejtag debug solution 200 with extra features added to support hmt standard features include full control of all lx4580 cpus via the 5 jtag pins tck tms tdi tdo rst_n instruction and data breakpoints number is tbd hardware singlestepping of any context sdbbp software debug breakpoint and deret debug exception return instructions dma access directly to memory avoiding tlb or cache instruction jamming to the lx4580 cpu through the ejtag memorymapped region features added to support hmt include choice of which context takes debug exception when requested by ejtag option to disable other contexts when one context takes debug exception instruction and data breakpoints match against particular context or all contexts internal pc trace buffers with compression internal simultaneous pc trace buffering of all contexts globalinterruptofalllx4580cpuswhenadebugexceptionoccursinonecpucontext optional connection to ejtag via rs232 uarte port on stream processor sp1suppliesonesetofjtagpinsthroughwhichthetapcontrollersforeachlx4580cpucanbedaisy chainedtogetherthetckandtmssignalsarebroadcastsoeachtapisalwaysinthesamestateandthe tdi and tdo are daisychained tdo from cpu0 goes to tdi of cpu1 tdo of cpu1 goes to tdi of cpu2 etc figure 43 sp1 etjag or ganizationstream processor ejtagtrace bufferlx4580 cpu 0 tapejtagtrace bufferlx4580 cpu 1 tapejtagtrace bufferlx4580 cpu 2 tapejtagtrace bufferlx4580 cpu 3 taptdi tdo tdi tdo tdi tdo tditdi tms tck tdotdochapter 15 ejtag ej 158 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002the remainder of this chapter is for internal lexra use 151 ejtag differences from 200 the following tables describe implementation optionsdifferences between lexras ejtag solution and the mips ejtag debug solution 200 specification the od column indicates an option or difference 1511 ejtag tap registers table 66 ejtag tap registers name op field od implementation speciﬁc information reset implementation readonly reg ister0x3 0 1b0 indicates m32 0 41 4b0000 obsolete field 0 5 1b0 instruction breaks implemented 0 6 1b0 data breaks implemented 0 7 1b1 processor breaks not implemented 1 108 3b000 external pc trace 0 1311 3b000 external pc trace 0 16 1b0 m16 not supported 0 17 1b0 icache does not keep dma coherent 0 18 1b0 dcache does not keep dma coherent 0 19 1b1 ejtag_addr 32 bits wide 1 20 1b0 complex breaks not supported 0 2221 2b10 8bit asid ﬁeld in implementation 2b10 23 1b1 sdbbp is special2 opcode 1 2524 2b00 proﬁling support 0 29 d 1b1 lexra internal trace buffer implemented 1 address 0x8 350 36bit address register note although dma accesses use 36bit addresses cpu accesses use 32bit addresses which will appear rightjustiﬁed in this register0 data 0x9 310 32bit data register 01511 ejtag tap registers stream processor lexra inc proprietary confidential 159 rev 21 august 1 2002 do not copycontrol 0xa 0 d pcbuftac pc trace all contexts rw 0 single context traced rst value 1 all contexts traced0 5 1b0 dlock not supported r 0 6 d doc disable other contexts when in dm 0 other contexts not disabled when in dm 1 other contexts disabled when in dm0 10 1b0 dma error is not supported r 0 13 1b0 dma abort is not supported r 0 14 d setdev 1 debug xcpn vector 0xbfc004800 15 d probeen 0 debug xcpn vector 0xbfc004800 19 pracc write not read name incorrect in 200 0 20 1b0 perrst is not supported r 0 23 d pcbufen pc trace enable w1r 0 tracing stopped 1 start tracing0 2524 d pcbufmode pc trace mode rw 2b00 continuous trace mode 2b01 trigger stops trace mode 2b10 trigger starts trace mode 2b11 reserved0 26 1b0 external pc trace not supported 0 2827 d cdm context in dm r displays the context currently in debug mode only valid when brkstatus bit 3 is set0 3029 d cxs context select rw contexttobesentdebugexceptionwhenjtag brk bit 12 is set only valid when jtagbrk is set0 31 d wasrst cpu was reset rw rst value 1b0 resetonacpuresetprobecansetthisbitto 1 and if it is ever cleared cpu reset has occurred0 all 0xb 990 100bit register containing concatenation of address data and control registers internaltrace 0xc d data from internal trace buffers function described below1table 66 ejtag tap registers continued name op field od implementation speciﬁc information resetchapter 15 ejtag ej 160 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20021512 ejtag registers in ff3 drseg below is table of the optionsdifferences in drseg registers with respect to ejtag 200 drseg starts at logical address 0xff300000 from which the offsets below are shown table 67 ejtag drseg registers name offset field od implementation speciﬁc information reset debug control 0 0 trace mode not supported 0 1 mask soft reset not supported 0 2 memory protection not supported 0 3 mask nmi in non dm not supported 0 29 1b1 endianness big 1 ibs 4 30 1b1 asid supported in breaks 1 dbs 8 28 1b1 data break enhancements 1 30 1b1 asid supported in breaks 1 iban 0x100 0x10n1 1b0 mips16 support 0 ibcn 0x104 0x10n1 1b0 complex break supported 0 2120 d context value to match causesmatchforspeciﬁccontextonlywhen cntxuse enabled0 22 d cntxuse context match use 0 match on any context 1 match on context given in context value0 ibmn 0x108 0x10n1 1b0 mips16 support 0 dban 0x200 0x10n312 address to match 0 dbcn 0x210 0x10n1 1b0 complex break not supported 0 12 load breaks supported 0 data breaks enabled on loads 1 data breaks disabled on loads0 13 store breaks supported 0 data breaks enabled on stores 1 data breaks disabled on stores0 2120 d context value to match causesmatchforspeciﬁccontextonlywhen cntxuse enabled0 22 d cntxuse context match use 0 match on any context 1 match on context given in context value0 dbmn 0x204 0x10n312 address mask 0 address is not masked 1 address is masked0152 description of lx4580 cpu specific ejtag features stream processor lexra inc proprietary confidential 161 rev 21 august 1 2002 do not copy152 description of lx4580 cpu speciﬁc ejtag features 1521 disable other contexts doc ejtag control register bit 6 this bit affects the behavior of the cpu only when context is in dm when this bit is set it causes other contexts not in debug mode to be disabled matter what the value of the disable context bits in the cp0 lx_ctrl registers when there are contexts in debug mode the running state of contexts is determined by their disable contexts bits note there is skid associated with doc existing instructions in the pipeline complete before other contexts are disabled when cleared the doc bit has affect 1522 context select cxs ejtag control register bits 3029 the cxs bits allow selection of which context takes debug exception on jtagbrk ejc bit 12 being asserted hence the cxs bits are only valid when jtagbrk is asserted 1523 context in debug mode cdm ejc bits 2827 thecdmbitsreportwhichcontextisindebugmodethesebitsareonlyvalidwhenbrkstatusejcbit3is asserteddbvn 0x208 0x10n310 d data value to match only matched on stores masked on loads0 pbn 0x300 310 processor breaks not supported 0 table 68 cop0 ejtag registers nameaddr selfield od implementation speciﬁc information reset debug 230 6 debug complex break status supported 0 10 bus error not supported 0 11 tlb exception not supported 0 13 utlb miss not supported 0 14 nmi status not supported 0 28 lsnm not supported 0 depc 240 310 as 200 0 desave 310 310 as 200 0table 67 ejtag drseg registers continued name offset field od implementation speciﬁc information resetchapter 15 ejtag ej 162 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 20021524 cntxuse cntx in breakpoint control registers thecntxuseandcntxbitsinbothimatchanddmatchcontrolregistersallowmatchesagainstaspecific context or against all contexts 1525 precise data breaks data breaks are precise the load or store that matches the data breakpoint will be squashed 1526 data value break loads data value breaks on loads are not supported 1527 ejtag_addr 36bit as the stream processor has 36bit physical address space and 32bit logical address space the ejtag_addr register is 36bits wide to accommodate the physical address ejtag_addr is used for 2 functions determined by the dma acc bit in the ejc dmaacc 1 ejtag_addr is readwrite and contains the physical address for dma transfer dmaacc0ejtag_addrisreadonlyandcontainsthelogicaladdressofaprocessoraccessonlyvalid with pracc is set so when dmaacc 0 ejtag_addr contains 32bit logical address in 36bit register it is padded as follows4b0000logicaladdressthisdoesnotrequireachangeinbehaviorhoweverasthisregisteris readonly when dmaacc0 reading out ejtag_addr only requires 32 shifts as before because the logical address is rightjustified 1528 pc trace buffer tac 15281 overview the pc trace buffer provides realtime pc trace solution which does not restrict the speed of the cpu and reduces the pin count which is prohibitive for normal pc trace with multiprocessor systems it employs an onchip ram to store compressed pc trace information for retrieval afterthefact by the ejtag probe stored in the ram is all the information needed to fully reconstruct the program flow iftracingisenabledabufferentryiswrittenoneverypcdiscontinuitythebufferentrycontainsthetargetof the discontinuity the asid the number of sequential instructions executed since the last buffer entry was written and tracepoint indicator set if trace point occurred since the last entry was written1528 pc trace buffer tac stream processor lexra inc proprietary confidential 163 rev 21 august 1 2002 do not copy15282 cpu ejtag block diagram the diagram shows the structure of the pc trace buffer block pctb the pctb receives pipeflow information from cop0 every clock cycle it reads and writes entries into the pctb ram the control of the pctb comes from the ejtag probe which can scan in and scan out control and data via the tap to initiate pctb functions 15283 block descriptionsfigure 44 cpu ejtag block diagram cop0 thisblocksendswstagesignalstothepctbprovidingallthe pipeline information needed to write buffer entries thisinformation comes in the form of the wstage pc asid contextand instructiontype code pctb this block is the heart of the pc trace buffer it receives control from the probe via retimed registers in ejtag control whentracingitteststhedatafromcop0anddecideswhento write buffer entry it also keeps count of the sequential instructions executed since the last buffer entry it handles all the ram accounting keeping track of the address ram address wrapping conditions and startstop tracing conditions ram this block contains the ram used by the pctb it is about 50 bits wide and 128 entries deep ejtag control this block contains all the retiming registers for control information scanned in by the probe it also containsthe registers readwritten by the probe to control the pctb probe this is the ejtag probe it is external to the chip it controls ejtag by scanning data in and out of registers in ejtagcp0 pctb ejtag control scan tapram probepc info type context read dataaddrwrite datarw tditditmsjtckcpu ejtag ejtag lx2 lx2 off chip cpu ejtag ejtag lx2 lx2 off chipchapter 15 ejtag ej 164 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 200215284 ram format here is the description of buffer entry assuming seq field width 8 here is the description of header entrybit name description 0 val 1b0 marker at the beginning of each entry to indicate that the memory entry is ready to be scanned through the asynchronous interface 1 trig trigger occurred between this and the previous entry 92 seq number of sequential instructions since last entry satu rates 1710 asid asid 4817 pc pc logical address bit name description 0 val 1b0 marker at the beginning of each entry to indicate that the memory entry is ready to be scanned through the asynchronous interface 41 seqw width of seq ﬁeld in buffer 105 rsvd reserved 6b000000 2518 asidw width of asid ﬁeld always 4b0100 1430 bufe number of valid buffer entries1528 pc trace buffer tac stream processor lexra inc proprietary confidential 165 rev 21 august 1 2002 do not copy15285 mode of operation pctb function is controlled via bits in the ejtag control register these bits are bit 23 pcbufen previouslysyncbits2425pcbufmodepreviouslypclenandbit27pcbuftactraceallcontexts bit 29 in the implementation register informs the probe of the presence of the buffer and enables the secondary definition of the four mode bits pcbufen cannot be cleared directly by the probe the hardware clears the bit in number of cases 1 buffer full after trigger for trigger start and stop modes 2 by the probe scanning 0x0c into jtag instruction register to read out buffer entries 3 changing the pcbufmode bits pctb for single context when pcbufen1 the trace buffer continues to fill until stop condition occurs or debug mode is entered when debug mode enters the trace buffer records an entry for the debug exception vector address usually 0xff20_0200 on exiting debug mode the trace buffer records the depc address in triggerstart mode when trigger breakpoint occurs the trace buffer marks its most recent entry as the beginning of the buffer the trace buffer will continue to record entries until it wraps around to this start and then will stop recordingpcbufena bit 23 pcbufen is set by writing 1 to it only during debug mode 01 transi tion resets the bufferpcbufmode bits 2524 buffer modeb b the buffer mode can be scanned in at any time even when not in debug mode if the mode changes during tracing pcbufen will be cleared stop ping trace1 00 continuous wrap resetstate 1 01 any trigger stops trace triggerstop 1 10 anytriggerstartstracetriggerstarttrace stops when buffer fullc c buffer full means that it wrapped around to the ﬁrst entry1 11 reserved 0 xx buffer disabledreset resetstate pcbuftac bit 27 contexts traced 1 trace all contexts 0 trace context currently in debug modechapter 15 ejtag ej 166 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002in triggerstop mode the trace buffer continues to record entries until trigger breakpoint occurs the trace buffer will then record one more entry when pc trace stops the pcbufen will be cleared the probe will then scan the data out of the buffer to restart the trace pcbufen must be set this resets the buffer toreadthebuffertheprobereadseachentrysequentiallyanewtapinstructionregisteropcodeselectsthe buffertobereadthisopcodeis0x0cthefirsttimetheprobescansthedataregisterdrafterscanningin 0x0c opcode it gets the header that describes the widths of the entry fields and the number of entries when the tap controller reaches the update state the hardware reads the first entry into scan buffer through an asynchronous interface since the memory will be operating using sysclk by the time the tap comes back around to the first entry the scan buffer will have the data from the first entry to indicate that data is ready the first bit to be scanned is 1b0 if for some reason the tap controller is faster than the asynchronousinterfaceanddataisnotyetreadyinthescanbufferthehardwarewillscanout1b1untildata is ready after the first entry has been scanned out the tap will leave the scan state as it passes through the update state the next sequential entry is loaded into the scan register note that it is more traditional that the scan buffer be loaded in the capture state however since the asynchronousinterfaceisgoingtotakeseveralcyclesusingthepreviousscansupdatestatewillgetahead start on fetching the entry iftheprobetriestoscanoutdatapastthenumberofentriesgivenintheheaderthedatareadbackfrom0x0c will be 1b1 indicating data not valid if the probe changes the jtag instruction register from 0x0c the buffer data will be lost it cannot return to 0x0c and read out more data if it does the data will again be 1b1 not valid pctb for all contexts one extra mode of operation is added to support hmt tracing of all contexts simultaneously in this mode data in the buffer is uncompressed and the seq field is used as context field to indicate to which context the data corresponds this information shows the interaction between threads access to the buffer is the same as when single context is being debugged when the probe starts pc trace all pointers and counters are reset such that any data in the buffer from the previous trace will be lost 1529 instruction replay one artifact of hmt is that some instructions loads and stores can be speculatively fetched or replayed when instructions are jammed there is possibility that particular load or store may have to be jammed number of times before it is executed this condition is easily detected as the address reported in ejtag_addr will not increment when replay has occurred 15210dmwait the hmt cpu implements dm wait feature which prevents more than one context from executing in debug mode at any given time as there is only one instance of various cp0 registers such as desave used to support debug mode furthermore the ejtag probe software is unlikely to support intermixed accessestothedmseganddrsegregionsthereforeafteronecontextbeginsexecutingindebugmodedue toanejtagexceptionanyothercontextwhichtakesanejtagexceptionisplacedinthedmwaitqueue15211 debug mode overrides disable context stream processor lexra inc proprietary confidential 167 rev 21 august 1 2002 do not copywhileinthedmwaitstatethecontextdoesnotissueanyinstructionswhenthefirstcontextleavesdebug modebyexecutingaderetinstructionthenextcontextinthedmwaitqueueresumesexecutioninthe ejtag exception handler 15211debug mode overrides disable context if debug exception occurs on context which is disabled via the disable context bits in the cop0 lx_ctrlthecontextwillbecomeenabledwhilstindebugmodethiswillallowthedebugexceptiontobe taken on exit from debug mode the context will disabled as per its disable context bit 15212ejtag boot viaejtagbootanylx4580canstartexecutionfromprobespaceafterresetinthismodetheresetvector is changed to 0xff200200 thus the first instruction fetched by the lx4580 is from the probe thismodeiscontrolledbythevalueofejcprobeenatresetinorderfortheprobeenbitnottoberesetitself ithasitsowndedicatedresetpinonlx2prbenrst_d1_r_nthispinshouldonlybeassertedonacold reset and should not be asserted when jtag_rst_n is asserted to enter ejtag boot mode the following steps should be taken powerup stream processor normally and assertdeassert cold reset creset_n connect the ejtag probe to the stream processor and set the probeen bit in the ejtag control register assertdeassert jtag_rst_n the lx4580 will now be fetching from 0xff200200 the cop0 depc register will be 0x00000000 15213the lexra probe contained in the stream processor is the lexra probe which sits between the rs232 uarte block and the jtag pins inside the design ascii characters can be sent to uarte which cause instructions to be sent to cpus tap controllers via their jtag pins on powerup the jtag pins are connected to the jtag pins of the stream processor but if character is received on uarte the jtag pins of the lx4580 will be switched to be connected to the lexra probe instead only reset will change the mulitplexer back to the jtag pins of the stream processorchapter 15 ejtag ej 168 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 169 rev 21 august 1 2002 do not copychapter 16 performance counters 161 performance counter overview the stream processors hardware performance counters allow applications to be analyzed and tuned to get the most performance possible software may select from range of events to monitor and count during normal operation this chapter summarizes the performance counters and provides crossreferences to the detailed information for each counter the performance counters have the following characteristics accessible through cp0 or memorymapped registers depends on counter low software overhead impact on operation multiple 32bit event counters selectable events per counter tbd software supplied by lexra 162 performance counter architecture the performance counters are distributed throughout stream processor with each counter contained within the functions that are counted counters have the structure shown in figure45 consisting of 32bit event counter and counter specific event selection logic the event counters and selection logic are readable and writable under cpu program control the counters for some functions provide multiple event selection blocks and event counters allowing more than one event type to be counted simultaneously for example to determine cache miss ratio the total number references and the number of misses may be counted simultaneously counterswithinacpuareaccessedwiththemfc0andmtc0instructionscountersthroughouttherestof the stream processor are accessed with load and store instructions lw and sw 163 performance counter operation anoperatingsystemmayextendcounteraccessrightstoprocessesordevicedriversonlyonedevicedriver or process should write to given counters event selection logic or counter for initialization purposes any number of device drivers or processes can safely read the current counter settings all counters consist of 32bit value there is hardware provision for handling the rollover condition of thecountersattheworstcaserateofoneincrementpercycletheminimumrolloverperiodforanycounter isseveralsecondseg8secondsfor500mhzoperationsoftwarecaneasilydetectarolloverconditionand compensate for it by polling counter more frequently than this periodfigure 45 performance counter structureevent selectionevent counter 32 bitsevents incchapter 16 performance counters 170 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002164 summary of performance counters table69 summarizes the stream processor performance counters and includes crossreference to more detailed information within this data sheet for replicated functions eg multiple cpus the number of counters shown in the table is for each instance of the function somefunctionalblocksincludeperformancemonitoringfeaturesotherthanthestandardcountertypethese features listed in table70 additional details on their structure and use are found in the crossreferenced sectiontable 69summary of performance counters function counter events counters see sec cpu see mips32 chapter 4 210 memory subsystemsee memory subsystem chapter 2 914 dma controllerthe following events may be counted for the dma control lerasawholeorforaselectedchannelnondatarefersto atransactionassociatedwithdmaoverheadsuchasread ing transfer descriptor data line read data line write nondata line read nondata line write data subline write data subline read nondata subline write nondata subline read2 xref to be sup plied table 70 additional performance monitoring features function performance monitoring feature see sec dma the following values may be sampled for each queue current number of entries held in queue maximum number of entries held in queuexref to be suppliedstream processor lexra inc proprietary confidential 171 rev 21 august 1 2002 do not copychapter 17 error detection and reporting 171 error detection and reporting overview the stream processor incorporates error detection and reporting mechanisms required for robust software and hardware environments this chapter summarizes these features and provides cross references to more detailed information throughout this data sheet the following error types are detected within the stream processor bus errors access to an undefined location in the system address space access to defined location in the system address space but with incorrect size hardware errors crossbar transaction timeout byte parity protection for all internal srams ecc single error correct and multi error detect for external sdram error detection for external interfaces as defined by the interface standards internal use state consistency checks eg l1 vs l1 tag copies internal use cmdstate consistency checks eg command vs l1l2 state internal use unexpected crossbar replies exceptional conditions that may arise in adevice such asadma queue overflow are not considered in this chapter they are described in the applicable chapters the reporting of bus errors and hardware errors are handled differently bus errors always cause bus error exception to be taken by the cpu context that initiated the access hardware errors generally cannot be attributed to specific thread when an error is detected applicable informationisrecordedwithinthedetectingmoduleforlaterdiagnosisthestreamprocessorisconfigurable to report hardware errors so that software can analyze the details and take appropriate action the following reporting options are available report report error via global level sensitive interrupt assert panic output pins for use by system level logic 172 bus error reporting abuserrorariseswhenacpucontextattemptsaninvalidaccesstothestreamprocessorsaddressspacea buserrorcausesanbuserrorexceptionforthecpucontextthatattemptstheinvalidaccessitisnotpossible to mask bus errors they are always reported unconditionally to the applicable cpu context if bus error is detected within the cpus crossbar interface other modules are involved in the error signalling if the bus error is detected within device the device sends crossbar bus error be message to the cpu context that issued the offending request if the offending request would normally have corresponding reply the be message is issued in place of the reply thecpuscrossbarinterfaceconvertsthebetransactionintoabuserrorexceptionthecpualsoreleases anyinternalresourcesthatwouldotherwisebeheldupuntilthereceiptofthenormalreplyfortherequestthat caused the be replychapter 17 error detection and reporting 172 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002173 hardware error reporting hardware error detection and reporting blocks are distributed throughout the stream processors logic modules each module includes the general features shown in figure46 error detection logic within the block monitors the signals from data path or other state within the stream processor the detection logic provides three error output signals and additional diagnostic information that iscapturedinaregisterthediagnosticinformationiscaptureduponthedetectionofthefirsterrorwithinthe module and is held until it is cleared by software or hardware reset each block of error logic includes configuration register that determines how its errors are to be reported through the modules three output signals panic0en assert the stream processors panic0 output pin panic1en assert the stream processors panic1 output pin errinten assert modules error interrupt signal thethreereportingoptionsforeachdetectableerrorcanbesetindependentlyanycombinationofreporting optionslistedabovecanbeenabledforeachdetectableerrorasaresultofresetallhardwareerrorreporting options are disabled software can enable any combination of reporting options for module by setting the appropriate bits in the moduless configuration registers theerrorflagsfromthedetectionlogicareandedwiththeenabletermsfromtheconfigurationregisterthe panic0andpanic1outputsofallmodulesarereductionoredtoproducethestreamprocessorspanic0 and panic1 output signals the err_int output from each module is passed to the interrupt router and reflector irr the irr retains an indication of the first module that reports an error and sources global error interrupt signal the see section433 thestreamprocessorreportshardwareerrorsinthemosttimelymannerpossiblewithoutcompromisingthe clock speed of the hardware however the number of cycles that elapse between an error condition and the reportingthroughapanicorinterruptconditionisnotdefinedtheglobalinterruptusedtosignalahardware error to the cpu is by definition imprecise 174 error detection conﬁguration registers this section summarizes error detection and reporting registers and provides crossreferences to more detailed information within this data sheet table to be suppliedfigure 46 error detection block architectureerror detection logicdata path or state information panic0 panic1 err_intdiagnostic information error configurepanic0en panic1en errinten175 error detection and reporting pins stream processor lexra inc proprietary confidential 173 rev 21 august 1 2002 do not copy175 error detection and reporting pins this section describes the stream processor ic pins related to error detection and reporting signal name direction description panic0 output asserted high if one or more errors are detected and the corre sponding panic0en conﬁguration term is set to 1 otherwise assertedlowthemeaningofpanic0andthesystemsresponse to its assertion is application deﬁned panic1 output assertedhighifoneormoreinternalstreamprocessorerrorsare detected and the corresponding panic1en conﬁguration term is set to1otherwisedeassertedlowthemeaningofpanic1andthe systems response to its assertion is application deﬁnedchapter 17 error detection and reporting 174 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 175 rev 21 august 1 2002 do not copychapter 18 interfaces 181 interfaces table 71 interface summary name pins direction description clocks and reset 4 pins cpuclk 1 input cpu core clock cpuclk_n 1 input cpu core clock differential input creset_n 1 input cold reset dmaclk 1 input dma core clock dmaclk_n 1 input dma core clock differential input jtag_rst_n 1 input connection from the ejtag probe interrupts 4 pins int0_n 1 input external interrupt line 0 active low int1_n 1 input external interrupt line 1 active low int2_n 1 input external interrupt line 2 active low int3_n 1 input external interrupt line 3 active low chip test and software debug 4 pins jtag_tdi 1 input jtag test data in jtag_tdo 1 output jtag test data out jtag_tms 1 input jtag test mode select jtad_tck 1 input jtag clock error detection 2 pins panic0 1 output hardware error detection panic output 0 panic1 1 output hardware error detection panic output 1 ddr sdram 2 interfaces n01 total of 230 pins mcn_ras_n 1 output row address strobe mcn_cas_n 1 output column address strobe mcn_we_n 1 output write enable mcn_s_n30 4 output chip select mcn_ba10 2 output bank address mcn_a130 14 output address mcn_dq710 72 inout data bus mcn_dqs80 9 inout data strobe mcn_dqm80 9 output data maskchapter 18 interfaces 176 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002mcn_cke 1 output clock enable mc_memclk 1 input memory clock gmii 3 interfaces n012 total of 81 pins gmiin_mdc 1 output management clock gmiin_mdio 1 inout management data tofrom phy gmin_gtx_clk 1 input transmit reference clock 25 25 or 125 mhz gmiin_tx_clk 1 output transmit clock to phy gmiin_txd70 8 output transmit data to phy gmiin_tx_en 1 output transmit data enable to phy gmiin_tx_er 1 output transmit error control to phy gmiin_crs 1 input carrier sense from phy gmiin_col 1 input collision detect from phy gmiin_rx_clk 1 input receive clock from phy gmiin_rxd70 8 input receive data from phy gmiin_rx_dv 1 input receive data valid from phy gmiin_rx_er 1 input receive error control from phy pcix 1 interface total of 56 pins pcix_clk 1 input clock pcix_par 1 inout parity pcix_rst_n 1 input reset pcix_ad310 32 inout address or data pcix_cbe_n30 4 inout command and byte enable ﬂags pcix_frame_n 1 inout frame pcix_irdy_n 1 inout initiator ready pcix_trdy_n 1 inout target ready pcix_stop_n 1 inout stop pcix_devsel_n 1 inout device select pcix_idsel 1 input initialization device select pcix_lock_n 1 inout lock target pcix_perr_n 1 inout parity error pcix_serr_n 1 inout system error pcix_req_n 1 output stream processors request to external arbitertable 71 interface summary name pins direction description181 interfaces stream processor lexra inc proprietary confidential 177 rev 21 august 1 2002 do not copypcix_gnt_n 1 input grant from external arbiter pcix_reqin_n20 3 input requestsfromexternalpcidevicestostreampro cessors internal arbiter pcix_gntout_n20 3 output grants to external pci devices to stream proces sors internal arbiter i2c 1 interface total of 2 pins i2c_scl 1 inout serial clock i2c_sda 1 inout serial data general purpose inputoutput 1 interface total of 41 pins gio_ad310 32 inout address output only or data inout gio_sel_n30 4 output device select gio_ctl30 4 output controls gio_rdy_n 1 input device ready uart 1 interface total of 4 pins uart_dtr 1 output data terminal ready uart_dsr 1 input data set ready uart_rxd 1 input receive data uart_txd 1 output transmit datatable 71 interface summary name pins direction descriptionchapter 18 interfaces 178 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002stream processor lexra inc proprietary confidential 179 rev 21 august 1 2002 do not copyindex address space boot 35 conﬁguration registers 56 control 35 decoding 34 ejtag 36 generic io interface 36 mips32 implementation 15 overview 33 pcix 36 sdram 36 size 34 as_drammask register 57 as_giobase register 59 as_giomask register 60 as_pciabase register 57 as_pciamask register 58 as_pcibbase register 58 as_pcibmask register 59 b be crossbar message 43 boot address space 35 multicpu cold boot 24 multicpu ejtag boot 24 buffer descriptor dma 104 c cache instruction 9 cacheability memory subsystem 74 caches l1 data cache 52 l1 instruction cache 52 che coherency engine 74 87 checksum dma 115 coherency memory subsystem 74 87 mips32 implementation 16 conﬁguration registers address space 56 control address space 35 cp0 hazards 17 registers 10 cpu crossbar interface cbus 56 64 ibus 56 67 inquiry and request reply fifo 56 interrupts 68 overview 55 reply fifo 56 request fifo 56 cpu see lx4580 cpu cpux_intmask register 29 61 cpux_intpend register 29 60 crossbar agents 40coherency effects 76 initiatortarget relationships 46 interfaces 48 messages 41 overview 39 protocol 49 transfer networks 47 crossbar interface cpu 55 memory subsystem 85 d debug see ejtag debug 157 dev_intmask register 62 dev_intpend register 28 61 direct memory access see dma controllers divide instructions 9 dl crossbar message 43 dle crossbar message 43 dlm crossbar message 43 dls crossbar message 43 dma controllers addressing 98 buffer descriptor 104 checksum 115 data bandwidth 98 error handling 115 ethernet 99 interrupts 114 leading ﬁll 113 memory move 101 overview 97 packet mapper 109 pcix 99 queue operation 102 queues 102 timestamp 114 dram see memory subsystem ds crossbar message 43 ejtag debug address space 36 breakpoints 162 context in debug mode 161 debug mode wait 15 debug mode wait dmwait 166 differences from 200 158 disable context override 167 disabling other contexts 161 drseg registers 160 ejtag_addr register 162 instruction replay 166 mips32 implementation 16 overview 157 selecting context 161 tap registers 158 trace buffer 162 endianness mips32 implementation 16 error handling180 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002dma controllers 115 ethernet 120 generic io interface 149 interrupt 29 memory subsystem 82 ethernet dma controller 99 error handling 120 interface 120 overview 119 registers 122 statistics 120 exceptions mips32 architecture 14 ext_intmask register 28 63 ext_intpend register 28 62 g generic io interface address space 36 conﬁguration overview 139 conﬁguration registers 149 decoding addresses 34 error handling 149 overview 137 signals 138 timing 138 transaction conversion 140 transactions 140 gio_cfgm register 150 gio_tam1 register 151 gio_tam2 register 151 gio_tam3 register 152 gio_tam4 register 152 gio_tctlmn1 register 154 gio_tctlmn2 register 155 gio_tctlmn3 register 155 gio_tdm1 register 152 gio_tdm2 register 153 gio_trsm register 153 gio_tselm1 register 153 gio_tseln2 register 154 i ia crossbar message 44 ide crossbar message 43 iea crossbar message 44 ii crossbar message 43 iie crossbar message 43 in crossbar message 43 ina crossbar message 44 instructions mips32 implementation 7 interfaces external interrupts 32 generic io 137 reset 25 interrupts cpu cross interrupt 29 cpu crossbar interface 68 device 28 dma controllers 114 external 28 hardware error 29 interface 32 mips32 implementation 13 overview 27 ira crossbar message 44ire crossbar message 43 irr_cci register 30 irr_eimm register 29 irr_moduleerrorcapture register 31 l l2 cache see memory subsystem li coherency transaction 92 crossbar message 42 ll instruction 7 lx4580 cpu cache line replacement algorithm 53 core 52 data cache 52 instruction cache 52 instructions implementation speciﬁc details 7 mips32 implementation 7 mips32 release 2 implementation 18 overview 51 m memory subsystem bandwidth 70 cacheability 74 coherency protocol 74 coherency transactions 87 conﬁguration registers 78 crossbar and coherency 76 crossbar interface 85 duplicate l1 tags 73 error handling 82 inquiry messages 75 interfaces 85 interrupt interface 86 l2 cache 72 l2 replacement algorithm 76 messages 72 ordering 72 overview 69 performance counters 80 sdram conﬁgurations 71 sdram interface 86 transactions 72 mips32 implementation 7 mips32 release 2 implementation 18 msncfg register 78 msnerren0 register 83 msnerren1 register 83 msnerrstat0 register 84 msnerrstat1 register 84 msnerrto register 84 msnmemctl register 79 msnpcnt0 register 80 msnpcnten register 80 msnpcntev0 register 81 msnpcntev1 register 81 p packet mapper dma 109 pcix address space 36 arbitration 128 decoding addresses 34 dma controller 99 interface 128stream processor lexra inc proprietary confidential 181 rev 21 august 1 2002 do not copymaster operation 129 overview 127 target operation 129 performance counters architecture 169 cpu mips32 implementation 17 ethernet statistics 120 memory subsystem 80 operation 169 overview 169 summary 170 pref instruction 8 q queues see dma controllers r rb coherency transaction 95 crossbar message 42 registers as_drammask 57 as_giobase 59 as_giomask 60 as_pciabase 57 as_pciamask 58 as_pcibbase 58 as_pcibmask 59 cp0 10 cpux_intmask 29 61 cpux_intpend 29 60 dev_intmask 62 dev_intpend 28 61 ejtag tap 158 ejtag_addr 162 ethernet 122 etjag drseg 160 ext_intmask 28 63 ext_intpend 28 62 gio_cfgm 150 gio_tam1 151 gio_tam2 151 gio_tam3 152 gio_tam4 152 gio_tctlmn1 154 gio_tctlmn2 155 gio_tctlmn3 155 gio_tdm1 152 gio_tdm2 153 gio_trsm 153 gio_tselm1 153 gio_tseln2 154 irr_cci 30 irr_eimm 29 irr_moduleerrorcapture 31 msncfg 78 msnerren0 83 msnerren1 83 msnerrstat0 84 msnerrstat1 84 msnerrto 84 msnmemctl 79 msnpcnt0 80 msnpcnten 80 msnpcntev0 81 msnpcntev1 81testandset 25 timer_compare_0 133 timer_compare_1 134 timer_conﬁg 133 timer_count 132 replacement algorithm l1 caches 53 l2 cache 76 reset cpu 15 distribution 24 interface 25 multicpu cold boot 24 multicpu ejtag boot 24 operation 24 overview 23 rh coherency transaction 95 crossbar message 42 rl coherency transaction 8890 crossbar message 41 rle coherency transaction 8990 crossbar message 41 rlm coherency transaction 90 crossbar message 41 rlme coherency transaction 90 crossbar message 41 rln coherency transaction 93 crossbar message 42 rt coherency transaction 95 crossbar message 42 rw coherency transaction 95 crossbar message 42 s sc instruction 7 sdram address space 36 decoding addresses 34 sdram see also memory subsystem sync instruction 8 system control module 131 system timers 132 t testandset register 25 timer_compare_0 register 133 timer_compare_1 register 134 timer_conﬁg register 133 timer_count register 132 timestamp dma 114 trace buffer ejtag 162 u udi instructions 9 um coherency transaction 9091 crossbar message 41 uma crossbar message 43182 lexra inc proprietary confidential stream processor do not copy rev 21 august 1 2002user deﬁned instructions udi 9 v ve coherency transaction 92 crossbar message 41 w wait instruction 9 wb coherency transaction 96 crossbar message 42 wh coherency transaction 96 crossbar message 42 wla crossbar message 43 wli coherency transaction 92 crossbar message 42 wln coherency transaction 94 crossbar message 42 wls coherency transaction 92 crossbar message 42 wsa crossbar message 43 wt coherency transaction 96 crossbar message 42 ww coherency transaction 96 crossbar message 42